Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 10 times.  Unmatched entries are ignored!
Unterminated calls:
  org.junit.runner.JUnitCore.main(java.lang.String[]) : 1 invocation
  junit.framework.TestResult$1.protect() : 1 invocation
  junit.framework.TestCase.runBare() : 1 invocation
  junit.framework.TestCase.runTest() : 1 invocation
  org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testMathpbx02() : 1 invocation
  junit.framework.TestCase.assertEquals(double, double, double) : 1 invocation
  junit.framework.Assert.assertEquals(double, double, double) : 1 invocation
  junit.framework.Assert.assertEquals(java.lang.String, double, double, double) : 1 invocation
  junit.framework.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object) : 1 invocation
  junit.framework.Assert.fail(java.lang.String) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
com.sun.proxy.$Proxy3:::CLASS
com.sun.proxy.$Proxy3.m1 has only one value
com.sun.proxy.$Proxy3.m2 has only one value
com.sun.proxy.$Proxy3.m3 has only one value
com.sun.proxy.$Proxy3.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy3:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
return has only one value
===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(double, double, double):::ENTER
expected one of { 0.0, 20654.744890306974 }
actual one of { 1.0247153407345222E-8, 20654.74511575945 }
delta one of { 1.0E-5, 0.001 }
===========================================================================
junit.framework.Assert.assertEquals(double, double, double):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, double, double, double):::ENTER
message == null
expected one of { 0.0, 20654.744890306974 }
actual one of { 1.0247153407345222E-8, 20654.74511575945 }
delta one of { 1.0E-5, 0.001 }
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, double, double, double):::EXIT124
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, double, double, double):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message.toString == "TestCase.fName cannot be null"
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == orig(message.toString)
message.toString == "TestCase.fName cannot be null"
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
message.toString == "TestCase.fName cannot be null"
===========================================================================
junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
message == null
expected has only one value
expected.getClass().getName() == java.lang.Double.class
actual has only one value
===========================================================================
junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
return has only one value
return.toString == "expected:<16828.208208485466> but was:<20654.74511575945>"
===========================================================================
junit.framework.AssertionFailedError:::CLASS
===========================================================================
junit.framework.AssertionFailedError:::OBJECT
this has only one value
===========================================================================
junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String):::ENTER
message has only one value
message.toString == "expected:<16828.208208485466> but was:<20654.74511575945>"
===========================================================================
junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String):::EXIT
message.toString == orig(message.toString)
message.toString == "expected:<16828.208208485466> but was:<20654.74511575945>"
===========================================================================
junit.framework.AssertionFailedError.defaultString(java.lang.String):::ENTER
message has only one value
message.toString == "expected:<16828.208208485466> but was:<20654.74511575945>"
===========================================================================
junit.framework.AssertionFailedError.defaultString(java.lang.String):::EXIT
message.toString == return.toString
message.toString == orig(message.toString)
return == orig(message)
message.toString == "expected:<16828.208208485466> but was:<20654.74511575945>"
return has only one value
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.assertEquals(double, double, double):::ENTER
expected one of { 0.0, 20654.744890306974 }
actual one of { 1.0247153407345222E-8, 20654.74511575945 }
delta one of { 1.0E-5, 0.001 }
===========================================================================
junit.framework.TestCase.assertEquals(double, double, double):::EXIT
===========================================================================
junit.framework.TestCase.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message.toString == "TestCase.fName cannot be null"
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.TestCase.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == orig(message.toString)
message.toString == "TestCase.fName cannot be null"
===========================================================================
junit.framework.TestCase.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.TestCase.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
return == 1
===========================================================================
junit.framework.TestCase.getName():::ENTER
===========================================================================
junit.framework.TestCase.getName():::EXIT
this.fName == return
this.fName.toString == return.toString
return == orig(this.fName)
return.toString == orig(this.fName.toString)
return != null
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
size(result.fErrors[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(result.fFailures[]) one of { 0, 1 }
size(result.fListeners[]) == 1
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
result.fFailures == orig(result.fFailures)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(result.fFailures[]) one of { 0, 1 }
size(result.fListeners[]) == 1
result.fRunTests - orig(result.fRunTests) - 1 == 0
===========================================================================
junit.framework.TestCase.runBare():::ENTER
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
===========================================================================
junit.framework.TestCase.runTest():::ENTER
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
===========================================================================
junit.framework.TestFailure:::OBJECT
this has only one value
this.fFailedTest has only one value
this.fFailedTest.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
this.fThrownException has only one value
===========================================================================
junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable):::ENTER
failedTest has only one value
failedTest.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
thrownException has only one value
===========================================================================
junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable):::EXIT
this.fFailedTest == orig(failedTest)
this.fFailedTest.getClass().getName() == orig(failedTest.getClass().getName())
this.fThrownException == orig(thrownException)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fErrors[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] elements has only one value
junit.framework.TestResult.this.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
junit.framework.TestResult.this.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors[] == []
junit.framework.TestResult.this.fErrors[].getClass().getName() == []
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fFailures[]) one of { 0, 1 }
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fRunTests > size(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
size(junit.framework.TestResult.this.fFailures[]) >= size(junit.framework.TestResult.this.fErrors[])
size(junit.framework.TestResult.this.fFailures[]) <= size(junit.framework.TestResult.this.fListeners[])
size(junit.framework.TestResult.this.fFailures[])-1 <= size(junit.framework.TestResult.this.fErrors[])
size(junit.framework.TestResult.this.fFailures[])-1 >= size(junit.framework.TestResult.this.fErrors[])-1
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fErrors[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] elements has only one value
junit.framework.TestResult.this.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
junit.framework.TestResult.this.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors[] == []
junit.framework.TestResult.this.fErrors[].getClass().getName() == []
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
size(junit.framework.TestResult.this.fFailures[]) one of { 0, 1 }
size(junit.framework.TestResult.this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName == $hidden$2.fName
this.val$test.fName.toString == $hidden$2.fName.toString
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fErrors[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
$hidden$2.fName == orig($hidden$2.fName)
$hidden$2.fName.toString == orig($hidden$2.fName.toString)
size(junit.framework.TestResult.this.fErrors[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
this.val$test.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
junit.framework.TestResult.this.fRunTests one of { 1, 2, 4 }
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName == orig(this.val$test.fName)
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fErrors[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fErrors[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
junit.framework.TestResult.this.fRunTests one of { 1, 2, 4 }
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] elements has only one value
this.fFailures[] elements != null
this.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
this.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fErrors[] == []
this.fErrors[].getClass().getName() == []
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
this.fListeners[].getClass().getName() one of { [], [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener] }
this.fRunTests >= 0
this.fStop == false
size(this.fFailures[]) one of { 0, 1 }
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fErrors[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) >= size(this.fErrors[])
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fErrors[])
size(this.fFailures[])-1 >= size(this.fErrors[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
size(this.fErrors[]) <= size(this.fListeners[])
size(this.fErrors[]) >= size(this.fListeners[])-1
size(this.fErrors[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fErrors[]
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
===========================================================================
junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::ENTER
this.fFailures[] == this.fErrors[]
junit.framework.AssertionFailedError.serialVersionUID == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests == 3
test has only one value
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
e has only one value
this.fListeners[] elements == this.fListeners[junit.framework.AssertionFailedError.serialVersionUID-1]
===========================================================================
junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fFailures[])
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
junit.framework.AssertionFailedError.serialVersionUID == size(this.fFailures[])
junit.framework.AssertionFailedError.serialVersionUID == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests == 3
this.fFailures[] elements == this.fFailures[junit.framework.AssertionFailedError.serialVersionUID-1]
this.fListeners[] elements == this.fListeners[junit.framework.AssertionFailedError.serialVersionUID-1]
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fErrors[]
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
listener has only one value
listener.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == this.fErrors[]
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
this.fRunTests > size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == size(return[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fRunTests > size(this.fFailures[])
this.fRunTests >= size(return[])
size(this.fFailures[]) <= size(return[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
test.fName.toString == orig(test.fName.toString)
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
return == false
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
===========================================================================
junit.framework.TestSuite:::OBJECT
this has only one value
this.fName.toString one of { "EigenDecompositionImpl Tests", "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests" }
this.fTests has only one value
this.fTests != null
this.fTests[] elements != null
this.fTests[].getClass().getName() elements == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
size(this.fTests[]) == 4
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fName has only one value
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName has only one value
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this.fName has only one value
this.fName != null
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT293
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
size(this.fTests[]) one of { 0, 2, 4 }
size(names[])-1 != 0
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT297
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class):::ENTER
this.fName == null
this.fTests[] == []
this.fTests[].getClass().getName() == []
theClass has only one value
===========================================================================
junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class):::EXIT146
===========================================================================
junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
size(this.fTests[]) == 4
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT73
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
name.toString == orig(name.toString)
return.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
===========================================================================
junit.framework.TestSuite.getName():::ENTER
this.fName has only one value
this.fName.toString == "EigenDecompositionImpl Tests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
size(this.fTests[]) == 4
===========================================================================
junit.framework.TestSuite.getName():::EXIT
this.fName == return
this.fName.toString == return.toString
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
return == orig(this.fName)
return.toString == orig(this.fName.toString)
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
return has only one value
return.toString == "EigenDecompositionImpl Tests"
size(this.fTests[]) == 4
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT82
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this.fName has only one value
this.fName != null
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 0, 2, 4 })
(return == false)  ==>  (size(this.fTests[])-1 != 0)
this.fName has only one value
this.fName != null
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
size(this.fTests[]) one of { 0, 2, 4 }
size(this.fTests[])-1 != 0
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this.fName has only one value
this.fName != null
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 0, 2, 4 })
(return == false)  ==>  (size(this.fTests[])-1 != 0)
this.fName has only one value
this.fName != null
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
size(this.fTests[]) one of { 0, 2, 4 }
size(this.fTests[])-1 != 0
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fName has only one value
this.fName.toString == "EigenDecompositionImpl Tests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(this.fTests[]) == 4
size(result.fListeners[]) == 1
this.fTests[result.fRunTests] has only one value
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fFailures[])
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(this.fTests[])
result.fRunTests == orig(size(this.fTests[]))
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])-1
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
size(result.fFailures[]) == size(result.fListeners[])
size(result.fFailures[]) == orig(size(result.fListeners[]))
this.fName has only one value
this.fName.toString == "EigenDecompositionImpl Tests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fRunTests == 4
result.fStop == false
size(result.fFailures[]) == 1
this.fTests[result.fRunTests-1] has only one value
this.fTests[orig(result.fRunTests)] has only one value
result.fFailures[] elements == result.fFailures[orig(result.fRunTests)]
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
size(result.fErrors[]) == size(result.fListeners[])-1
this.fName has only one value
this.fName.toString == "EigenDecompositionImpl Tests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
result has only one value
result.fFailures has only one value
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(this.fTests[]) == 4
size(result.fFailures[]) one of { 0, 1 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[result.fRunTests-1]
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
this.fTests[result.fRunTests-1] == this.fTests[orig(result.fRunTests)]
this.fTests[result.fRunTests-1] == orig(this.fTests[result.fRunTests])
this.fName has only one value
this.fName.toString == "EigenDecompositionImpl Tests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
result.fFailures has only one value
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(this.fTests[]) == 4
size(result.fFailures[]) one of { 0, 1 }
size(result.fListeners[]) == 1
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fRunTests - orig(result.fRunTests) - 1 == 0
===========================================================================
junit.framework.TestSuite.setName(java.lang.String):::ENTER
this.fName has only one value
this.fName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
name has only one value
name.toString == "EigenDecompositionImpl Tests"
size(this.fTests[]) == 4
===========================================================================
junit.framework.TestSuite.setName(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
name.toString == orig(name.toString)
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
name.toString == "EigenDecompositionImpl Tests"
size(this.fTests[]) == 4
===========================================================================
junit.framework.TestSuite.testAt(int):::ENTER
this.fName has only one value
this.fName != null
this.fName.toString == "EigenDecompositionImpl Tests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
index >= 0
size(this.fTests[]) == 4
index <= size(this.fTests[])-1
===========================================================================
junit.framework.TestSuite.testAt(int):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
return == this.fTests[orig(index)]
this.fName has only one value
this.fName != null
this.fName.toString == "EigenDecompositionImpl Tests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
return != null
return.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
size(this.fTests[]) == 4
return in this.fTests[]
return.getClass().getName() in this.fTests[].getClass().getName()
orig(index) <= size(this.fTests[])-1
===========================================================================
junit.framework.TestSuite.testCount():::ENTER
this.fName has only one value
this.fName.toString == "EigenDecompositionImpl Tests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
size(this.fTests[]) == 4
===========================================================================
junit.framework.TestSuite.testCount():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
return == size(this.fTests[])
return == orig(size(this.fTests[]))
this.fName has only one value
this.fName.toString == "EigenDecompositionImpl Tests"
this.fTests[] contains no nulls and has only one value, of length 4
this.fTests[].getClass().getName() == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests, org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
return == 4
this.fTests[return-1] has only one value
===========================================================================
junit.runner.Version.id():::EXIT
return has only one value
return.toString == "4.13.2-Daikon"
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5:::OBJECT
this.val$out.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName()
this.val$out != null
this.val$out.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.(org.apache.commons.math.linear.AbstractRealMatrix, org.apache.commons.math.linear.RealMatrix):::ENTER
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == $hidden$2.getClass().getName()
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.(org.apache.commons.math.linear.AbstractRealMatrix, org.apache.commons.math.linear.RealMatrix):::EXIT
this.val$out == orig($hidden$2)
this.val$out.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
this.val$out.getClass().getName() == orig($hidden$2.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.visit(int, int, double):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.visit(int, int, double):::EXIT
this.val$out == orig(this.val$out)
this.val$out.getClass().getName() == orig(this.val$out.getClass().getName())
this.val$out.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix():::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::ENTER
rowDimension == columnDimension
rowDimension one of { 3, 6 }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.isSquare():::ENTER
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.isSquare():::EXIT
this.lu == orig(this.lu)
return == true
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.isSquare():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.setColumnVector(int, org.apache.commons.math.linear.RealVector):::ENTER
column one of { 0, 1, 2 }
vector.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.getClass().getName() != vector.getClass().getName()
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.setColumnVector(int, org.apache.commons.math.linear.RealVector):::EXIT
this.lu == orig(this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.transpose():::ENTER
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.transpose():::EXIT
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.getClass().getName())
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$5.class
this.getClass().getName() != visitor.getClass().getName()
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.lu == orig(this.lu)
return == 0.0
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.lu == null
size(this.data[]) one of { 3, 6 }
org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID < size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::ENTER
d.getClass().getName() == double[][].class
size(d[]) one of { 3, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::EXIT
this.data.getClass().getName() == orig(d.getClass().getName())
d[] == orig(d[])
size(this.data[]) == orig(size(d[]))
org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID < size(d[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::ENTER
d.getClass().getName() == double[][].class
copyArray == false
size(d[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::EXIT
this.data == orig(d)
this.data.getClass().getName() == orig(d.getClass().getName())
this.data[] == d[]
d[] == orig(d[])
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::ENTER
rowDimension == columnDimension
rowDimension one of { 3, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::EXIT
orig(rowDimension) == size(this.data[])
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.addToEntry(int, int, double):::ENTER
row == size(this.data[])-1
column == size(this.data[])-1
increment one of { -0.552786404500042, 0.2928932188134525, 0.757464374963667 }
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.addToEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
orig(row) == orig(column)
orig(row) == size(this.data[])-1
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::ENTER
this.data == null
in.getClass().getName() == double[][].class
size(in[]) one of { 3, 6 }
org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID < size(in[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::EXIT
this.data.getClass().getName() == orig(in.getClass().getName())
this.lu == orig(this.lu)
in[] == orig(in[])
size(this.data[]) == orig(size(in[]))
org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID < size(in[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyOut():::ENTER
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyOut():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == return.getClass().getName()
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.data.getClass().getName())
size(this.data[]) == size(return[])
size(return[]) == orig(size(this.data[]))
return.getClass().getName() == double[][].class
size(return[]) == 3
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.createMatrix(int, int):::ENTER
rowDimension == size(this.data[])
columnDimension == size(this.data[])
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.createMatrix(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
orig(rowDimension) == orig(columnDimension)
orig(rowDimension) == size(this.data[])
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
orig(rowDimension) one of { 3, 6 }
this.data.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return == size(this.data[])
return == orig(size(this.data[]))
this.data != null
return one of { 3, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getData():::ENTER
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getData():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == return.getClass().getName()
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.data.getClass().getName())
size(this.data[]) == size(return[])
size(return[]) == orig(size(this.data[]))
return.getClass().getName() == double[][].class
size(return[]) == 3
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int):::ENTER
this.data != null
row one of { 0, 1, 2 }
column one of { 0, 1, 2 }
size(this.data[]) == 3
org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID < row
org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID < column
row <= size(this.data[])-1
column <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
size(this.data[]) == 3
orig(row) <= size(this.data[])-1
orig(column) <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return == size(this.data[])
return == orig(size(this.data[]))
this.data != null
return one of { 3, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
this.data.getClass().getName() == m.data.getClass().getName()
this.lu == m.lu
size(this.data[]) == size(m.data[])
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == m.data.getClass().getName()
this.data.getClass().getName() == return.data.getClass().getName()
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data.getClass().getName() == orig(m.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == m.lu
this.lu == return.lu
this.lu == orig(this.lu)
this.lu == orig(m.lu)
m.data == orig(m.data)
m.data[] == orig(m.data[])
size(this.data[]) == size(m.data[])
size(this.data[]) == size(return.data[])
size(this.data[]) == orig(size(m.data[]))
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.data[]) == 6
this.data.getClass().getName() != m.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT254
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(m.getClass().getName())
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.data[]) == 6
this.data.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.operate(double[]):::ENTER
size(this.data[]) == size(v[])
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.operate(double[]):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
v[] == orig(v[])
size(this.data[]) == size(return[])
size(return[]) == orig(size(this.data[]))
size(return[]) == orig(size(v[]))
size(return[]) == 3
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::ENTER
this.data != null
row >= 0
column >= 0
org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID < row
org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID < column
row <= size(this.data[])-1
column <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
orig(row) <= size(this.data[])-1
orig(column) <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::ENTER
row == column
this.data == null
subMatrix.getClass().getName() == double[][].class
row == 0
size(subMatrix[]) one of { 3, 6 }
org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID < size(subMatrix[])-1
row < size(subMatrix[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::EXIT
this.data.getClass().getName() == orig(subMatrix.getClass().getName())
this.lu == orig(this.lu)
subMatrix[] == orig(subMatrix[])
size(this.data[]) == orig(size(subMatrix[]))
org.apache.commons.math.linear.Array2DRowRealMatrix.serialVersionUID < size(subMatrix[])-1
orig(row) < size(subMatrix[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$5.class
this.data.getClass().getName() != visitor.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return == 0.0
this.data.getClass().getName() != orig(visitor.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::CLASS
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString < org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString > org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString > org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString > org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString > org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString > org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::OBJECT
this.data != null
size(this.data[]) one of { 3, 7 }
org.apache.commons.math.linear.ArrayRealVector.serialVersionUID < size(this.data[])-1
org.apache.commons.math.linear.RealVectorFormat.serialVersionUID < size(this.data[])-1
org.apache.commons.math.util.CompositeFormat.serialVersionUID > size(this.data[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::ENTER
size(d[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::EXIT
this.data[] == d[]
d[] == orig(d[])
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::ENTER
d != null
copyArray == false
size(d[]) one of { 3, 7 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::EXIT
this.data == orig(d)
this.data[] == d[]
d[] == orig(d[])
org.apache.commons.math.linear.ArrayRealVector.serialVersionUID < size(d[])-1
org.apache.commons.math.linear.RealVectorFormat.serialVersionUID < size(d[])-1
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, boolean):::ENTER
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString
v has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
v.data has only one value
v.data[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
deep == true
size(v.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, boolean):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data[] == v.data[]
this.data[] == orig(v.data[])
v.data == orig(v.data)
this.data[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
v.data has only one value
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::ENTER
n == size(this.data[])
this has only one value
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
orig(n) == size(this.data[])
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
orig(n) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.copy():::ENTER
this has only one value
this.data has only one value
this.data[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.copy():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data has only one value
this.data[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[]):::ENTER
this has only one value
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v has only one value
v[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
size(this.data[]) == 7
this.data[] == v[] (elementwise)
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
return == 1.0
size(this.data[]) == 7
this.data[] == v[] (elementwise)
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.ArrayRealVector):::ENTER
this has only one value
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v has only one value
v.data has only one value
v.data[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
size(this.data[]) == 7
this.data[] == v.data[] (elementwise)
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v.data == orig(v.data)
v.data[] == orig(v.data[])
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v.data has only one value
v.data[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
return == 1.0
size(this.data[]) == 7
this.data[] == v.data[] (elementwise)
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT870
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
return == 1.0
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDimension():::ENTER
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDimension():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return == size(this.data[])
return == orig(size(this.data[]))
return == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getEntry(int):::ENTER
index one of { 0, 1, 2 }
size(this.data[]) == 3
org.apache.commons.math.linear.ArrayRealVector.serialVersionUID < index
org.apache.commons.math.linear.RealVectorFormat.serialVersionUID < index
org.apache.commons.math.util.CompositeFormat.serialVersionUID > index
index <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getEntry(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
size(this.data[]) == 3
return in this.data[]
orig(index) <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getNorm():::ENTER
this has only one value
this.data has only one value
this.data[] == [9.686128288333151E-9, 1.7728623014079403E-9, 1.601538901496724E-9, 2.3375747726372964E-9, 1.0405018860404347E-10, 4.677795897487479E-12, -4.08041215562132E-14]
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getNorm():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data has only one value
this.data[] == [9.686128288333151E-9, 1.7728623014079403E-9, 1.601538901496724E-9, 2.3375747726372964E-9, 1.0405018860404347E-10, 4.677795897487479E-12, -4.08041215562132E-14]
return == 1.0247153407345222E-8
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(double[]):::ENTER
this has only one value
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v has only one value
v[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
size(this.data[]) == 7
this.data[] == v[] (elementwise)
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 7
this.data[] == v[] (elementwise)
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.ArrayRealVector):::ENTER
this has only one value
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v has only one value
v.data has only one value
v.data[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
size(this.data[]) == 7
this.data[] == v.data[] (elementwise)
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v.data == orig(v.data)
v.data[] == orig(v.data[])
size(this.data[]) == size(return.data[])
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v.data has only one value
v.data[] == [-0.2703563517130323, 0.8528110895541346, 0.3996394891005381, 0.19879465547641523, 0.01973932320361581, 1.0698301764920411E-4, -1.2166362801958785E-6]
return has only one value
return.data has only one value
return.data[] == [9.686128288333151E-9, 1.7728623014079403E-9, 1.601538901496724E-9, 2.3375747726372964E-9, 1.0405018860404347E-10, 4.677795897487479E-12, -4.08041215562132E-14]
size(this.data[]) == 7
this.data[] == v.data[] (elementwise)
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT269
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return.getClass().getName() == orig(v.getClass().getName())
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor:::OBJECT
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.DefaultRealMatrixPreservingVisitor():::EXIT
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.end():::ENTER
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.end():::EXIT
return == 0.0
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::ENTER
rows == columns
startRow == startColumn
endRow == endColumn
rows one of { 3, 6 }
startRow == 0
endRow one of { 2, 5 }
rows > startRow
rows > endRow
startRow < endRow
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl:::CLASS
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl:::OBJECT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.g
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.g
this.splitTolerance == this.g
this.main == this.transformer.main
this.secondary == this.transformer.secondary
this.transformer.cachedQ.getClass().getName() == this.transformer.cachedQt.getClass().getName()
this.transformer.cachedQ.getClass().getName() == this.cachedV.getClass().getName()
this.transformer.cachedT == this.cachedD
this.minPivot == this.g
this.sigmaLow == this.g
this.cachedD == this.cachedVt
size(this.main[]) == size(this.realEigenvalues[])
size(this.main[]) == size(this.eigenvectors[])
size(this.main[])-1 == size(this.secondary[])
size(this.secondary[]) == size(this.squaredSecondary[])
size(this.transformer.householderVectors[]) == size(this.transformer.main[])
size(this.transformer.householderVectors[]) == size(this.realEigenvalues[])
size(this.transformer.householderVectors[]) == size(this.eigenvectors[])
size(this.transformer.householderVectors[])-1 == size(this.transformer.secondary[])
size(this.transformer.main[])-1 == size(this.transformer.secondary[])
size(this.realEigenvalues[]) == size(this.imagEigenvalues[])
size(this.realEigenvalues[]) == size(this.eigenvectors[])
this.transformer.householderVectors[this.pingPong] == this.transformer.householderVectors[this.tType]
this.splitTolerance == 2.2250738585072014E-308
this.main[] elements >= -1.0
this.squaredSecondary[] elements >= 0.0
this.transformer.householderVectors != null
this.transformer.householderVectors.getClass().getName() == double[][].class
this.transformer.householderVectors[] elements != null
this.transformer.main != null
this.transformer.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.transformer.secondary != null
this.transformer.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.transformer.secondary[] sorted by <
this.transformer.cachedQ.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.transformer.cachedT == null
this.upperSpectra >= 0.0
this.sigma >= 0.0
this.sigmaLow == -7.828153079745407E-13
this.tau >= 0.0
this.pingPong one of { 0, 1 }
this.qMax one of { 0.0, 20464.940196239226 }
this.eMin >= 0.0
this.tType <= 0
this.dMin2 >= 0.0
this.dN2 >= 0.0
this.g == 0.0
this.imagEigenvalues[] elements == 0.0
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector[].class
this.eigenvectors[].data elements != null
this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedD == null
size(this.main[]) one of { 3, 7 }
size(this.transformer.householderVectors[]) == 3
size(this.work[]) one of { 18, 42 }
size(this.realEigenvalues[]) one of { 3, 7 }
size(this.eigenvectors[]) one of { 3, 7 }
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.lowerSpectra == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE >= this.lowerSpectra
this.lowerSpectra % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.upperSpectra == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.upperSpectra
this.upperSpectra % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.minPivot == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.minPivot**2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE >= this.minPivot
this.minPivot % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.sigma
this.sigma % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
this.tau % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.qMax
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.eMin
this.eMin % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
this.dMin % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
this.dMin1 % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dMin2
this.dMin2 % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
this.dN % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
this.dN1 % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dN2
this.dN2 % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.imagEigenvalues[]
this.imagEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.lowerSpectra == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 >= this.lowerSpectra
this.lowerSpectra % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.upperSpectra == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.upperSpectra
this.upperSpectra % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.minPivot == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.minPivot**2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 >= this.minPivot
this.minPivot % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.sigma
this.sigma % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.tau
this.tau % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.qMax
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.eMin
this.eMin % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
this.dMin % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
this.dMin1 % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin2
this.dMin2 % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
this.dN % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
this.dN1 % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dN2
this.dN2 % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.imagEigenvalues[]
this.imagEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements >= this.splitTolerance
this.splitTolerance >= this.lowerSpectra
this.splitTolerance <= this.upperSpectra
this.minPivot == this.splitTolerance**2
this.splitTolerance <= this.minPivot
this.splitTolerance == this.minPivot**2
this.splitTolerance <= this.sigma
this.splitTolerance <= this.tau
this.splitTolerance <= this.qMax
this.splitTolerance <= this.eMin
this.splitTolerance <= this.dMin2
this.splitTolerance <= this.dN2
this.imagEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.imagEigenvalues[]
this.main[] > this.secondary[] (lexically)
this.main[] >= this.secondary[] (lexically)
this.main[] < this.squaredSecondary[] (lexically)
this.main[] <= this.squaredSecondary[] (lexically)
this.main[] == this.transformer.main[] (elementwise)
this.main[] > this.transformer.secondary[] (lexically)
this.main[] >= this.transformer.secondary[] (lexically)
this.main[] > this.imagEigenvalues[] (lexically)
this.main[] >= this.imagEigenvalues[] (lexically)
this.secondary[] < this.squaredSecondary[] (lexically)
this.secondary[] <= this.squaredSecondary[] (elementwise)
this.squaredSecondary[] == this.secondary[]**2 (elementwise)
this.secondary[] < this.transformer.main[] (lexically)
this.secondary[] <= this.transformer.main[] (lexically)
this.secondary[] == this.transformer.secondary[] (elementwise)
this.secondary[] < this.realEigenvalues[] (lexically)
this.secondary[] <= this.realEigenvalues[] (lexically)
this.secondary[] < this.imagEigenvalues[] (lexically)
this.secondary[] <= this.imagEigenvalues[] (lexically)
this.squaredSecondary[] > this.transformer.main[] (lexically)
this.squaredSecondary[] >= this.transformer.main[] (lexically)
this.squaredSecondary[] == this.transformer.secondary[]**2 (elementwise)
this.squaredSecondary[] > this.transformer.secondary[] (lexically)
this.squaredSecondary[] >= this.transformer.secondary[] (elementwise)
this.squaredSecondary[] elements >= this.lowerSpectra
this.squaredSecondary[] elements >= this.minPivot
this.squaredSecondary[] elements >= this.sigmaLow
this.squaredSecondary[] > this.work[] (lexically)
this.squaredSecondary[] >= this.work[] (lexically)
this.squaredSecondary[] elements >= this.g
this.squaredSecondary[] > this.imagEigenvalues[] (lexically)
this.squaredSecondary[] >= this.imagEigenvalues[] (lexically)
this.transformer.householderVectors.getClass().getName() != this.transformer.cachedQ.getClass().getName()
this.transformer.householderVectors.getClass().getName() != this.eigenvectors.getClass().getName()
this.transformer.householderVectors.getClass().getName() != this.cachedV.getClass().getName()
this.transformer.main[] > this.transformer.secondary[] (lexically)
this.transformer.main[] >= this.transformer.secondary[] (lexically)
this.transformer.main[] > this.work[] (lexically)
this.transformer.main[] >= this.work[] (lexically)
this.transformer.secondary[] < this.realEigenvalues[] (lexically)
this.transformer.secondary[] <= this.realEigenvalues[] (lexically)
this.transformer.cachedQ.getClass().getName() != this.eigenvectors.getClass().getName()
this.lowerSpectra <= this.upperSpectra
this.lowerSpectra <= this.minPivot
this.lowerSpectra <= this.sigma
this.lowerSpectra <= this.sigmaLow
this.lowerSpectra <= this.tau
this.lowerSpectra <= this.qMax
this.lowerSpectra <= this.eMin
this.lowerSpectra <= this.dMin
this.lowerSpectra <= this.dMin1
this.lowerSpectra <= this.dMin2
this.lowerSpectra <= this.dN
this.lowerSpectra <= this.dN1
this.lowerSpectra <= this.dN2
this.lowerSpectra <= this.g
this.realEigenvalues[] elements > this.lowerSpectra
this.upperSpectra >= this.minPivot
this.upperSpectra >= this.sigma
this.upperSpectra >= this.sigmaLow
this.upperSpectra >= this.tau
this.upperSpectra >= this.qMax
this.upperSpectra >= this.eMin
this.upperSpectra >= this.dMin
this.upperSpectra >= this.dMin1
this.upperSpectra >= this.dMin2
this.upperSpectra >= this.dN
this.upperSpectra >= this.dN1
this.upperSpectra >= this.dN2
this.upperSpectra >= this.g
this.realEigenvalues[] elements < this.upperSpectra
this.minPivot <= this.sigma
this.sigmaLow == this.minPivot**2
this.minPivot <= this.tau
this.minPivot <= this.qMax
this.minPivot <= this.eMin
this.minPivot <= this.dMin2
this.minPivot <= this.dN2
this.g == this.minPivot**2
this.minPivot == this.g**2
this.imagEigenvalues[] elements == this.minPivot
this.minPivot in this.imagEigenvalues[]
this.sigma >= this.sigmaLow
this.sigma <= this.qMax
this.sigma >= this.g
this.sigmaLow <= this.tau
this.sigmaLow <= this.qMax
this.sigmaLow <= this.eMin
this.sigmaLow <= this.dMin2
this.sigmaLow <= this.dN2
this.imagEigenvalues[] elements == this.sigmaLow
this.sigmaLow in this.imagEigenvalues[]
this.tau <= this.qMax
this.tau <= this.eMin
this.tau >= this.g
this.pingPong >= this.tType
this.pingPong < size(this.secondary[])-1
this.pingPong < size(this.transformer.secondary[])-1
this.pingPong < size(this.work[])-1
this.pingPong < size(this.realEigenvalues[])-1
this.pingPong < size(this.eigenvectors[])-1
this.qMax >= this.eMin
this.qMax >= this.dMin
this.qMax >= this.dMin1
this.qMax >= this.dMin2
this.qMax >= this.dN
this.qMax >= this.dN1
this.qMax >= this.dN2
this.qMax >= this.g
this.eMin >= this.dMin
this.eMin >= this.g
this.tType < size(this.secondary[])-1
this.tType % size(this.transformer.householderVectors[]) == 0
this.tType % size(this.transformer.secondary[]) == 0
this.tType < size(this.transformer.secondary[])-1
this.tType < size(this.work[])-1
this.tType < size(this.realEigenvalues[])-1
this.tType < size(this.eigenvectors[])-1
this.dMin <= this.dMin1
this.dMin <= this.dMin2
this.dMin <= this.dN
this.dMin <= this.dN1
this.dMin <= this.dN2
this.dMin1 <= this.dMin2
this.dMin1 <= this.dN1
this.dMin1 <= this.dN2
this.dMin2 <= this.dN2
this.dMin2 >= this.g
this.dN2 >= this.g
this.g in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.g
this.realEigenvalues[] >= this.imagEigenvalues[] (lexically)
this.eigenvectors.getClass().getName() != this.cachedV.getClass().getName()
size(this.main[]) < size(this.work[])-1
size(this.transformer.householderVectors[]) < size(this.work[])-1
size(this.work[])-1 > size(this.realEigenvalues[])
size(this.work[])-1 > size(this.eigenvectors[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(double[], double[], double):::ENTER
size(main[])-1 == size(secondary[])
main has only one value
main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
secondary has only one value
secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
splitTolerance == 2.2250738585072014E-308
size(main[]) == 7
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(double[], double[], double):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.splitTolerance == orig(splitTolerance)
this.main[] == main[]
this.secondary[] == secondary[]
this.minPivot == this.dMin
this.sigmaLow == this.dMin
this.tau == this.dMin
this.eMin == this.dMin1
this.dMin == this.dN
this.dMin == this.g
this.dMin1 == this.dN1
this.dMin2 == this.dN2
main[] == orig(main[])
secondary[] == orig(secondary[])
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == size(main[])-1
size(this.secondary[]) == orig(size(main[]))-1
this.main has only one value
this.secondary has only one value
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 12969.296828772238
this.tau == 1.418780186650953E-20
this.work has only one value
this.work[] == [20789.54123048877, 7820.24440171653, 3.183169331076479E-4, 3.786867141004985E-5, 13899.634550344692, 930.3377215724533, 7.091254901045897E-14, 1.0814279227325111E-36, 12969.296828772238, 0.0, 930.3345969689944, 930.3377645544963, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.qMax == 20464.940196239226
this.eMin == 930.3377645544963
this.tType == -2
this.dMin == 0.0
this.dMin1 == 930.3377266858249
this.dMin2 == 7820.244040417554
this.dN == -3.009265538105056E-36
this.realEigenvalues has only one value
this.realEigenvalues[] == [20654.74511575945, 20654.74511575945, 20654.74511575945, 20654.74511575945, 7685.448286987214, 6755.11056541476, -134.7961147293172]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors == null
this.cachedV == null
main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
size(this.main[]) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.sigma in this.work[]
this.sigmaLow in this.work[]
this.tau in this.work[]
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
this.eMin in this.work[]
this.dMin in this.work[]
this.dMin1 in this.work[]
this.dMin2 in this.work[]
this.dN in this.work[]
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(org.apache.commons.math.linear.RealMatrix, double):::ENTER
matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
splitTolerance == 2.2250738585072014E-308
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(org.apache.commons.math.linear.RealMatrix, double):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(splitTolerance)
this.main[] == this.transformer.main[]
this.secondary[] == this.transformer.secondary[]
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQt == this.cachedV
this.transformer.cachedT == this.cachedV
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.transformer.householderVectors[])-1
size(this.secondary[]) == size(this.transformer.main[])-1
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.squaredSecondary[] one of { [2.0000000000000004, 6.004365899753108E-32], [17.0, 5.53633217993079], [20.000000000000004, 0.0] }
this.lowerSpectra one of { -1.4721359549995796, -1.4142135623730951, -1.1231056256176606 }
this.upperSpectra one of { 2.414213562373095, 8.47213595499958, 16.064282096205893 }
this.minPivot one of { 4.450147717014404E-308, 3.782625559462242E-307, 4.4501477170144036E-307 }
this.sigma == 0.0
this.work[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4721359549995796, -0.47213595499958005, -1.0, 7.47213595499958, 8.47213595499958, -1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4142135623730951, -0.4142135623730959, 0.9999999999999997, 1.4142135623730951, 2.414213562373095, 1.0000000000000002], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1231056256176606, 3.112188492029399, -0.9411764705882344, 7.123105625617661, 16.064282096205893, 3.7647058823529393] }
this.pingPong == 0
this.realEigenvalues[] one of { [2.0, 1.0, -1.0000000000000004], [8.0, -1.0, -1.0000000000000007], [12.0, 1.9999999999999996, 1.7763568394002505E-15] }
this.imagEigenvalues[] == [0.0, 0.0, 0.0]
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 3
size(this.work[]) == 18
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.sigma in this.work[]
this.imagEigenvalues[] elements == this.sigma
this.sigma in this.imagEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles():::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.lowerSpectra
this.splitTolerance == this.lowerSpectra
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.lowerSpectra == this.upperSpectra
this.lowerSpectra == this.minPivot
this.lowerSpectra == this.sigma
this.lowerSpectra == this.sigmaLow
this.lowerSpectra == this.tau
this.lowerSpectra == this.qMax
this.lowerSpectra == this.eMin
this.lowerSpectra == this.dMin
this.lowerSpectra == this.dMin1
this.lowerSpectra == this.dMin2
this.lowerSpectra == this.dN
this.lowerSpectra == this.dN1
this.lowerSpectra == this.dN2
this.lowerSpectra == this.g
this.pingPong == this.tType
this.realEigenvalues == this.imagEigenvalues
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.transformer.cachedQ == null
this.lowerSpectra == 0.0
this.work[] elements == 0.0
this.work[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.pingPong == 0
this.realEigenvalues == null
this.eigenvectors == null
this.cachedV == null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
this.work[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.work[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.work[] elements == this.splitTolerance
this.lowerSpectra in this.work[]
this.work[] elements == this.lowerSpectra
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles():::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ == orig(this.transformer.cachedQt)
this.transformer.cachedQ == orig(this.transformer.cachedT)
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.sigma == orig(this.lowerSpectra)
this.sigma == orig(this.upperSpectra)
this.sigma == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.tau)
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.sigma == orig(this.g)
this.work == orig(this.work)
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.realEigenvalues == this.imagEigenvalues
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.transformer.householderVectors[]) == orig(size(this.transformer.main[]))
size(this.transformer.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.transformer.secondary[]) == orig(size(this.transformer.main[]))-1
size(this.work[]) == orig(size(this.work[]))
this.transformer.cachedQ == null
this.sigma == 0.0
this.pingPong == 0
this.realEigenvalues == null
this.eigenvectors == null
this.cachedV == null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
orig(this.work[]) elements == this.splitTolerance
this.splitTolerance in orig(this.work[])
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
orig(this.work[]) elements == this.minPivot
this.minPivot in orig(this.work[])
this.sigma in this.work[]
orig(this.work[]) elements == this.sigma
this.sigma in orig(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement(int, int, int):::ENTER
this.dMin2 == this.dN2
this.realEigenvalues[] == this.imagEigenvalues[]
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
start == deflated
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.work has only one value
this.qMax == 20464.940196239226
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
start == 0
end == 3
size(this.main[]) == 7
size(this.work[]) == 42
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.main[] elements > this.splitTolerance
this.squaredSecondary[] elements > this.splitTolerance
this.sigma % this.splitTolerance == 0
this.splitTolerance % this.sigma == 0
this.splitTolerance % this.tau == 0
this.tau % this.splitTolerance == 0
this.splitTolerance in this.work[]
this.eMin % this.splitTolerance == 0
this.splitTolerance % this.eMin == 0
this.splitTolerance < this.eMin
this.dMin % this.splitTolerance == 0
this.splitTolerance % this.dMin == 0
this.splitTolerance < this.dMin
this.dMin1 % this.splitTolerance == 0
this.splitTolerance % this.dMin1 == 0
this.splitTolerance < this.dMin1
this.dMin2 % this.splitTolerance == 0
this.splitTolerance % this.dMin2 == 0
this.splitTolerance < this.dMin2
this.dN % this.splitTolerance == 0
this.splitTolerance % this.dN == 0
this.splitTolerance < this.dN
this.dN1 % this.splitTolerance == 0
this.splitTolerance % this.dN1 == 0
this.splitTolerance < this.dN1
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] elements > this.minPivot
this.main[] elements > this.sigmaLow
this.main[] elements < this.qMax
this.main[] elements > this.g
this.main[] > this.realEigenvalues[] (elementwise)
this.secondary[] < this.squaredSecondary[] (elementwise)
this.secondary[] elements < this.upperSpectra
this.secondary[] < this.work[] (lexically)
this.secondary[] <= this.work[] (lexically)
this.secondary[] elements < this.qMax
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements > this.minPivot
this.squaredSecondary[] elements > this.sigmaLow
this.squaredSecondary[] elements > this.g
this.lowerSpectra < this.sigma
this.lowerSpectra < this.tau
this.lowerSpectra in this.work[]
this.work[] elements >= this.lowerSpectra
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.lowerSpectra < this.dN
this.lowerSpectra < this.dN1
this.upperSpectra > this.sigma
this.upperSpectra > this.tau
this.upperSpectra in this.work[]
this.work[] elements <= this.upperSpectra
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.upperSpectra > this.dN
this.upperSpectra > this.dN1
this.minPivot % this.sigma == 0
this.sigma % this.minPivot == 0
this.minPivot % this.tau == 0
this.tau % this.minPivot == 0
this.minPivot in this.work[]
this.eMin % this.minPivot == 0
this.minPivot % this.eMin == 0
this.minPivot < this.eMin
this.dMin % this.minPivot == 0
this.minPivot % this.dMin == 0
this.minPivot < this.dMin
this.dMin1 % this.minPivot == 0
this.minPivot % this.dMin1 == 0
this.minPivot < this.dMin1
this.dMin2 % this.minPivot == 0
this.minPivot % this.dMin2 == 0
this.minPivot < this.dMin2
this.dN % this.minPivot == 0
this.minPivot % this.dN == 0
this.minPivot < this.dN
this.dN1 % this.minPivot == 0
this.minPivot % this.dN1 == 0
this.minPivot < this.dN1
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma >= this.tau
this.sigma < this.qMax
this.sigma != this.eMin
this.sigma != this.dMin
this.sigma != this.dMin1
this.sigma != this.dMin2
this.sigma != this.dN
this.sigma != this.dN1
this.sigmaLow in this.work[]
this.sigmaLow % this.eMin == 0
this.sigmaLow < this.eMin
this.sigmaLow % this.dMin == 0
this.sigmaLow < this.dMin
this.sigmaLow % this.dMin1 == 0
this.sigmaLow < this.dMin1
this.sigmaLow % this.dMin2 == 0
this.sigmaLow < this.dMin2
this.sigmaLow % this.dN == 0
this.sigmaLow < this.dN
this.sigmaLow % this.dN1 == 0
this.sigmaLow < this.dN1
this.realEigenvalues[] elements == this.sigmaLow
this.sigmaLow in this.realEigenvalues[]
this.tau < this.qMax
this.tau < this.eMin
this.tau != this.dMin
this.tau != this.dMin1
this.tau != this.dMin2
this.tau != this.dN
this.tau != this.dN1
this.eMin in this.work[]
this.dN in this.work[]
this.g in this.work[]
this.work[] > this.realEigenvalues[] (lexically)
this.work[] >= this.realEigenvalues[] (lexically)
this.pingPong >= start
this.pingPong < end
this.qMax > this.eMin
this.qMax > this.dMin
this.qMax > this.dMin1
this.qMax > this.dMin2
this.qMax > this.dN
this.qMax > this.dN1
this.eMin > this.dMin
this.eMin >= this.dMin1
this.eMin != this.dMin2
this.eMin != this.dN
this.eMin >= this.dN1
this.eMin > this.g
this.tType <= start
this.tType < end
this.dMin >= this.g
this.dMin1 != this.dN
this.dMin1 > this.g
this.dMin2 != this.dN
this.dMin2 != this.dN1
this.dMin2 > this.g
this.dN != this.dN1
this.dN >= this.g
this.dN1 > this.g
this.g in this.realEigenvalues[]
this.realEigenvalues[] elements == this.g
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement(int, int, int):::EXIT1673
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement(int, int, int):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == this.dN2
this.dMin2 == orig(this.dMin2)
this.dMin2 == orig(this.dN2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.work has only one value
this.qMax == 20464.940196239226
this.tType one of { -5, -4, -2 }
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.main[] elements > this.splitTolerance
this.squaredSecondary[] elements > this.splitTolerance
this.sigma % this.splitTolerance == 0
this.splitTolerance % this.sigma == 0
this.splitTolerance % this.tau == 0
this.splitTolerance < this.tau
this.tau % this.splitTolerance == 0
this.splitTolerance in this.work[]
this.eMin % this.splitTolerance == 0
this.splitTolerance % this.eMin == 0
this.splitTolerance < this.eMin
this.dMin % this.splitTolerance == 0
this.splitTolerance % this.dMin == 0
this.splitTolerance < this.dMin
this.dMin1 % this.splitTolerance == 0
this.splitTolerance % this.dMin1 == 0
this.splitTolerance < this.dMin1
this.dMin2 % this.splitTolerance == 0
this.splitTolerance % this.dMin2 == 0
this.splitTolerance < this.dMin2
this.dN % this.splitTolerance == 0
this.splitTolerance % this.dN == 0
this.splitTolerance < this.dN
this.dN1 % this.splitTolerance == 0
this.splitTolerance % this.dN1 == 0
this.splitTolerance < this.dN1
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
orig(this.tau) % this.splitTolerance == 0
this.splitTolerance % orig(this.tau) == 0
this.splitTolerance <= orig(this.tau)
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] elements > this.minPivot
this.main[] elements > this.sigmaLow
this.main[] elements < this.qMax
this.main[] elements > this.g
this.main[] > this.realEigenvalues[] (elementwise)
this.secondary[] < this.squaredSecondary[] (elementwise)
this.secondary[] elements < this.upperSpectra
this.secondary[] < this.work[] (lexically)
this.secondary[] <= this.work[] (lexically)
this.secondary[] elements < this.qMax
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements > this.minPivot
this.squaredSecondary[] elements > this.sigmaLow
this.squaredSecondary[] elements > this.g
this.lowerSpectra < this.sigma
this.lowerSpectra < this.tau
this.lowerSpectra in this.work[]
this.work[] elements >= this.lowerSpectra
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.lowerSpectra < this.dN
this.lowerSpectra < this.dN1
this.lowerSpectra < orig(this.tau)
this.upperSpectra > this.sigma
this.upperSpectra > this.tau
this.upperSpectra in this.work[]
this.work[] elements <= this.upperSpectra
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.upperSpectra > this.dN
this.upperSpectra > this.dN1
this.upperSpectra > orig(this.tau)
this.minPivot % this.sigma == 0
this.sigma % this.minPivot == 0
this.minPivot % this.tau == 0
this.minPivot < this.tau
this.tau % this.minPivot == 0
this.minPivot in this.work[]
this.eMin % this.minPivot == 0
this.minPivot % this.eMin == 0
this.minPivot < this.eMin
this.dMin % this.minPivot == 0
this.minPivot % this.dMin == 0
this.minPivot < this.dMin
this.dMin1 % this.minPivot == 0
this.minPivot % this.dMin1 == 0
this.minPivot < this.dMin1
this.dMin2 % this.minPivot == 0
this.minPivot % this.dMin2 == 0
this.minPivot < this.dMin2
this.dN % this.minPivot == 0
this.minPivot % this.dN == 0
this.minPivot < this.dN
this.dN1 % this.minPivot == 0
this.minPivot % this.dN1 == 0
this.minPivot < this.dN1
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
orig(this.tau) % this.minPivot == 0
this.minPivot % orig(this.tau) == 0
this.minPivot <= orig(this.tau)
this.sigma != this.tau
this.sigma < this.qMax
this.sigma != this.eMin
this.sigma != this.dMin
this.sigma != this.dMin1
this.sigma != this.dMin2
this.sigma != this.dN
this.sigma != this.dN1
this.sigma >= orig(this.tau)
this.sigmaLow % this.tau == 0
this.sigmaLow < this.tau
this.sigmaLow in this.work[]
this.sigmaLow % this.eMin == 0
this.sigmaLow < this.eMin
this.sigmaLow % this.dMin == 0
this.sigmaLow < this.dMin
this.sigmaLow % this.dMin1 == 0
this.sigmaLow < this.dMin1
this.sigmaLow % this.dMin2 == 0
this.sigmaLow < this.dMin2
this.sigmaLow % this.dN == 0
this.sigmaLow < this.dN
this.sigmaLow % this.dN1 == 0
this.sigmaLow < this.dN1
this.realEigenvalues[] elements == this.sigmaLow
this.sigmaLow in this.realEigenvalues[]
this.sigmaLow <= orig(this.tau)
this.tau < this.qMax
this.tau < this.eMin
this.tau <= this.dMin
this.tau < this.dMin1
this.tau < this.dMin2
this.tau <= this.dN
this.tau < this.dN1
this.tau != orig(this.tau)
this.eMin in this.work[]
this.dN in this.work[]
this.g in this.work[]
this.work[] > this.realEigenvalues[] (lexically)
this.work[] >= this.realEigenvalues[] (lexically)
this.pingPong > this.tType
this.pingPong >= orig(this.tType)
this.pingPong >= orig(start)
this.pingPong < orig(end)
this.qMax > this.eMin
this.qMax > this.dMin
this.qMax > this.dMin1
this.qMax > this.dMin2
this.qMax > this.dN
this.qMax > this.dN1
this.qMax > orig(this.tau)
this.eMin > this.dMin
this.eMin >= this.dMin1
this.eMin != this.dMin2
this.eMin != this.dN
this.eMin >= this.dN1
this.eMin > this.g
this.eMin > orig(this.tau)
this.tType < orig(start)
this.tType < orig(end)
this.dMin >= this.g
this.dMin != orig(this.tau)
this.dMin1 != this.dN
this.dMin1 > this.g
this.dMin1 != orig(this.tau)
this.dMin2 != this.dN
this.dMin2 != this.dN1
this.dMin2 > this.g
this.dMin2 != orig(this.tau)
this.dN != this.dN1
this.dN >= this.g
this.dN != orig(this.tau)
this.dN1 > this.g
this.dN1 != orig(this.tau)
this.g in this.realEigenvalues[]
this.realEigenvalues[] elements == this.g
this.g <= orig(this.tau)
orig(this.tType) < size(this.secondary[])-1
orig(this.tType) < size(this.work[])-1
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeSplits():::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.realEigenvalues == this.imagEigenvalues
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.transformer.cachedQ == null
this.sigma == 0.0
this.pingPong == 0
this.realEigenvalues == null
this.eigenvectors == null
this.cachedV == null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.sigma in this.work[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeSplits():::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ == orig(this.transformer.cachedQt)
this.transformer.cachedQ == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.tau)
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.sigma == orig(this.g)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.realEigenvalues == this.imagEigenvalues
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.transformer.householderVectors[]) == orig(size(this.transformer.main[]))
size(this.transformer.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.transformer.secondary[]) == orig(size(this.transformer.main[]))-1
this.transformer.cachedQ == null
this.sigma == 0.0
this.pingPong == 0
this.realEigenvalues == null
this.eigenvectors == null
this.cachedV == null
return[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 1, 2 }
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.sigma in this.work[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.countEigenValues(double, int, int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.pingPong == index
this.realEigenvalues[] == this.imagEigenvalues[]
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
n == size(this.main[])
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main != null
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary != null
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary != null
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.work has only one value
this.work != null
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues != null
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.imagEigenvalues != null
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != t
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % t == 0
t % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != t
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % t == 0
t % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
this.main[] elements > this.splitTolerance
this.squaredSecondary[] elements > this.splitTolerance
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
t % this.splitTolerance == 0
this.splitTolerance != t
this.splitTolerance % t == 0
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] elements > this.minPivot
this.main[] elements > this.sigma
this.main[] > this.realEigenvalues[] (elementwise)
this.secondary[] < this.squaredSecondary[] (elementwise)
this.secondary[] elements < this.upperSpectra
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements > this.minPivot
this.squaredSecondary[] elements > this.sigma
this.lowerSpectra in this.work[]
this.work[] elements >= this.lowerSpectra
this.lowerSpectra < t
this.upperSpectra in this.work[]
this.work[] elements <= this.upperSpectra
this.upperSpectra > t
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
t % this.minPivot == 0
this.minPivot != t
this.minPivot % t == 0
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.sigma != t
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.countEigenValues(double, int, int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.tau)
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.sigma == orig(this.g)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.pingPong == orig(index)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
orig(n) == size(this.main[])
orig(n) == size(this.realEigenvalues[])
orig(n) == size(this.imagEigenvalues[])
orig(n) == orig(size(this.realEigenvalues[]))
orig(n) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
this.main has only one value
this.main != null
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary != null
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary != null
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.work has only one value
this.work != null
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues != null
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.imagEigenvalues != null
this.eigenvectors == null
this.cachedV == null
return >= 0
orig(n) == 7
size(this.work[]) == 42
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.main[] elements > this.splitTolerance
this.squaredSecondary[] elements > this.splitTolerance
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
orig(t) % this.splitTolerance == 0
this.splitTolerance != orig(t)
this.splitTolerance % orig(t) == 0
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] elements > this.minPivot
this.main[] elements > this.sigma
this.main[] > this.realEigenvalues[] (elementwise)
this.secondary[] < this.squaredSecondary[] (elementwise)
this.secondary[] elements < this.upperSpectra
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements > this.minPivot
this.squaredSecondary[] elements > this.sigma
this.lowerSpectra in this.work[]
this.work[] elements >= this.lowerSpectra
this.lowerSpectra < orig(t)
this.upperSpectra in this.work[]
this.work[] elements <= this.upperSpectra
this.upperSpectra > orig(t)
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
orig(t) % this.minPivot == 0
this.minPivot != orig(t)
this.minPivot % orig(t) == 0
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.sigma != orig(t)
this.pingPong <= return
return <= orig(n)
return < size(this.work[])-1
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.decompose():::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.lowerSpectra
this.splitTolerance == this.lowerSpectra
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.lowerSpectra == this.upperSpectra
this.lowerSpectra == this.minPivot
this.lowerSpectra == this.sigma
this.lowerSpectra == this.sigmaLow
this.lowerSpectra == this.tau
this.lowerSpectra == this.qMax
this.lowerSpectra == this.eMin
this.lowerSpectra == this.dMin
this.lowerSpectra == this.dMin1
this.lowerSpectra == this.dMin2
this.lowerSpectra == this.dN
this.lowerSpectra == this.dN1
this.lowerSpectra == this.dN2
this.lowerSpectra == this.g
this.work == this.realEigenvalues
this.work == this.imagEigenvalues
this.pingPong == this.tType
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.transformer.cachedQ == null
this.lowerSpectra == 0.0
this.work == null
this.pingPong == 0
this.eigenvectors == null
this.cachedV == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.decompose():::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ == orig(this.transformer.cachedQt)
this.transformer.cachedQ == orig(this.transformer.cachedT)
this.minPivot == this.dMin
this.sigmaLow == this.dMin
this.tau == this.dMin
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.eMin == this.dMin1
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.lowerSpectra)
this.dMin == orig(this.upperSpectra)
this.dMin == orig(this.minPivot)
this.dMin == orig(this.sigma)
this.dMin == orig(this.sigmaLow)
this.dMin == orig(this.tau)
this.dMin == orig(this.qMax)
this.dMin == orig(this.eMin)
this.dMin == orig(this.dMin)
this.dMin == orig(this.dMin1)
this.dMin == orig(this.dMin2)
this.dMin == orig(this.dN)
this.dMin == orig(this.dN1)
this.dMin == orig(this.dN2)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin2 == this.dN2
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.transformer.householderVectors[]) == orig(size(this.transformer.main[]))
size(this.transformer.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.transformer.secondary[]) == orig(size(this.transformer.main[]))-1
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[post(this.tType)])
this.transformer.cachedQ == null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.eigenvectors == null
this.cachedV == null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.minPivot in this.work[]
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.sigma in this.work[]
this.sigmaLow in this.work[]
this.tau in this.work[]
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
this.eMin in this.work[]
this.dMin in this.work[]
this.dMin1 in this.work[]
this.dMin2 in this.work[]
this.dN in this.work[]
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.dqd(int, int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.dMin
this.sigma == this.dN
this.sigma == this.g
this.dMin1 == this.dN1
this.realEigenvalues[] == this.imagEigenvalues[]
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.work has only one value
this.work[] one of { [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 13284.629380233986, 114.74522470174949, 176.61767389159772, 20447.912719222124, 20292.285059456724, 20.99001412619831, 2.7152606300295816, 2625.0026504989196, 13902.22523539336, 11279.93784552447, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.qMax == 20464.940196239226
this.eMin one of { 0.0, 176.61767389159772 }
this.tType == 0
this.dMin1 one of { 0.0, 2622.2873898688904 }
this.dMin2 one of { 0.0, 13169.884155532236 }
this.dN2 one of { 0.0, 20271.295045330528 }
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
start one of { 0, 4 }
end one of { 3, 4, 7 }
size(this.main[]) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.eMin in this.work[]
this.dMin2 in this.work[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.dqd(int, int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.tau)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dN)
this.sigma == orig(this.g)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.tType == orig(this.tType)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.work[]) == orig(size(this.work[]))
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.work has only one value
this.work[] one of { [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 13284.629380233986, 114.74522470174949, 176.61767389159772, 20447.912719222124, 20292.285059456724, 20.99001412619831, 2.7152606300295816, 2625.0026504989196, 13902.22523539336, 11279.93784552447, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13461.247054125584, 13284.629380233986, 266.24399438891925, 176.61767389159772, 20028.756325697832, 20292.285059456724, 1.884698392532474, 2.7152606300295816, 13900.340537000828, 13902.22523539336, 20292.285059456724, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.qMax == 20464.940196239226
this.eMin one of { 0.0, 176.61767389159772, 20292.285059456724 }
this.tType == 0
this.dMin one of { 0.0, 13284.629380233986 }
this.dMin1 one of { 0.0, 2622.2873898688904, 13284.629380233986 }
this.dMin2 one of { 0.0, 13169.884155532236, 13284.629380233986 }
this.dN one of { 0.0, 13900.340537000828 }
this.dN1 one of { 0.0, 2622.2873898688904, 20026.041065067802 }
this.dN2 one of { 0.0, 13284.629380233986, 20271.295045330528 }
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.splitTolerance in orig(this.work[])
this.lowerSpectra in this.work[]
this.lowerSpectra in orig(this.work[])
this.upperSpectra in this.work[]
this.upperSpectra in orig(this.work[])
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.minPivot in orig(this.work[])
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.sigma in orig(this.work[])
this.eMin in this.work[]
this.dMin in this.work[]
this.dMin2 in this.work[]
this.dN in this.work[]
orig(this.eMin) in this.work[]
this.dMin in orig(this.work[])
this.dMin2 in orig(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.dqds(int, int):::ENTER
this.dMin2 == this.dN2
this.realEigenvalues[] == this.imagEigenvalues[]
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.work has only one value
this.qMax == 20464.940196239226
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
start == 0
end == 3
size(this.main[]) == 7
size(this.work[]) == 42
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.main[] elements > this.splitTolerance
this.squaredSecondary[] elements > this.splitTolerance
this.sigma % this.splitTolerance == 0
this.splitTolerance % this.sigma == 0
this.splitTolerance % this.tau == 0
this.splitTolerance < this.tau
this.tau % this.splitTolerance == 0
this.splitTolerance in this.work[]
this.eMin % this.splitTolerance == 0
this.splitTolerance % this.eMin == 0
this.splitTolerance < this.eMin
this.dMin % this.splitTolerance == 0
this.splitTolerance != this.dMin
this.splitTolerance % this.dMin == 0
this.dMin1 % this.splitTolerance == 0
this.splitTolerance != this.dMin1
this.splitTolerance % this.dMin1 == 0
this.dMin2 % this.splitTolerance == 0
this.splitTolerance % this.dMin2 == 0
this.splitTolerance < this.dMin2
this.dN % this.splitTolerance == 0
this.splitTolerance != this.dN
this.splitTolerance % this.dN == 0
this.dN1 % this.splitTolerance == 0
this.splitTolerance != this.dN1
this.splitTolerance % this.dN1 == 0
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] elements > this.minPivot
this.main[] elements > this.sigmaLow
this.main[] elements < this.qMax
this.main[] elements > this.g
this.main[] > this.realEigenvalues[] (elementwise)
this.secondary[] < this.squaredSecondary[] (elementwise)
this.secondary[] elements < this.upperSpectra
this.secondary[] < this.work[] (lexically)
this.secondary[] <= this.work[] (lexically)
this.secondary[] elements < this.qMax
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements > this.minPivot
this.squaredSecondary[] elements > this.sigmaLow
this.squaredSecondary[] elements > this.g
this.lowerSpectra < this.sigma
this.lowerSpectra < this.tau
this.lowerSpectra in this.work[]
this.work[] elements >= this.lowerSpectra
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.lowerSpectra < this.dN
this.lowerSpectra < this.dN1
this.upperSpectra > this.sigma
this.upperSpectra > this.tau
this.upperSpectra in this.work[]
this.work[] elements <= this.upperSpectra
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.upperSpectra > this.dN
this.upperSpectra > this.dN1
this.minPivot % this.sigma == 0
this.sigma % this.minPivot == 0
this.minPivot % this.tau == 0
this.minPivot < this.tau
this.tau % this.minPivot == 0
this.minPivot in this.work[]
this.eMin % this.minPivot == 0
this.minPivot % this.eMin == 0
this.minPivot < this.eMin
this.dMin % this.minPivot == 0
this.minPivot != this.dMin
this.minPivot % this.dMin == 0
this.dMin1 % this.minPivot == 0
this.minPivot != this.dMin1
this.minPivot % this.dMin1 == 0
this.dMin2 % this.minPivot == 0
this.minPivot % this.dMin2 == 0
this.minPivot < this.dMin2
this.dN % this.minPivot == 0
this.minPivot != this.dN
this.minPivot % this.dN == 0
this.dN1 % this.minPivot == 0
this.minPivot != this.dN1
this.minPivot % this.dN1 == 0
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma != this.tau
this.sigma < this.qMax
this.sigma != this.eMin
this.sigma != this.dMin
this.sigma != this.dMin1
this.sigma != this.dMin2
this.sigma != this.dN
this.sigma != this.dN1
this.sigmaLow % this.tau == 0
this.sigmaLow < this.tau
this.sigmaLow in this.work[]
this.sigmaLow % this.eMin == 0
this.sigmaLow < this.eMin
this.sigmaLow != this.dMin
this.sigmaLow % this.dMin == 0
this.sigmaLow != this.dMin1
this.sigmaLow % this.dMin1 == 0
this.sigmaLow % this.dMin2 == 0
this.sigmaLow < this.dMin2
this.sigmaLow != this.dN
this.sigmaLow % this.dN == 0
this.sigmaLow != this.dN1
this.sigmaLow % this.dN1 == 0
this.realEigenvalues[] elements == this.sigmaLow
this.sigmaLow in this.realEigenvalues[]
this.tau < this.qMax
this.tau < this.eMin
this.tau != this.dMin1
this.tau < this.dMin2
this.tau != this.dN1
this.eMin in this.work[]
this.dN in this.work[]
this.g in this.work[]
this.work[] > this.realEigenvalues[] (lexically)
this.work[] >= this.realEigenvalues[] (lexically)
this.pingPong > this.tType
this.pingPong >= start
this.pingPong < end
this.qMax > this.eMin
this.qMax > this.dMin
this.qMax > this.dMin1
this.qMax > this.dMin2
this.qMax > this.dN
this.qMax > this.dN1
this.eMin > this.dMin
this.eMin >= this.dMin1
this.eMin != this.dMin2
this.eMin != this.dN
this.eMin >= this.dN1
this.eMin > this.g
this.tType < start
this.tType < end
this.dMin1 != this.dN
this.dMin1 != this.g
this.dMin2 != this.dN
this.dMin2 != this.dN1
this.dMin2 > this.g
this.dN != this.dN1
this.dN1 != this.g
this.g in this.realEigenvalues[]
this.realEigenvalues[] elements == this.g
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.dqds(int, int):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.tType == orig(this.tType)
this.dMin2 == this.dN2
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.work[]) == orig(size(this.work[]))
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.work has only one value
this.qMax == 20464.940196239226
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.main[] elements > this.splitTolerance
this.squaredSecondary[] elements > this.splitTolerance
this.sigma % this.splitTolerance == 0
this.splitTolerance % this.sigma == 0
this.splitTolerance % this.tau == 0
this.splitTolerance < this.tau
this.tau % this.splitTolerance == 0
this.splitTolerance in this.work[]
this.eMin % this.splitTolerance == 0
this.splitTolerance % this.eMin == 0
this.splitTolerance < this.eMin
this.dMin % this.splitTolerance == 0
this.splitTolerance != this.dMin
this.splitTolerance % this.dMin == 0
this.dMin1 % this.splitTolerance == 0
this.splitTolerance != this.dMin1
this.splitTolerance % this.dMin1 == 0
this.dMin2 % this.splitTolerance == 0
this.splitTolerance % this.dMin2 == 0
this.splitTolerance < this.dMin2
this.dN % this.splitTolerance == 0
this.splitTolerance != this.dN
this.splitTolerance % this.dN == 0
this.dN1 % this.splitTolerance == 0
this.splitTolerance != this.dN1
this.splitTolerance % this.dN1 == 0
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.splitTolerance in orig(this.work[])
orig(this.eMin) % this.splitTolerance == 0
this.splitTolerance % orig(this.eMin) == 0
this.splitTolerance < orig(this.eMin)
orig(this.dMin) % this.splitTolerance == 0
this.splitTolerance != orig(this.dMin)
this.splitTolerance % orig(this.dMin) == 0
orig(this.dMin1) % this.splitTolerance == 0
this.splitTolerance != orig(this.dMin1)
this.splitTolerance % orig(this.dMin1) == 0
orig(this.dMin2) % this.splitTolerance == 0
this.splitTolerance % orig(this.dMin2) == 0
this.splitTolerance < orig(this.dMin2)
orig(this.dN) % this.splitTolerance == 0
this.splitTolerance != orig(this.dN)
this.splitTolerance % orig(this.dN) == 0
orig(this.dN1) % this.splitTolerance == 0
this.splitTolerance != orig(this.dN1)
this.splitTolerance % orig(this.dN1) == 0
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] elements > this.minPivot
this.main[] elements > this.sigmaLow
this.main[] elements < this.qMax
this.main[] elements > this.g
this.main[] > this.realEigenvalues[] (elementwise)
this.secondary[] < this.squaredSecondary[] (elementwise)
this.secondary[] elements < this.upperSpectra
this.secondary[] < this.work[] (lexically)
this.secondary[] <= this.work[] (lexically)
this.secondary[] elements < this.qMax
this.secondary[] < orig(this.work[]) (lexically)
this.secondary[] <= orig(this.work[]) (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements > this.minPivot
this.squaredSecondary[] elements > this.sigmaLow
this.squaredSecondary[] elements > this.dMin
this.squaredSecondary[] elements > this.dMin1
this.squaredSecondary[] elements > this.dN
this.squaredSecondary[] elements > this.dN1
this.squaredSecondary[] elements > this.g
this.squaredSecondary[] > orig(this.work[]) (lexically)
this.squaredSecondary[] >= orig(this.work[]) (lexically)
this.lowerSpectra < this.sigma
this.lowerSpectra < this.tau
this.lowerSpectra in this.work[]
this.work[] elements >= this.lowerSpectra
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.lowerSpectra < this.dN
this.lowerSpectra < this.dN1
orig(this.work[]) elements >= this.lowerSpectra
this.lowerSpectra in orig(this.work[])
this.lowerSpectra < orig(this.eMin)
this.lowerSpectra < orig(this.dMin)
this.lowerSpectra < orig(this.dMin1)
this.lowerSpectra < orig(this.dMin2)
this.lowerSpectra < orig(this.dN)
this.lowerSpectra < orig(this.dN1)
this.upperSpectra > this.sigma
this.upperSpectra > this.tau
this.upperSpectra in this.work[]
this.work[] elements <= this.upperSpectra
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.upperSpectra > this.dN
this.upperSpectra > this.dN1
orig(this.work[]) elements <= this.upperSpectra
this.upperSpectra in orig(this.work[])
this.upperSpectra > orig(this.eMin)
this.upperSpectra > orig(this.dMin)
this.upperSpectra > orig(this.dMin1)
this.upperSpectra > orig(this.dMin2)
this.upperSpectra > orig(this.dN)
this.upperSpectra > orig(this.dN1)
this.minPivot % this.sigma == 0
this.sigma % this.minPivot == 0
this.minPivot % this.tau == 0
this.minPivot < this.tau
this.tau % this.minPivot == 0
this.minPivot in this.work[]
this.eMin % this.minPivot == 0
this.minPivot % this.eMin == 0
this.minPivot < this.eMin
this.dMin % this.minPivot == 0
this.minPivot != this.dMin
this.minPivot % this.dMin == 0
this.dMin1 % this.minPivot == 0
this.minPivot != this.dMin1
this.minPivot % this.dMin1 == 0
this.dMin2 % this.minPivot == 0
this.minPivot % this.dMin2 == 0
this.minPivot < this.dMin2
this.dN % this.minPivot == 0
this.minPivot != this.dN
this.minPivot % this.dN == 0
this.dN1 % this.minPivot == 0
this.minPivot != this.dN1
this.minPivot % this.dN1 == 0
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.minPivot in orig(this.work[])
orig(this.eMin) % this.minPivot == 0
this.minPivot % orig(this.eMin) == 0
this.minPivot < orig(this.eMin)
orig(this.dMin) % this.minPivot == 0
this.minPivot != orig(this.dMin)
this.minPivot % orig(this.dMin) == 0
orig(this.dMin1) % this.minPivot == 0
this.minPivot != orig(this.dMin1)
this.minPivot % orig(this.dMin1) == 0
orig(this.dMin2) % this.minPivot == 0
this.minPivot % orig(this.dMin2) == 0
this.minPivot < orig(this.dMin2)
orig(this.dN) % this.minPivot == 0
this.minPivot != orig(this.dN)
this.minPivot % orig(this.dN) == 0
orig(this.dN1) % this.minPivot == 0
this.minPivot != orig(this.dN1)
this.minPivot % orig(this.dN1) == 0
this.sigma != this.tau
this.sigma < this.qMax
this.sigma != this.eMin
this.sigma != this.dMin
this.sigma != this.dMin1
this.sigma != this.dMin2
this.sigma != this.dN
this.sigma != this.dN1
this.sigma != orig(this.eMin)
this.sigma != orig(this.dMin)
this.sigma != orig(this.dMin1)
this.sigma != orig(this.dMin2)
this.sigma != orig(this.dN)
this.sigma != orig(this.dN1)
this.sigmaLow % this.tau == 0
this.sigmaLow < this.tau
this.sigmaLow in this.work[]
this.sigmaLow % this.eMin == 0
this.sigmaLow < this.eMin
this.sigmaLow != this.dMin
this.sigmaLow % this.dMin == 0
this.sigmaLow != this.dMin1
this.sigmaLow % this.dMin1 == 0
this.sigmaLow % this.dMin2 == 0
this.sigmaLow < this.dMin2
this.sigmaLow != this.dN
this.sigmaLow % this.dN == 0
this.sigmaLow != this.dN1
this.sigmaLow % this.dN1 == 0
this.realEigenvalues[] elements == this.sigmaLow
this.sigmaLow in this.realEigenvalues[]
this.sigmaLow in orig(this.work[])
this.sigmaLow % orig(this.eMin) == 0
this.sigmaLow < orig(this.eMin)
this.sigmaLow != orig(this.dMin)
this.sigmaLow % orig(this.dMin) == 0
this.sigmaLow != orig(this.dMin1)
this.sigmaLow % orig(this.dMin1) == 0
this.sigmaLow % orig(this.dMin2) == 0
this.sigmaLow < orig(this.dMin2)
this.sigmaLow != orig(this.dN)
this.sigmaLow % orig(this.dN) == 0
this.sigmaLow != orig(this.dN1)
this.sigmaLow % orig(this.dN1) == 0
this.tau < this.qMax
this.tau < this.eMin
this.tau != this.dMin
this.tau != this.dMin1
this.tau != this.dMin2
this.tau != this.dN
this.tau != this.dN1
this.tau < orig(this.eMin)
this.tau != orig(this.dMin1)
this.tau < orig(this.dMin2)
this.tau != orig(this.dN1)
this.eMin in this.work[]
this.dN in this.work[]
this.g in this.work[]
this.work[] > this.realEigenvalues[] (lexically)
this.work[] >= this.realEigenvalues[] (lexically)
orig(this.eMin) in this.work[]
this.pingPong > this.tType
this.pingPong >= orig(start)
this.pingPong < orig(end)
this.qMax > this.eMin
this.qMax > this.dMin
this.qMax > this.dMin1
this.qMax > this.dMin2
this.qMax > this.dN
this.qMax > this.dN1
this.qMax > orig(this.eMin)
this.qMax > orig(this.dMin)
this.qMax > orig(this.dMin1)
this.qMax > orig(this.dMin2)
this.qMax > orig(this.dN)
this.qMax > orig(this.dN1)
this.eMin > this.dMin
this.eMin >= this.dMin1
this.eMin != this.dMin2
this.eMin != this.dN
this.eMin >= this.dN1
this.eMin > this.g
this.eMin in orig(this.work[])
this.eMin > orig(this.dMin)
this.eMin >= orig(this.dMin1)
this.eMin != orig(this.dMin2)
this.eMin != orig(this.dN)
this.eMin >= orig(this.dN1)
this.tType < orig(start)
this.tType < orig(end)
this.dMin < orig(this.eMin)
this.dMin != orig(this.dMin)
this.dMin != orig(this.dMin1)
this.dMin != orig(this.dMin2)
this.dMin != orig(this.dN)
this.dMin != orig(this.dN1)
this.dMin1 != this.dN
this.dMin1 != this.g
this.dMin1 != orig(this.dMin)
this.dMin1 != orig(this.dMin2)
this.dMin1 != orig(this.dN)
this.dMin2 != this.dN
this.dMin2 != this.dN1
this.dMin2 > this.g
this.dMin2 != orig(this.eMin)
this.dMin2 != orig(this.dMin)
this.dMin2 != orig(this.dMin1)
this.dMin2 != orig(this.dN)
this.dMin2 != orig(this.dN1)
this.dN != this.dN1
this.dN < orig(this.eMin)
this.dN != orig(this.dMin)
this.dN != orig(this.dMin1)
this.dN != orig(this.dMin2)
this.dN != orig(this.dN)
this.dN != orig(this.dN1)
this.dN1 != this.g
this.dN1 != orig(this.dMin)
this.dN1 != orig(this.dMin2)
this.dN1 != orig(this.dN)
this.g in this.realEigenvalues[]
this.realEigenvalues[] elements == this.g
this.g in orig(this.work[])
this.g < orig(this.eMin)
this.g != orig(this.dMin1)
this.g < orig(this.dMin2)
this.g != orig(this.dN1)
this.realEigenvalues[] < orig(this.work[]) (lexically)
this.realEigenvalues[] <= orig(this.work[]) (lexically)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.eigenvaluesRange(int, int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.pingPong == index
this.realEigenvalues[] == this.imagEigenvalues[]
n == size(this.main[])
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.eigenvaluesRange(int, int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.tau)
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.sigma == orig(this.g)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.pingPong == orig(index)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
orig(n) == size(this.main[])
orig(n) == size(this.realEigenvalues[])
orig(n) == size(this.imagEigenvalues[])
orig(n) == orig(size(this.realEigenvalues[]))
orig(n) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
return has only one value
return[] == [57.99257465835375, 20654.74511575945]
return[] elements one of { 57.99257465835375, 20654.74511575945 }
orig(n) == 7
size(this.work[]) == 42
size(return[]) == 2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.findEigenVectors():::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.minPivot == this.dMin
this.sigmaLow == this.dMin
this.tau == this.dMin
this.eMin == this.dMin1
this.dMin == this.dN
this.dMin == this.g
this.dMin1 == this.dN1
this.dMin2 == this.dN2
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this.transformer.cachedQ == null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.eigenvectors == null
this.cachedV == null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.minPivot in this.work[]
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.sigma in this.work[]
this.sigmaLow in this.work[]
this.tau in this.work[]
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
this.eMin in this.work[]
this.dMin in this.work[]
this.dMin1 in this.work[]
this.dMin2 in this.work[]
this.dN in this.work[]
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.findEigenVectors():::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedT == this.cachedV
this.transformer.cachedT == orig(this.transformer.cachedQ)
this.transformer.cachedT == orig(this.transformer.cachedQt)
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.dMin
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == this.dMin
this.sigmaLow == orig(this.sigmaLow)
this.tau == this.dMin
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == this.dMin1
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.dMin)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin1 == orig(this.dMin1)
this.dMin1 == orig(this.dN1)
this.dMin2 == this.dN2
this.dMin2 == orig(this.dMin2)
this.dMin2 == orig(this.dN2)
this.dN == orig(this.dN)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.transformer.householderVectors[]) == orig(size(this.transformer.main[]))
size(this.transformer.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.transformer.secondary[]) == orig(size(this.transformer.main[]))-1
size(this.work[]) == orig(size(this.work[]))
this.transformer.householderVectors[this.pingPong] == this.transformer.householderVectors[orig(this.tType)]
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[post(this.tType)])
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[this.tType])
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[].getClass().getName() one of { [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector], [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector] }
this.cachedV == null
this.splitTolerance in orig(this.work[])
this.lowerSpectra in orig(this.work[])
this.upperSpectra in orig(this.work[])
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.minPivot in orig(this.work[])
this.sigma in orig(this.work[])
this.sigmaLow in orig(this.work[])
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
this.tau in orig(this.work[])
this.eMin in orig(this.work[])
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
this.dMin in orig(this.work[])
this.dMin1 in orig(this.work[])
this.dMin2 in orig(this.work[])
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
this.dN in orig(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvalues():::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.realEigenvalues == this.imagEigenvalues
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.transformer.cachedQ == null
this.sigma == 0.0
this.pingPong == 0
this.realEigenvalues == null
this.eigenvectors == null
this.cachedV == null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.sigma in this.work[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvalues():::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ == orig(this.transformer.cachedQt)
this.transformer.cachedQ == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.dMin
this.minPivot == orig(this.minPivot)
this.sigmaLow == this.dMin
this.tau == this.dMin
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.eMin == this.dMin1
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.sigma)
this.dMin == orig(this.sigmaLow)
this.dMin == orig(this.tau)
this.dMin == orig(this.qMax)
this.dMin == orig(this.eMin)
this.dMin == orig(this.dMin)
this.dMin == orig(this.dMin1)
this.dMin == orig(this.dMin2)
this.dMin == orig(this.dN)
this.dMin == orig(this.dN1)
this.dMin == orig(this.dN2)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin2 == this.dN2
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.transformer.householderVectors[]) == orig(size(this.transformer.main[]))
size(this.transformer.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.transformer.secondary[]) == orig(size(this.transformer.main[]))-1
size(this.work[]) == orig(size(this.work[]))
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[post(this.tType)])
this.transformer.cachedQ == null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.eigenvectors == null
this.cachedV == null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.splitTolerance in orig(this.work[])
this.lowerSpectra in this.work[]
this.lowerSpectra in orig(this.work[])
this.upperSpectra in this.work[]
this.upperSpectra in orig(this.work[])
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.minPivot in this.work[]
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.minPivot in orig(this.work[])
this.sigma in this.work[]
this.sigmaLow in this.work[]
this.sigmaLow in orig(this.work[])
this.tau in this.work[]
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
this.tau in orig(this.work[])
this.eMin in this.work[]
this.dMin in this.work[]
this.dMin1 in this.work[]
this.dMin2 in this.work[]
this.dN in this.work[]
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
this.dMin in orig(this.work[])
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
this.dN in orig(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvector(double, double[], double[]):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.transformer.cachedT == this.cachedV
this.minPivot == this.dMin
this.sigmaLow == this.dMin
this.tau == this.dMin
this.eMin == this.dMin1
this.dMin == this.dN
this.dMin == this.g
this.dMin1 == this.dN1
this.dMin2 == this.dN2
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == size(d[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == size(d[])-1
size(this.secondary[]) == size(l[])
this.main != null
this.secondary != null
this.squaredSecondary != null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.work != null
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.realEigenvalues != null
this.realEigenvalues[] sorted by >=
this.imagEigenvalues != null
this.eigenvectors != null
this.cachedV == null
d != null
d[] elements >= 8.881784197001252E-16
l != null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dMin1
eigenvalue % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != eigenvalue
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % eigenvalue == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin1
eigenvalue % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % eigenvalue == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < eigenvalue
d[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance > this.lowerSpectra
this.splitTolerance < this.upperSpectra
this.splitTolerance < this.minPivot
this.splitTolerance <= this.dMin1
eigenvalue % this.splitTolerance == 0
this.splitTolerance % eigenvalue == 0
this.splitTolerance < eigenvalue
d[] elements > this.splitTolerance
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] < this.realEigenvalues[] (lexically)
this.main[] <= this.realEigenvalues[] (lexically)
this.main[] > l[] (lexically)
this.main[] >= l[] (lexically)
this.secondary[] elements < this.upperSpectra
this.secondary[] < d[] (lexically)
this.secondary[] <= d[] (lexically)
this.secondary[] < l[] (lexically)
this.secondary[] <= l[] (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements >= this.tau
this.squaredSecondary[] elements >= this.eMin
this.squaredSecondary[] elements >= this.dMin
this.squaredSecondary[] elements >= this.dMin1
this.squaredSecondary[] elements >= this.dN
this.squaredSecondary[] > d[] (lexically)
this.squaredSecondary[] >= d[] (lexically)
this.squaredSecondary[] > l[] (lexically)
this.squaredSecondary[] >= l[] (elementwise)
this.transformer.main[] elements > this.lowerSpectra
this.transformer.main[] elements < this.upperSpectra
this.transformer.main[] < this.realEigenvalues[] (lexically)
this.transformer.main[] <= this.realEigenvalues[] (lexically)
this.transformer.main[] > l[] (lexically)
this.transformer.main[] >= l[] (lexically)
this.transformer.secondary[] elements < this.upperSpectra
this.transformer.secondary[] < d[] (lexically)
this.transformer.secondary[] <= d[] (lexically)
this.transformer.secondary[] < l[] (lexically)
this.transformer.secondary[] <= l[] (lexically)
this.lowerSpectra < this.upperSpectra
this.lowerSpectra % this.minPivot == 0
this.lowerSpectra < this.minPivot
this.minPivot % this.lowerSpectra == 0
this.lowerSpectra < this.sigma
this.lowerSpectra < this.sigmaLow
this.sigmaLow % this.lowerSpectra == 0
this.lowerSpectra < this.tau
this.tau % this.lowerSpectra == 0
this.lowerSpectra < this.qMax
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.dN % this.lowerSpectra == 0
this.lowerSpectra < this.dN
this.lowerSpectra < eigenvalue
d[] elements > this.lowerSpectra
this.minPivot % this.upperSpectra == 0
this.upperSpectra % this.minPivot == 0
this.upperSpectra > this.minPivot
this.upperSpectra > this.sigma
this.sigmaLow % this.upperSpectra == 0
this.upperSpectra > this.sigmaLow
this.tau % this.upperSpectra == 0
this.upperSpectra > this.tau
this.upperSpectra > this.qMax
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.dN % this.upperSpectra == 0
this.upperSpectra > this.dN
this.upperSpectra != eigenvalue
l[] elements < this.upperSpectra
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
this.sigma % this.minPivot == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
this.minPivot >= this.sigmaLow
this.sigmaLow % this.minPivot == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.tau % this.minPivot == 0
this.tau == this.minPivot**2
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
this.qMax % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
this.eMin % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
this.dMin1 % this.minPivot == 0
this.minPivot <= this.dMin1
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
this.dMin2 % this.minPivot == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.dN % this.minPivot == 0
this.dN == this.minPivot**2
this.minPivot >= this.dN
Infinity * this.minPivot + 8.44424930131969E14 * eigenvalue - 6.516145710851688E16 == 0
eigenvalue % this.minPivot == 0
this.minPivot % eigenvalue == 0
this.minPivot < eigenvalue
d[] elements > this.minPivot
this.sigma >= this.tau
this.sigma >= this.eMin
this.sigma >= this.dMin
this.sigma >= this.dMin1
this.sigma >= this.dMin2
this.sigma >= this.dN
this.sigmaLow <= this.dMin1
this.sigmaLow % eigenvalue == 0
this.sigmaLow <= eigenvalue
d[] elements >= this.sigmaLow
this.tau <= this.dMin1
this.tau <= this.dMin2
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
this.tau % eigenvalue == 0
this.tau <= eigenvalue
d[] elements >= this.tau
this.eMin <= this.dMin2
this.eMin >= this.dN
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
this.dMin <= eigenvalue
d[] elements >= this.dMin
this.dMin1 >= this.dN
this.dMin2 >= this.dN
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
this.dN % eigenvalue == 0
this.dN <= eigenvalue
d[] elements >= this.dN
this.realEigenvalues[] > this.imagEigenvalues[] (lexically)
this.realEigenvalues[] > d[] (lexically)
this.realEigenvalues[] >= d[] (lexically)
this.realEigenvalues[] > l[] (lexically)
this.realEigenvalues[] >= l[] (lexically)
this.imagEigenvalues[] < d[] (lexically)
this.imagEigenvalues[] <= d[] (elementwise)
this.imagEigenvalues[] > l[] (lexically)
this.imagEigenvalues[] >= l[] (lexically)
d[] > l[] (lexically)
d[] >= l[] (lexically)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvector(double, double[], double[]):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedT == this.cachedV
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.dMin
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == this.dMin
this.sigmaLow == orig(this.sigmaLow)
this.tau == this.dMin
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == this.dMin1
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.dMin)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin1 == orig(this.dMin1)
this.dMin1 == orig(this.dN1)
this.dMin2 == this.dN2
this.dMin2 == orig(this.dMin2)
this.dMin2 == orig(this.dN2)
this.dN == orig(this.dN)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
d[] == orig(d[])
l[] == orig(l[])
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == size(return.data[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.main[]) == orig(size(this.eigenvectors[]))
size(this.main[]) == orig(size(d[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == size(d[])-1
size(this.secondary[]) == size(return.data[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.eigenvectors[]))-1
size(this.secondary[]) == orig(size(d[]))-1
size(this.secondary[]) == orig(size(l[]))
size(this.transformer.householderVectors[]) == orig(size(this.transformer.main[]))
size(this.transformer.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.transformer.secondary[]) == orig(size(this.transformer.main[]))-1
size(this.work[]) == orig(size(this.work[]))
this.transformer.householderVectors[this.pingPong] == this.transformer.householderVectors[orig(this.tType)]
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[post(this.tType)])
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[this.tType])
this.main != null
this.secondary != null
this.squaredSecondary != null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.work != null
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.realEigenvalues != null
this.realEigenvalues[] sorted by >=
this.imagEigenvalues != null
this.eigenvectors != null
this.cachedV == null
d[] elements >= 8.881784197001252E-16
return != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
return.data != null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin1
d[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance > this.lowerSpectra
this.splitTolerance < this.upperSpectra
this.splitTolerance < this.minPivot
this.splitTolerance <= this.dMin1
d[] elements > this.splitTolerance
orig(eigenvalue) % this.splitTolerance == 0
this.splitTolerance % orig(eigenvalue) == 0
this.splitTolerance < orig(eigenvalue)
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] > this.work[] (lexically)
this.main[] >= this.work[] (lexically)
this.main[] < this.realEigenvalues[] (lexically)
this.main[] <= this.realEigenvalues[] (lexically)
this.main[] > l[] (lexically)
this.main[] >= l[] (lexically)
this.secondary[] elements < this.upperSpectra
this.secondary[] < d[] (lexically)
this.secondary[] <= d[] (lexically)
this.secondary[] < l[] (lexically)
this.secondary[] <= l[] (lexically)
this.secondary[] < return.data[] (lexically)
this.secondary[] <= return.data[] (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements >= this.tau
this.squaredSecondary[] elements >= this.eMin
this.squaredSecondary[] elements >= this.dMin
this.squaredSecondary[] elements >= this.dMin1
this.squaredSecondary[] elements >= this.dN
this.squaredSecondary[] > d[] (lexically)
this.squaredSecondary[] >= d[] (lexically)
this.squaredSecondary[] > l[] (lexically)
this.squaredSecondary[] >= l[] (elementwise)
this.squaredSecondary[] > return.data[] (lexically)
this.squaredSecondary[] >= return.data[] (lexically)
this.squaredSecondary[] > orig(this.work[]) (lexically)
this.squaredSecondary[] >= orig(this.work[]) (lexically)
this.transformer.householderVectors.getClass().getName() != org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName()
this.transformer.main[] elements > this.lowerSpectra
this.transformer.main[] elements < this.upperSpectra
this.transformer.main[] < this.realEigenvalues[] (lexically)
this.transformer.main[] <= this.realEigenvalues[] (lexically)
this.transformer.main[] > l[] (lexically)
this.transformer.main[] >= l[] (lexically)
this.transformer.main[] > orig(this.work[]) (lexically)
this.transformer.main[] >= orig(this.work[]) (lexically)
this.transformer.secondary[] elements < this.upperSpectra
this.transformer.secondary[] < d[] (lexically)
this.transformer.secondary[] <= d[] (lexically)
this.transformer.secondary[] < l[] (lexically)
this.transformer.secondary[] <= l[] (lexically)
this.transformer.secondary[] < return.data[] (lexically)
this.transformer.secondary[] <= return.data[] (lexically)
this.transformer.cachedQ.getClass().getName() != org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName()
this.lowerSpectra < this.upperSpectra
this.lowerSpectra % this.minPivot == 0
this.lowerSpectra < this.minPivot
this.minPivot % this.lowerSpectra == 0
this.lowerSpectra < this.sigma
this.lowerSpectra < this.sigmaLow
this.sigmaLow % this.lowerSpectra == 0
this.lowerSpectra < this.tau
this.tau % this.lowerSpectra == 0
this.lowerSpectra < this.qMax
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.dN % this.lowerSpectra == 0
this.lowerSpectra < this.dN
d[] elements > this.lowerSpectra
return.data[] elements > this.lowerSpectra
this.lowerSpectra < orig(eigenvalue)
this.minPivot % this.upperSpectra == 0
this.upperSpectra % this.minPivot == 0
this.upperSpectra > this.minPivot
this.upperSpectra > this.sigma
this.sigmaLow % this.upperSpectra == 0
this.upperSpectra > this.sigmaLow
this.tau % this.upperSpectra == 0
this.upperSpectra > this.tau
this.upperSpectra > this.qMax
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.dN % this.upperSpectra == 0
this.upperSpectra > this.dN
l[] elements < this.upperSpectra
return.data[] elements < this.upperSpectra
this.upperSpectra != orig(eigenvalue)
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
this.sigma % this.minPivot == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
this.minPivot >= this.sigmaLow
this.sigmaLow % this.minPivot == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.tau % this.minPivot == 0
this.tau == this.minPivot**2
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
this.qMax % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
this.eMin % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
this.dMin1 % this.minPivot == 0
this.minPivot <= this.dMin1
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
this.dMin2 % this.minPivot == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.dN % this.minPivot == 0
this.dN == this.minPivot**2
this.minPivot >= this.dN
d[] elements > this.minPivot
Infinity * this.minPivot + 8.44424930131969E14 * orig(eigenvalue) - 6.516145710851688E16 == 0
orig(eigenvalue) % this.minPivot == 0
this.minPivot % orig(eigenvalue) == 0
this.minPivot < orig(eigenvalue)
this.sigma >= this.tau
this.sigma >= this.eMin
this.sigma >= this.dMin
this.sigma >= this.dMin1
this.sigma >= this.dMin2
this.sigma >= this.dN
this.sigmaLow <= this.dMin1
d[] elements >= this.sigmaLow
this.sigmaLow % orig(eigenvalue) == 0
this.sigmaLow <= orig(eigenvalue)
this.tau <= this.dMin1
this.tau <= this.dMin2
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
d[] elements >= this.tau
this.tau % orig(eigenvalue) == 0
this.tau <= orig(eigenvalue)
this.work[] < this.realEigenvalues[] (lexically)
this.work[] <= this.realEigenvalues[] (lexically)
this.work[] < d[] (lexically)
this.work[] <= d[] (lexically)
this.pingPong < size(l[])-1
this.eMin <= this.dMin2
this.eMin >= this.dN
this.tType > org.apache.commons.math.linear.ArrayRealVector.serialVersionUID
this.tType > org.apache.commons.math.linear.RealVectorFormat.serialVersionUID
this.tType < org.apache.commons.math.util.CompositeFormat.serialVersionUID
this.tType < size(l[])-1
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
d[] elements >= this.dMin
this.dMin <= orig(eigenvalue)
this.dMin1 >= this.dN
this.dMin2 >= this.dN
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
d[] elements >= this.dN
this.dN % orig(eigenvalue) == 0
this.dN <= orig(eigenvalue)
this.realEigenvalues[] > this.imagEigenvalues[] (lexically)
this.realEigenvalues[] > d[] (lexically)
this.realEigenvalues[] >= d[] (lexically)
this.realEigenvalues[] > l[] (lexically)
this.realEigenvalues[] >= l[] (lexically)
this.realEigenvalues[] > return.data[] (lexically)
this.realEigenvalues[] >= return.data[] (lexically)
this.imagEigenvalues[] < d[] (lexically)
this.imagEigenvalues[] <= d[] (elementwise)
this.imagEigenvalues[] > l[] (lexically)
this.imagEigenvalues[] >= l[] (lexically)
this.eigenvectors.getClass().getName() != org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName()
d[] > l[] (lexically)
d[] >= l[] (lexically)
d[] > return.data[] (lexically)
d[] >= return.data[] (lexically)
l[] < return.data[] (lexically)
l[] <= return.data[] (lexically)
org.apache.commons.math.linear.ArrayRealVector.serialVersionUID < size(this.work[])-1
org.apache.commons.math.linear.ArrayRealVector.serialVersionUID < size(l[])-1
org.apache.commons.math.linear.RealVectorFormat.serialVersionUID < size(this.work[])-1
org.apache.commons.math.linear.RealVectorFormat.serialVersionUID < size(l[])-1
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString < org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString > org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString > org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString > org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString > org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString > org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString
org.apache.commons.math.util.CompositeFormat.serialVersionUID > size(this.main[])
org.apache.commons.math.util.CompositeFormat.serialVersionUID > size(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.flipIfWarranted(int, int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.dMin
this.sigma == this.dN
this.sigma == this.g
this.dMin1 == this.dN1
this.realEigenvalues[] == this.imagEigenvalues[]
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.tau == 1.6006892232545997E-11
this.work has only one value
this.eMin one of { 0.0, 176.61767389159772 }
this.tType == 0
this.dMin1 one of { 0.0, 2622.2873898688904 }
this.dMin2 one of { 0.0, 13169.884155532236 }
this.dN2 one of { 0.0, 20271.295045330528 }
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
n one of { 3, 4, 7 }
step one of { 1, 2 }
size(this.main[]) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.tau in this.work[]
this.realEigenvalues[] elements == this.tau
this.tau in this.realEigenvalues[]
this.eMin in this.work[]
this.dMin2 in this.work[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.flipIfWarranted(int, int):::EXIT1144
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.pingPong == this.tType
this.pingPong == orig(this.tType)
orig(n) == size(this.main[])
orig(n) == size(this.realEigenvalues[])
orig(n) == size(this.imagEigenvalues[])
orig(n) == orig(size(this.main[]))
orig(n) == orig(size(this.realEigenvalues[]))
orig(n) == orig(size(this.imagEigenvalues[]))
this.work[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20094.430077247813, 0.0, 198.12300408391457, 0.5032985539728543, 10439.913389332172, 11279.434546970497, 2583.268761038723, 2625.1197804873664, 4216.250745159982, 20.872884137751694, 925.8861564255155, 20562.657943923878, 1323.5776689804854, 0.0, 13169.884155532236, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.pingPong == 0
return == true
orig(this.work[]) one of { [0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 13904.94049602339, 11279.93784552447, 3.962537109097144, 2625.0026504989196, 20464.940196239226, 20.99001412619831, 114.64975304839034, 20447.912719222124, 0.09547165335915303, 114.74522470174949, 3.962537109097144, 13169.884155532236, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 0.0, 1323.5776689804854, 0.0, 925.8861564255155, 0.0, 4216.250745159982, 0.0, 2583.268761038723, 0.0, 10439.913389332172, 0.0, 198.12300408391457, 0.0, 20094.430077247813, 0.0, 0.5032985539728543, 0.0, 11279.434546970497, 0.0, 2625.1197804873664, 0.0, 20.872884137751694, 0.0, 20562.657943923878, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
orig(n) == 7
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.flipIfWarranted(int, int):::EXIT1144;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.flipIfWarranted(int, int):::EXIT1146
this.sigma == orig(this.tau)
this.work[] == orig(this.work[])
this.work[] one of { [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 13284.629380233986, 114.74522470174949, 176.61767389159772, 20447.912719222124, 20292.285059456724, 20.99001412619831, 2.7152606300295816, 2625.0026504989196, 13902.22523539336, 11279.93784552447, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.qMax == 20464.940196239226
return == false
orig(n) one of { 3, 4 }
orig(step) == 1
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.flipIfWarranted(int, int):::EXIT1146;condition="not(return == true)"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.flipIfWarranted(int, int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.dMin
this.sigma == this.dN
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dN)
this.sigma == orig(this.g)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin1 == this.dN1
this.dMin1 == orig(this.dMin1)
this.dMin1 == orig(this.dN1)
this.dMin2 == orig(this.dMin2)
this.dN2 == orig(this.dN2)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.work[]) == orig(size(this.work[]))
(this.qMax == 20464.940196239226)  <==>  (orig(n) one of { 3, 4 })
(this.qMax == 20464.940196239226)  <==>  (orig(this.work[]) one of { [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 13284.629380233986, 114.74522470174949, 176.61767389159772, 20447.912719222124, 20292.285059456724, 20.99001412619831, 2.7152606300295816, 2625.0026504989196, 13902.22523539336, 11279.93784552447, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] })
(this.qMax == 20464.940196239226)  <==>  (return == false)
(this.qMax == 20464.940196239226)  ==>  (orig(step) == 1)
(this.qMax == 20464.940196239226)  ==>  (this.dMin1 one of { 0.0, 2622.2873898688904 })
(this.qMax == 20464.940196239226)  ==>  (this.dMin2 one of { 0.0, 13169.884155532236 })
(this.qMax == 20464.940196239226)  ==>  (this.dN2 one of { 0.0, 20271.295045330528 })
(this.qMax == 20464.940196239226)  ==>  (this.eMin one of { 0.0, 176.61767389159772 })
(this.qMax == 20464.940196239226)  ==>  (this.pingPong one of { 0, 1 })
(this.qMax == 20464.940196239226)  ==>  (this.work[] == orig(this.work[]))
(this.qMax == 20464.940196239226)  ==>  (this.work[] one of { [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 13284.629380233986, 114.74522470174949, 176.61767389159772, 20447.912719222124, 20292.285059456724, 20.99001412619831, 2.7152606300295816, 2625.0026504989196, 13902.22523539336, 11279.93784552447, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] })
(this.tau == 1.6006892232545997E-11)  <==>  (org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.qMax)
(this.tau == 1.6006892232545997E-11)  <==>  (org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.qMax)
(this.tau == 1.6006892232545997E-11)  <==>  (orig(n) == 7)
(this.tau == 1.6006892232545997E-11)  <==>  (orig(n) == size(this.main[]))
(this.tau == 1.6006892232545997E-11)  <==>  (orig(this.work[]) one of { [0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 13904.94049602339, 11279.93784552447, 3.962537109097144, 2625.0026504989196, 20464.940196239226, 20.99001412619831, 114.64975304839034, 20447.912719222124, 0.09547165335915303, 114.74522470174949, 3.962537109097144, 13169.884155532236, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 0.0, 1323.5776689804854, 0.0, 925.8861564255155, 0.0, 4216.250745159982, 0.0, 2583.268761038723, 0.0, 10439.913389332172, 0.0, 198.12300408391457, 0.0, 20094.430077247813, 0.0, 0.5032985539728543, 0.0, 11279.434546970497, 0.0, 2625.1197804873664, 0.0, 20.872884137751694, 0.0, 20562.657943923878, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] })
(this.tau == 1.6006892232545997E-11)  <==>  (return == true)
(this.tau == 1.6006892232545997E-11)  <==>  (this.minPivot == this.qMax)
(this.tau == 1.6006892232545997E-11)  <==>  (this.qMax == 0.0)
(this.tau == 1.6006892232545997E-11)  <==>  (this.sigma == this.qMax)
(this.tau == 1.6006892232545997E-11)  <==>  (this.splitTolerance == this.qMax)
(this.tau == 1.6006892232545997E-11)  <==>  (this.tau == this.qMax)
(this.tau == 1.6006892232545997E-11)  ==>  (org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin1)
(this.tau == 1.6006892232545997E-11)  ==>  (org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin2)
(this.tau == 1.6006892232545997E-11)  ==>  (org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dN2)
(this.tau == 1.6006892232545997E-11)  ==>  (org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.eMin)
(this.tau == 1.6006892232545997E-11)  ==>  (org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin1)
(this.tau == 1.6006892232545997E-11)  ==>  (org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin2)
(this.tau == 1.6006892232545997E-11)  ==>  (org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dN2)
(this.tau == 1.6006892232545997E-11)  ==>  (org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.eMin)
(this.tau == 1.6006892232545997E-11)  ==>  (orig(step) one of { 1, 2 })
(this.tau == 1.6006892232545997E-11)  ==>  (this.dMin1 == 0.0)
(this.tau == 1.6006892232545997E-11)  ==>  (this.dMin1 in orig(this.work[]))
(this.tau == 1.6006892232545997E-11)  ==>  (this.dMin1 in this.realEigenvalues[])
(this.tau == 1.6006892232545997E-11)  ==>  (this.dMin1 in this.work[])
(this.tau == 1.6006892232545997E-11)  ==>  (this.dMin2 == 0.0)
(this.tau == 1.6006892232545997E-11)  ==>  (this.dMin2 in this.realEigenvalues[])
(this.tau == 1.6006892232545997E-11)  ==>  (this.dN2 == 0.0)
(this.tau == 1.6006892232545997E-11)  ==>  (this.dN2 in orig(this.work[]))
(this.tau == 1.6006892232545997E-11)  ==>  (this.dN2 in this.realEigenvalues[])
(this.tau == 1.6006892232545997E-11)  ==>  (this.dN2 in this.work[])
(this.tau == 1.6006892232545997E-11)  ==>  (this.eMin == 0.0)
(this.tau == 1.6006892232545997E-11)  ==>  (this.eMin in this.realEigenvalues[])
(this.tau == 1.6006892232545997E-11)  ==>  (this.minPivot == this.dMin1)
(this.tau == 1.6006892232545997E-11)  ==>  (this.minPivot == this.dMin2)
(this.tau == 1.6006892232545997E-11)  ==>  (this.minPivot == this.dN2)
(this.tau == 1.6006892232545997E-11)  ==>  (this.minPivot == this.eMin)
(this.tau == 1.6006892232545997E-11)  ==>  (this.pingPong == 0)
(this.tau == 1.6006892232545997E-11)  ==>  (this.pingPong == this.tType)
(this.tau == 1.6006892232545997E-11)  ==>  (this.qMax in orig(this.work[]))
(this.tau == 1.6006892232545997E-11)  ==>  (this.qMax in this.realEigenvalues[])
(this.tau == 1.6006892232545997E-11)  ==>  (this.qMax in this.work[])
(this.tau == 1.6006892232545997E-11)  ==>  (this.realEigenvalues[] elements == this.dMin1)
(this.tau == 1.6006892232545997E-11)  ==>  (this.realEigenvalues[] elements == this.dMin2)
(this.tau == 1.6006892232545997E-11)  ==>  (this.realEigenvalues[] elements == this.dN2)
(this.tau == 1.6006892232545997E-11)  ==>  (this.realEigenvalues[] elements == this.eMin)
(this.tau == 1.6006892232545997E-11)  ==>  (this.realEigenvalues[] elements == this.qMax)
(this.tau == 1.6006892232545997E-11)  ==>  (this.sigma == this.dMin1)
(this.tau == 1.6006892232545997E-11)  ==>  (this.sigma == this.dMin2)
(this.tau == 1.6006892232545997E-11)  ==>  (this.sigma == this.dN2)
(this.tau == 1.6006892232545997E-11)  ==>  (this.sigma == this.eMin)
(this.tau == 1.6006892232545997E-11)  ==>  (this.splitTolerance == this.dMin1)
(this.tau == 1.6006892232545997E-11)  ==>  (this.splitTolerance == this.dMin2)
(this.tau == 1.6006892232545997E-11)  ==>  (this.splitTolerance == this.dN2)
(this.tau == 1.6006892232545997E-11)  ==>  (this.splitTolerance == this.eMin)
(this.tau == 1.6006892232545997E-11)  ==>  (this.tau == this.dMin1)
(this.tau == 1.6006892232545997E-11)  ==>  (this.tau == this.dMin2)
(this.tau == 1.6006892232545997E-11)  ==>  (this.tau == this.dN2)
(this.tau == 1.6006892232545997E-11)  ==>  (this.tau == this.eMin)
(this.tau == 1.6006892232545997E-11)  ==>  (this.work[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20094.430077247813, 0.0, 198.12300408391457, 0.5032985539728543, 10439.913389332172, 11279.434546970497, 2583.268761038723, 2625.1197804873664, 4216.250745159982, 20.872884137751694, 925.8861564255155, 20562.657943923878, 1323.5776689804854, 0.0, 13169.884155532236, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] })
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.tau == 1.6006892232545997E-11
this.work has only one value
this.work[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20094.430077247813, 0.0, 198.12300408391457, 0.5032985539728543, 10439.913389332172, 11279.434546970497, 2583.268761038723, 2625.1197804873664, 4216.250745159982, 20.872884137751694, 925.8861564255155, 20562.657943923878, 1323.5776689804854, 0.0, 13169.884155532236, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 13284.629380233986, 114.74522470174949, 176.61767389159772, 20447.912719222124, 20292.285059456724, 20.99001412619831, 2.7152606300295816, 2625.0026504989196, 13902.22523539336, 11279.93784552447, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.eMin one of { 0.0, 176.61767389159772 }
this.tType == 0
this.dMin1 one of { 0.0, 2622.2873898688904 }
this.dMin2 one of { 0.0, 13169.884155532236 }
this.dN2 one of { 0.0, 20271.295045330528 }
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.splitTolerance in orig(this.work[])
this.lowerSpectra in this.work[]
this.lowerSpectra in orig(this.work[])
this.upperSpectra in this.work[]
this.upperSpectra in orig(this.work[])
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.minPivot in orig(this.work[])
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.sigma in orig(this.work[])
this.tau in this.work[]
this.realEigenvalues[] elements == this.tau
this.tau in this.realEigenvalues[]
this.tau in orig(this.work[])
this.eMin in this.work[]
this.dMin2 in this.work[]
this.eMin in orig(this.work[])
this.dMin2 in orig(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.flipIfWarranted(int, int):::EXIT;condition="return == true"
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.pingPong == this.tType
this.pingPong == orig(this.tType)
orig(n) == size(this.main[])
orig(n) == size(this.realEigenvalues[])
orig(n) == size(this.imagEigenvalues[])
orig(n) == orig(size(this.main[]))
orig(n) == orig(size(this.realEigenvalues[]))
orig(n) == orig(size(this.imagEigenvalues[]))
this.work[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20094.430077247813, 0.0, 198.12300408391457, 0.5032985539728543, 10439.913389332172, 11279.434546970497, 2583.268761038723, 2625.1197804873664, 4216.250745159982, 20.872884137751694, 925.8861564255155, 20562.657943923878, 1323.5776689804854, 0.0, 13169.884155532236, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.pingPong == 0
return == true
orig(this.work[]) one of { [0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 13904.94049602339, 11279.93784552447, 3.962537109097144, 2625.0026504989196, 20464.940196239226, 20.99001412619831, 114.64975304839034, 20447.912719222124, 0.09547165335915303, 114.74522470174949, 3.962537109097144, 13169.884155532236, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 0.0, 1323.5776689804854, 0.0, 925.8861564255155, 0.0, 4216.250745159982, 0.0, 2583.268761038723, 0.0, 10439.913389332172, 0.0, 198.12300408391457, 0.0, 20094.430077247813, 0.0, 0.5032985539728543, 0.0, 11279.434546970497, 0.0, 2625.1197804873664, 0.0, 20.872884137751694, 0.0, 20562.657943923878, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
orig(n) == 7
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.flipIfWarranted(int, int):::EXIT;condition="not(return == true)"
this.sigma == orig(this.tau)
this.work[] == orig(this.work[])
this.work[] one of { [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 13284.629380233986, 114.74522470174949, 176.61767389159772, 20447.912719222124, 20292.285059456724, 20.99001412619831, 2.7152606300295816, 2625.0026504989196, 13902.22523539336, 11279.93784552447, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.qMax == 20464.940196239226
return == false
orig(n) one of { 3, 4 }
orig(step) == 1
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getEigenvector(int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.minPivot == this.dMin
this.sigmaLow == this.dMin
this.tau == this.dMin
this.pingPong == i
this.eMin == this.dMin1
this.dMin == this.dN
this.dMin == this.g
this.dMin1 == this.dN1
this.dMin2 == this.dN2
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 12969.296828772238
this.tau == 1.418780186650953E-20
this.work has only one value
this.work[] one of { [-0.5, 7619.6570749565335, -0.5479365448346221, 6653.640746289236, 6653.640746289236, -0.23137624803899137, -0.6501073785738459, 16252.393799397427, 0.12156951217225945, 15757.052347742489, 18044.585846049256, 0.2507807804554932, -0.5096076477392393, 13749.825218769312, 0.37769050440620033, 7638.3896909531395, 7878.576588826152, 1.1768217146427349, -0.5726928964289525, 8190.090659254824, 0.24362204793355982, 2451.5431158276683, 4412.884600749099, 2.8760881099225606, -0.5339879216546664, 208.51203256567845, 0.36134777404563106, 207.68835109036132, 693.7501852900128, 0.011383174893552105, -0.5695458818737644, 6857.761025333254, -0.034133706226111955, 6591.8545798075465, 6619.010911623323, -1.1362571862864772, -0.5006635284390003, 198.02035715967918, 17205.17380388662, 198.02102068811817, 206.01040242713879, 305.2950879054272], [20789.54123048877, 7820.24440171653, 3.183169331076479E-4, 3.786867141004985E-5, 13899.634550344692, 930.3377215724533, 7.091254901045897E-14, 1.0814279227325111E-36, 12969.296828772238, 0.0, 930.3345969689944, 930.3377645544963, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.pingPong == 0
this.qMax == 20464.940196239226
this.eMin == 930.3377645544963
this.tType == -2
this.dMin == 0.0
this.dMin1 == 930.3377266858249
this.dMin2 == 7820.244040417554
this.dN == -3.009265538105056E-36
this.realEigenvalues has only one value
this.realEigenvalues[] == [20654.74511575945, 20654.74511575945, 20654.74511575945, 20654.74511575945, 7685.448286987214, 6755.11056541476, -134.7961147293172]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors[] contains no nulls and has only one value, of length 7
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[].data contains no nulls and has only one value, of length 7
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
size(this.eigenvectors[]) == 7
this.eigenvectors[this.pingPong] has only one value
this.eigenvectors[this.pingPong].data has only one value
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getEigenvector(int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.dMin
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == this.dMin
this.sigmaLow == orig(this.sigmaLow)
this.tau == this.dMin
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.pingPong == orig(i)
this.qMax == orig(this.qMax)
this.eMin == this.dMin1
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.dMin)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin1 == orig(this.dMin1)
this.dMin1 == orig(this.dN1)
this.dMin2 == this.dN2
this.dMin2 == orig(this.dMin2)
this.dMin2 == orig(this.dN2)
this.dN == orig(this.dN)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName())
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.work[]) == orig(size(this.work[]))
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 12969.296828772238
this.tau == 1.418780186650953E-20
this.work has only one value
this.work[] == [-0.5, 7619.6570749565335, -0.5479365448346221, 6653.640746289236, 6653.640746289236, -0.23137624803899137, -0.6501073785738459, 16252.393799397427, 0.12156951217225945, 15757.052347742489, 18044.585846049256, 0.2507807804554932, -0.5096076477392393, 13749.825218769312, 0.37769050440620033, 7638.3896909531395, 7878.576588826152, 1.1768217146427349, -0.5726928964289525, 8190.090659254824, 0.24362204793355982, 2451.5431158276683, 4412.884600749099, 2.8760881099225606, -0.5339879216546664, 208.51203256567845, 0.36134777404563106, 207.68835109036132, 693.7501852900128, 0.011383174893552105, -0.5695458818737644, 6857.761025333254, -0.034133706226111955, 6591.8545798075465, 6619.010911623323, -1.1362571862864772, -0.5006635284390003, 198.02035715967918, 17205.17380388662, 198.02102068811817, 206.01040242713879, 305.2950879054272]
this.pingPong == 0
this.qMax == 20464.940196239226
this.eMin == 930.3377645544963
this.tType == -2
this.dMin == 0.0
this.dMin1 == 930.3377266858249
this.dMin2 == 7820.244040417554
this.dN == -3.009265538105056E-36
this.realEigenvalues has only one value
this.realEigenvalues[] == [20654.74511575945, 20654.74511575945, 20654.74511575945, 20654.74511575945, 7685.448286987214, 6755.11056541476, -134.7961147293172]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 7
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[].data contains no nulls and has only one value, of length 7
this.cachedV == null
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.main[]) == 7
size(this.work[]) == 42
this.eigenvectors[this.pingPong] has only one value
this.eigenvectors[this.pingPong].data has only one value
orig(this.eigenvectors[i]) has only one value
orig(this.eigenvectors[i].data) has only one value
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
this.eigenvectors[] == orig(this.eigenvectors[]) (elementwise)
orig(this.eigenvectors[i]) in this.eigenvectors[]
return.getClass().getName() in this.eigenvectors[].getClass().getName()
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName()) (elementwise)
this.eigenvectors[].data == orig(this.eigenvectors[].data) (elementwise)
orig(this.eigenvectors[i].data) in this.eigenvectors[].data
return.getClass().getName() in orig(this.eigenvectors[].getClass().getName())
this.eigenvectors[this.pingPong] in orig(this.eigenvectors[])
this.eigenvectors[this.pingPong].data in orig(this.eigenvectors[].data)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalues():::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.minPivot == this.dMin
this.sigmaLow == this.dMin
this.tau == this.dMin
this.eMin == this.dMin1
this.dMin == this.dN
this.dMin == this.g
this.dMin1 == this.dN1
this.dMin2 == this.dN2
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this.transformer.cachedQ == null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.eigenvectors == null
this.cachedV == null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.minPivot in this.work[]
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.sigma in this.work[]
this.sigmaLow in this.work[]
this.tau in this.work[]
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
this.eMin in this.work[]
this.dMin in this.work[]
this.dMin1 in this.work[]
this.dMin2 in this.work[]
this.dN in this.work[]
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalues():::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == this.transformer.cachedQt
this.transformer.cachedQ == this.transformer.cachedT
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ == orig(this.transformer.cachedQt)
this.transformer.cachedQ == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.dMin
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == this.dMin
this.sigmaLow == orig(this.sigmaLow)
this.tau == this.dMin
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == this.dMin1
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.dMin)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin1 == orig(this.dMin1)
this.dMin1 == orig(this.dN1)
this.dMin2 == this.dN2
this.dMin2 == orig(this.dMin2)
this.dMin2 == orig(this.dN2)
this.dN == orig(this.dN)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == return[]
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
return[] == orig(this.realEigenvalues[])
size(this.main[]) == size(return[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == size(return[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.transformer.householderVectors[]) == orig(size(this.transformer.main[]))
size(this.transformer.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.transformer.secondary[]) == orig(size(this.transformer.main[]))-1
size(this.imagEigenvalues[]) == size(return[])
size(return[]) == orig(size(this.main[]))
size(return[]) == orig(size(this.imagEigenvalues[]))
this.transformer.householderVectors[this.pingPong] == this.transformer.householderVectors[orig(this.tType)]
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[post(this.tType)])
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[this.tType])
this.transformer.cachedQ == null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.eigenvectors == null
this.cachedV == null
size(return[]) one of { 3, 7 }
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.minPivot in this.work[]
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.sigma in this.work[]
this.sigmaLow in this.work[]
this.tau in this.work[]
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
this.eMin in this.work[]
this.dMin in this.work[]
this.dMin1 in this.work[]
this.dMin2 in this.work[]
this.dN in this.work[]
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getV():::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.main[] == this.transformer.main[]
this.secondary[] == this.transformer.secondary[]
this.transformer.cachedQt.getClass().getName() == this.cachedV.getClass().getName()
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.transformer.householderVectors[])-1
size(this.secondary[]) == size(this.transformer.main[])-1
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.secondary[] sorted by <
this.squaredSecondary[] one of { [2.0000000000000004, 6.004365899753108E-32], [17.0, 5.53633217993079], [20.000000000000004, 0.0] }
this.squaredSecondary[] sorted by >
this.lowerSpectra one of { -1.4721359549995796, -1.4142135623730951, -1.1231056256176606 }
this.upperSpectra one of { 2.414213562373095, 8.47213595499958, 16.064282096205893 }
this.minPivot one of { 4.450147717014404E-308, 3.782625559462242E-307, 4.4501477170144036E-307 }
this.sigma == 0.0
this.pingPong == 0
this.realEigenvalues[] one of { [2.0, 1.0, -1.0000000000000004], [8.0, -1.0, -1.0000000000000007], [12.0, 1.9999999999999996, 1.7763568394002505E-15] }
this.realEigenvalues[] sorted by >=
this.imagEigenvalues[] == [0.0, 0.0, 0.0]
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
size(this.main[]) == 3
size(this.work[]) == 18
size(this.eigenvectors[]) == 3
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.minPivot
this.splitTolerance > this.lowerSpectra
this.splitTolerance < this.upperSpectra
this.splitTolerance < this.minPivot
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] > this.work[] (lexically)
this.main[] >= this.work[] (lexically)
this.main[] < this.realEigenvalues[] (lexically)
this.main[] <= this.realEigenvalues[] (lexically)
this.secondary[] elements < this.upperSpectra
this.secondary[] < this.work[] (lexically)
this.secondary[] <= this.work[] (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements >= this.sigma
this.lowerSpectra < this.upperSpectra
this.lowerSpectra % this.minPivot == 0
this.lowerSpectra < this.minPivot
this.minPivot % this.lowerSpectra == 0
this.lowerSpectra < this.sigma
this.minPivot % this.upperSpectra == 0
this.upperSpectra % this.minPivot == 0
this.upperSpectra > this.minPivot
this.upperSpectra > this.sigma
this.work[] elements <= this.upperSpectra
this.sigma in this.work[]
this.imagEigenvalues[] elements == this.sigma
this.sigma in this.imagEigenvalues[]
this.work[] < this.realEigenvalues[] (lexically)
this.work[] <= this.realEigenvalues[] (lexically)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getV():::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main == orig(this.transformer.main)
this.main[] == this.transformer.main[]
this.main[] == orig(this.main[])
this.main[] == orig(this.transformer.main[])
this.secondary == orig(this.secondary)
this.secondary == orig(this.transformer.secondary)
this.secondary[] == this.transformer.secondary[]
this.secondary[] == orig(this.secondary[])
this.secondary[] == orig(this.transformer.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.cachedQ.getClass().getName() == return.getClass().getName()
this.transformer.cachedQt.getClass().getName() == return.getClass().getName()
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.tau)
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.sigma == orig(this.g)
this.work == orig(this.work)
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName())
this.cachedV == return
this.cachedV.getClass().getName() == return.getClass().getName()
this.cachedD == orig(this.transformer.cachedT)
this.cachedD == orig(this.cachedD)
this.cachedD == orig(this.cachedVt)
return.getClass().getName() == orig(this.cachedV.getClass().getName())
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.transformer.householderVectors[]))
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.transformer.householderVectors[])-1
size(this.secondary[]) == size(this.transformer.main[])-1
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.secondary[]) == orig(size(this.transformer.main[]))-1
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.work[]) == orig(size(this.work[]))
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.secondary[] sorted by <
this.squaredSecondary[] one of { [2.0000000000000004, 6.004365899753108E-32], [17.0, 5.53633217993079], [20.000000000000004, 0.0] }
this.squaredSecondary[] sorted by >
this.lowerSpectra one of { -1.4721359549995796, -1.4142135623730951, -1.1231056256176606 }
this.upperSpectra one of { 2.414213562373095, 8.47213595499958, 16.064282096205893 }
this.minPivot one of { 4.450147717014404E-308, 3.782625559462242E-307, 4.4501477170144036E-307 }
this.sigma == 0.0
this.work[] one of { [-0.5, 1.0000000000000004, -1.4142135623730945, 3.3306690738754696E-16, 3.3306690738754696E-16, -0.7071067811865476, -1.166666666666666, 8.881784197001252E-16, -0.27588834764831843, 0.666666666666667, 2.0, -1.225190383139811E-16, -0.5000000000000001, 2.0000000000000004, 0.9999999999999997, 2.0000000000000004, 2.0000000000000004, 1.0000000000000002], [-0.5, 4.000000000000001, -1.1180339887498947, 8.881784197001252E-16, 8.881784197001252E-16, -0.8944271909999159, -1.0555555555555554, 1.1102230246251565E-15, 0.0, 0.5555555555555565, 5.0, 0.0, -0.5, 6.661338147750939E-16, -1.0, 6.661338147750939E-16, 6.661338147750939E-16, -1.0], [-1.7763568394002505E-15, 2.9999999999999982, -1.3743685418725544, -4.022925783347629E-15, -4.022925783347629E-15, -0.7276068751089994, -5.13169753604517E-15, 3.9215686274509745, 0.6000000000000006, -4.243519116345047E-15, 5.6666666666666625, 1.6666666666666683, -3.6237679523765126E-15, -2.7355895326763874E-15, -0.9411764705882344, -8.881784197001252E-16, 1.4117647058823508, 3.7647058823529393] }
this.pingPong == 0
this.realEigenvalues[] one of { [2.0, 1.0, -1.0000000000000004], [8.0, -1.0, -1.0000000000000007], [12.0, 1.9999999999999996, 1.7763568394002505E-15] }
this.realEigenvalues[] sorted by >=
this.imagEigenvalues[] == [0.0, 0.0, 0.0]
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.main[]) == 3
size(this.work[]) == 18
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.minPivot
this.splitTolerance > this.lowerSpectra
this.splitTolerance < this.upperSpectra
this.splitTolerance < this.minPivot
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] > this.work[] (lexically)
this.main[] >= this.work[] (lexically)
this.main[] < this.realEigenvalues[] (lexically)
this.main[] <= this.realEigenvalues[] (lexically)
this.main[] > orig(this.work[]) (lexically)
this.main[] >= orig(this.work[]) (lexically)
this.secondary[] elements < this.upperSpectra
this.secondary[] < this.work[] (lexically)
this.secondary[] <= this.work[] (lexically)
this.secondary[] < orig(this.work[]) (lexically)
this.secondary[] <= orig(this.work[]) (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements >= this.sigma
this.squaredSecondary[] > orig(this.work[]) (lexically)
this.squaredSecondary[] >= orig(this.work[]) (lexically)
this.transformer.householderVectors.getClass().getName() != return.getClass().getName()
this.lowerSpectra < this.upperSpectra
this.lowerSpectra % this.minPivot == 0
this.lowerSpectra < this.minPivot
this.minPivot % this.lowerSpectra == 0
this.lowerSpectra < this.sigma
this.minPivot % this.upperSpectra == 0
this.upperSpectra % this.minPivot == 0
this.upperSpectra > this.minPivot
this.upperSpectra > this.sigma
this.work[] elements < this.upperSpectra
orig(this.work[]) elements <= this.upperSpectra
this.sigma in this.work[]
this.imagEigenvalues[] elements == this.sigma
this.sigma in this.imagEigenvalues[]
this.sigma in orig(this.work[])
this.work[] < this.realEigenvalues[] (lexically)
this.work[] <= this.realEigenvalues[] (lexically)
this.realEigenvalues[] > orig(this.work[]) (lexically)
this.realEigenvalues[] >= orig(this.work[]) (lexically)
this.eigenvectors.getClass().getName() != return.getClass().getName()
this.eigenvectors[] == orig(this.eigenvectors[]) (elementwise)
orig(this.eigenvectors[this.pingPong]) in this.eigenvectors[]
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName()) (elementwise)
this.eigenvectors[].data == orig(this.eigenvectors[].data) (elementwise)
orig(this.eigenvectors[this.pingPong].data) in this.eigenvectors[].data
this.eigenvectors[this.pingPong] in orig(this.eigenvectors[])
this.eigenvectors[this.pingPong].data in orig(this.eigenvectors[].data)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(int, int):::ENTER
this.realEigenvalues[] == this.imagEigenvalues[]
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main != null
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary != null
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary != null
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.work has only one value
this.work != null
this.dMin >= 0.0
this.dMin1 >= 0.0
this.dN1 >= 0.0
this.realEigenvalues has only one value
this.realEigenvalues != null
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.imagEigenvalues != null
this.eigenvectors == null
this.cachedV == null
start one of { 0, 4 }
end one of { 3, 4, 7 }
size(this.main[]) == 7
size(this.work[]) == 42
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.main[] elements > this.splitTolerance
this.squaredSecondary[] elements > this.splitTolerance
this.sigma % this.splitTolerance == 0
this.splitTolerance % this.sigma == 0
this.splitTolerance % this.tau == 0
this.tau % this.splitTolerance == 0
this.splitTolerance in this.work[]
this.eMin % this.splitTolerance == 0
this.splitTolerance % this.eMin == 0
this.dMin % this.splitTolerance == 0
this.splitTolerance % this.dMin == 0
this.splitTolerance <= this.dMin
this.dMin1 % this.splitTolerance == 0
this.splitTolerance % this.dMin1 == 0
this.splitTolerance <= this.dMin1
this.dMin2 % this.splitTolerance == 0
this.splitTolerance % this.dMin2 == 0
this.dN % this.splitTolerance == 0
this.splitTolerance % this.dN == 0
this.dN1 % this.splitTolerance == 0
this.splitTolerance % this.dN1 == 0
this.splitTolerance <= this.dN1
this.dN2 % this.splitTolerance == 0
this.splitTolerance % this.dN2 == 0
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] elements > this.minPivot
this.main[] elements > this.sigmaLow
this.main[] elements > this.g
this.main[] > this.realEigenvalues[] (elementwise)
this.secondary[] < this.squaredSecondary[] (elementwise)
this.secondary[] elements < this.upperSpectra
this.secondary[] < this.work[] (lexically)
this.secondary[] <= this.work[] (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements > this.minPivot
this.squaredSecondary[] elements > this.sigmaLow
this.squaredSecondary[] elements > this.g
this.lowerSpectra < this.sigma
this.lowerSpectra < this.tau
this.lowerSpectra in this.work[]
this.work[] elements >= this.lowerSpectra
this.lowerSpectra < this.qMax
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.lowerSpectra < this.dN
this.lowerSpectra < this.dN1
this.lowerSpectra < this.dN2
this.upperSpectra > this.sigma
this.upperSpectra > this.tau
this.upperSpectra in this.work[]
this.work[] elements <= this.upperSpectra
this.upperSpectra > this.qMax
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.upperSpectra > this.dN
this.upperSpectra > this.dN1
this.upperSpectra > this.dN2
this.minPivot % this.sigma == 0
this.sigma % this.minPivot == 0
this.minPivot % this.tau == 0
this.tau % this.minPivot == 0
this.minPivot in this.work[]
this.eMin % this.minPivot == 0
this.minPivot % this.eMin == 0
this.dMin % this.minPivot == 0
this.minPivot % this.dMin == 0
this.minPivot <= this.dMin
this.dMin1 % this.minPivot == 0
this.minPivot % this.dMin1 == 0
this.minPivot <= this.dMin1
this.dMin2 % this.minPivot == 0
this.minPivot % this.dMin2 == 0
this.dN % this.minPivot == 0
this.minPivot % this.dN == 0
this.dN1 % this.minPivot == 0
this.minPivot % this.dN1 == 0
this.minPivot <= this.dN1
this.dN2 % this.minPivot == 0
this.minPivot % this.dN2 == 0
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma >= this.tau
this.sigmaLow in this.work[]
this.sigmaLow <= this.dMin
this.sigmaLow <= this.dMin1
this.sigmaLow <= this.dN
this.sigmaLow <= this.dN1
this.realEigenvalues[] elements == this.sigmaLow
this.sigmaLow in this.realEigenvalues[]
this.eMin in this.work[]
this.dN in this.work[]
this.g in this.work[]
this.work[] > this.realEigenvalues[] (lexically)
this.work[] >= this.realEigenvalues[] (lexically)
this.pingPong < end
this.tType <= start
this.tType < end
this.dMin >= this.g
this.dMin1 >= this.g
this.dN >= this.g
this.dN1 >= this.g
this.g in this.realEigenvalues[]
this.realEigenvalues[] elements == this.g
start < end
start < size(this.secondary[])-1
start < size(this.work[])-1
end <= size(this.main[])
end != size(this.secondary[])
end != size(this.secondary[])-1
end < size(this.work[])-1
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(int, int):::EXIT1001
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.minPivot == this.dMin
this.sigma == orig(this.sigma)
this.sigmaLow == this.dMin
this.sigmaLow == orig(this.sigmaLow)
this.tau == this.dMin
this.tau == orig(this.tau)
this.qMax == orig(this.qMax)
this.eMin == this.dMin1
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.dMin)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin1 == orig(this.dMin1)
this.dMin1 == orig(this.dN1)
this.dMin2 == this.dN2
this.dMin2 == orig(this.dMin2)
this.dMin2 == orig(this.dN2)
this.dN == orig(this.dN)
return == orig(start)
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.work[] one of { [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [20789.54123048877, 7820.24440171653, 3.183169331076479E-4, 3.786867141004985E-5, 13899.634550344692, 930.3377215724533, 7.091254901045897E-14, 1.0814279227325111E-36, 12969.296828772238, 0.0, 930.3345969689944, 930.3377645544963, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.pingPong == 1
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
return one of { 0, 4 }
orig(this.work[]) one of { [7820.244040417554, 7820.244358734487, 3.183169331076479E-4, 3.786867141004985E-5, 930.3377645544963, 930.337726685825, 7.091254901045897E-14, 1.0814279227325111E-36, 1.418780186650953E-20, 0.0, 930.3345969689944, 930.3377645544963, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
orig(end) one of { 3, 7 }
this.sigma in this.work[]
this.tau in this.work[]
this.realEigenvalues[] elements == this.tau
this.tau in this.realEigenvalues[]
this.tau in orig(this.work[])
this.dMin in this.work[]
this.dMin1 in this.work[]
this.dMin2 in this.work[]
this.eMin in orig(this.work[])
this.dMin in this.realEigenvalues[]
this.realEigenvalues[] elements == this.dMin
this.dMin in orig(this.work[])
this.dMin1 in orig(this.work[])
this.dMin2 in orig(this.work[])
this.dN in this.realEigenvalues[]
this.realEigenvalues[] elements == this.dN
this.dN in orig(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(int, int):::EXIT1084
this.qMax == orig(this.qMax)
this.dMin2 == this.dN2
return == orig(end)
orig(this.dMin2) == orig(this.dN2)
return == 3
orig(start) == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= orig(this.tau)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < orig(this.eMin)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < orig(this.dMin)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < orig(this.dMin1)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < orig(this.dMin2)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < orig(this.dN)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < orig(this.dN1)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < orig(this.eMin)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < orig(this.dMin)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < orig(this.dMin1)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < orig(this.dMin2)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < orig(this.dN)
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < orig(this.dN1)
this.splitTolerance < this.sigma
this.splitTolerance < this.tau
this.splitTolerance < this.eMin
this.splitTolerance < this.dMin
this.splitTolerance < this.dMin1
this.splitTolerance < this.dMin2
this.splitTolerance < this.dN
this.splitTolerance < this.dN1
this.splitTolerance < orig(this.eMin)
this.splitTolerance < orig(this.dMin)
this.splitTolerance < orig(this.dMin1)
this.splitTolerance < orig(this.dMin2)
this.splitTolerance < orig(this.dN)
this.splitTolerance < orig(this.dN1)
this.secondary[] elements < this.sigma
this.squaredSecondary[] elements > this.dMin
this.squaredSecondary[] elements > this.dMin1
this.squaredSecondary[] elements > this.dN
this.squaredSecondary[] elements > this.dN1
this.minPivot < this.sigma
this.minPivot < this.tau
this.minPivot < this.eMin
this.minPivot < this.dMin
this.minPivot < this.dMin1
this.minPivot < this.dMin2
this.minPivot < this.dN
this.minPivot < this.dN1
this.minPivot < orig(this.eMin)
this.minPivot < orig(this.dMin)
this.minPivot < orig(this.dMin1)
this.minPivot < orig(this.dMin2)
this.minPivot < orig(this.dN)
this.minPivot < orig(this.dN1)
this.sigma > this.sigmaLow
this.sigmaLow % this.sigma == 0
this.sigma != this.eMin
this.sigma > this.dMin
this.sigma > this.dMin1
this.sigma > this.dMin2
this.sigma > this.dN
this.sigma > this.dN1
this.sigma > this.g
orig(this.sigmaLow) % this.sigma == 0
this.sigma > orig(this.sigmaLow)
this.sigma > orig(this.tau)
this.sigma != orig(this.eMin)
this.sigma != orig(this.dMin)
this.sigma != orig(this.dMin1)
this.sigma != orig(this.dMin2)
this.sigma != orig(this.dN)
this.sigma != orig(this.dN1)
this.sigmaLow % this.tau == 0
this.sigmaLow < this.tau
this.sigmaLow % this.eMin == 0
this.sigmaLow < this.eMin
this.sigmaLow % this.dMin == 0
this.sigmaLow < this.dMin
this.sigmaLow % this.dMin1 == 0
this.sigmaLow < this.dMin1
this.sigmaLow % this.dMin2 == 0
this.sigmaLow < this.dMin2
this.sigmaLow % this.dN == 0
this.sigmaLow < this.dN
this.sigmaLow % this.dN1 == 0
this.sigmaLow < this.dN1
this.sigmaLow % orig(this.eMin) == 0
this.sigmaLow < orig(this.eMin)
this.sigmaLow % orig(this.dMin) == 0
this.sigmaLow < orig(this.dMin)
this.sigmaLow % orig(this.dMin1) == 0
this.sigmaLow < orig(this.dMin1)
this.sigmaLow % orig(this.dMin2) == 0
this.sigmaLow < orig(this.dMin2)
this.sigmaLow % orig(this.dN) == 0
this.sigmaLow < orig(this.dN)
this.sigmaLow % orig(this.dN1) == 0
this.sigmaLow < orig(this.dN1)
this.tau < this.eMin
this.tau != this.dMin
this.tau != this.dMin1
this.tau != this.dMin2
this.tau != this.dN
this.tau != this.dN1
this.tau > this.g
this.tau != orig(this.sigma)
orig(this.sigmaLow) % this.tau == 0
this.tau > orig(this.sigmaLow)
this.tau != orig(this.tau)
this.tau < orig(this.eMin)
this.tau < orig(this.dMin1)
this.tau < orig(this.dMin2)
this.tau <= orig(this.dN)
this.tau < orig(this.dN1)
this.pingPong > this.tType
this.pingPong < return
this.pingPong >= orig(start)
this.eMin > this.dMin
this.eMin >= this.dMin1
this.eMin != this.dMin2
this.eMin != this.dN
this.eMin >= this.dN1
this.eMin > this.g
this.eMin != orig(this.sigma)
orig(this.sigmaLow) % this.eMin == 0
this.eMin > orig(this.sigmaLow)
this.eMin != orig(this.tau)
this.eMin in orig(this.work[])
this.eMin != orig(this.eMin)
this.eMin > orig(this.dMin)
this.eMin > orig(this.dMin1)
this.eMin != orig(this.dMin2)
this.eMin != orig(this.dN)
this.eMin > orig(this.dN1)
this.tType < orig(start)
this.dMin != orig(this.sigma)
orig(this.sigmaLow) % this.dMin == 0
this.dMin != orig(this.sigmaLow)
this.dMin != orig(this.tau)
this.dMin < orig(this.eMin)
this.dMin < orig(this.dMin)
this.dMin < orig(this.dMin1)
this.dMin < orig(this.dMin2)
this.dMin < orig(this.dN)
this.dMin < orig(this.dN1)
this.dMin1 != this.dN
this.dMin1 > this.g
this.dMin1 != orig(this.sigma)
orig(this.sigmaLow) % this.dMin1 == 0
this.dMin1 > orig(this.sigmaLow)
this.dMin1 != orig(this.tau)
this.dMin1 != orig(this.eMin)
this.dMin1 != orig(this.dMin)
this.dMin1 != orig(this.dMin1)
this.dMin1 < orig(this.dMin2)
this.dMin1 != orig(this.dN)
this.dMin1 != orig(this.dN1)
this.dMin2 != this.dN
this.dMin2 != this.dN1
this.dMin2 > this.g
this.dMin2 != orig(this.sigma)
orig(this.sigmaLow) % this.dMin2 == 0
this.dMin2 > orig(this.sigmaLow)
this.dMin2 != orig(this.tau)
this.dMin2 != orig(this.eMin)
this.dMin2 != orig(this.dMin)
this.dMin2 != orig(this.dMin1)
this.dMin2 != orig(this.dN)
this.dMin2 != orig(this.dN1)
this.dN != this.dN1
this.dN != orig(this.sigma)
orig(this.sigmaLow) % this.dN == 0
this.dN != orig(this.sigmaLow)
this.dN != orig(this.tau)
this.dN < orig(this.eMin)
this.dN != orig(this.dMin)
this.dN != orig(this.dMin1)
this.dN != orig(this.dMin2)
this.dN < orig(this.dN)
this.dN != orig(this.dN1)
this.dN1 > this.g
this.dN1 != orig(this.sigma)
orig(this.sigmaLow) % this.dN1 == 0
this.dN1 > orig(this.sigmaLow)
this.dN1 != orig(this.tau)
this.dN1 != orig(this.eMin)
this.dN1 != orig(this.dMin)
this.dN1 != orig(this.dMin1)
this.dN1 < orig(this.dMin2)
this.dN1 != orig(this.dN)
this.dN1 != orig(this.dN1)
this.g < orig(this.eMin)
this.g < orig(this.dMin)
this.g < orig(this.dMin1)
this.g < orig(this.dMin2)
this.g < orig(this.dN)
this.g < orig(this.dN1)
orig(this.sigma) != orig(this.eMin)
orig(this.sigma) != orig(this.dMin)
orig(this.sigma) != orig(this.dMin1)
orig(this.sigma) != orig(this.dMin2)
orig(this.sigma) != orig(this.dN)
orig(this.sigma) != orig(this.dN1)
orig(this.sigmaLow) % orig(this.eMin) == 0
orig(this.sigmaLow) < orig(this.eMin)
orig(this.sigmaLow) % orig(this.dMin) == 0
orig(this.sigmaLow) < orig(this.dMin)
orig(this.sigmaLow) % orig(this.dMin1) == 0
orig(this.sigmaLow) < orig(this.dMin1)
orig(this.sigmaLow) % orig(this.dMin2) == 0
orig(this.sigmaLow) < orig(this.dMin2)
orig(this.sigmaLow) % orig(this.dN) == 0
orig(this.sigmaLow) < orig(this.dN)
orig(this.sigmaLow) % orig(this.dN1) == 0
orig(this.sigmaLow) < orig(this.dN1)
orig(this.tau) < orig(this.eMin)
orig(this.tau) != orig(this.dMin)
orig(this.tau) != orig(this.dMin1)
orig(this.tau) != orig(this.dMin2)
orig(this.tau) != orig(this.dN)
orig(this.tau) != orig(this.dN1)
orig(this.eMin) > orig(this.dMin)
orig(this.eMin) > orig(this.dMin1)
orig(this.eMin) != orig(this.dMin2)
orig(this.eMin) != orig(this.dN)
orig(this.eMin) > orig(this.dN1)
orig(this.dMin1) != orig(this.dN)
orig(this.dMin2) != orig(this.dN)
orig(this.dMin2) != orig(this.dN1)
orig(this.dN) != orig(this.dN1)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(int, int):::EXIT1093
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.minPivot == this.dMin
this.sigma == orig(this.sigma)
this.sigmaLow == this.dMin
this.sigmaLow == orig(this.sigmaLow)
this.tau == this.dMin
this.tau == orig(this.dMin)
this.tau == orig(this.dN)
this.pingPong == orig(start)
this.qMax == orig(this.qMax)
this.eMin == this.dMin1
this.eMin == orig(this.eMin)
this.eMin == orig(this.dMin1)
this.tType == orig(this.tType)
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.sigmaLow)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin1 == orig(this.eMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == this.dN2
this.dMin2 == orig(this.dMin2)
return == orig(end)
orig(this.eMin) == orig(this.dMin1)
orig(this.dMin1) == orig(this.dN1)
orig(this.dMin2) == orig(this.dN2)
this.sigma == 12969.296828772238
this.tau == 1.418780186650953E-20
this.work[] == [7820.244040417554, 7820.244358734487, 3.183169331076479E-4, 3.786867141004985E-5, 930.3377645544963, 930.337726685825, 7.091254901045897E-14, 1.0814279227325111E-36, 1.418780186650953E-20, 0.0, 930.3345969689944, 930.3377645544963, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.eMin == 930.3377645544963
this.tType == -2
this.dMin == 0.0
this.dMin1 == 930.3377266858249
this.dMin2 == 7820.244040417554
this.dN == -3.009265538105056E-36
return == 3
orig(this.tau) == 1.8925376768665194E-8
orig(this.work[]) == [7820.244040417554, 7820.241364715178, 3.183169331076479E-4, 0.00267572130200167, 930.3377645544963, 930.3345969689944, 7.091254901045897E-14, 0.003485921360300919, 1.418780186650953E-20, 1.892544768122839E-8, 930.3345969689944, 908.3324734753162, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
orig(this.eMin) == 930.3345969689944
orig(this.dMin1) == 930.334278633136
orig(this.dMin2) == 7820.241364696252
this.tau in this.work[]
this.realEigenvalues[] elements == this.tau
this.tau in this.realEigenvalues[]
this.tau in orig(this.work[])
this.dMin in this.work[]
this.dMin1 in this.work[]
this.dMin2 in this.work[]
orig(this.dMin1) in this.work[]
orig(this.dMin2) in this.work[]
this.eMin in orig(this.work[])
this.dMin in this.realEigenvalues[]
this.realEigenvalues[] elements == this.dMin
this.dMin in orig(this.work[])
this.dMin1 in orig(this.work[])
this.dMin2 in orig(this.work[])
this.dN in this.realEigenvalues[]
this.realEigenvalues[] elements == this.dN
this.dN in orig(this.work[])
orig(this.tau) in orig(this.work[])
orig(this.dMin1) in orig(this.work[])
orig(this.dMin2) in orig(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(int, int):::EXIT1121
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.tau)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dN)
this.sigma == orig(this.g)
this.tType == orig(this.tType)
orig(this.dMin1) == orig(this.dN1)
this.sigma == 0.0
this.work[] one of { [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 13284.629380233986, 114.74522470174949, 176.61767389159772, 20447.912719222124, 20292.285059456724, 20.99001412619831, 2.7152606300295816, 2625.0026504989196, 13902.22523539336, 11279.93784552447, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13461.247054125584, 13284.629380233986, 266.24399438891925, 176.61767389159772, 20028.756325697832, 20292.285059456724, 1.884698392532474, 2.7152606300295816, 13900.340537000828, 13902.22523539336, 20292.285059456724, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.eMin one of { 0.0, 176.61767389159772, 20292.285059456724 }
this.tType == 0
this.dMin one of { 0.0, 13284.629380233986 }
this.dMin1 one of { 0.0, 2622.2873898688904, 13284.629380233986 }
this.dMin2 one of { 0.0, 13169.884155532236, 13284.629380233986 }
this.dN one of { 0.0, 13900.340537000828 }
this.dN1 one of { 0.0, 2622.2873898688904, 20026.041065067802 }
this.dN2 one of { 0.0, 13284.629380233986, 20271.295045330528 }
return one of { 3, 4, 7 }
orig(this.work[]) one of { [0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 13904.94049602339, 11279.93784552447, 3.962537109097144, 2625.0026504989196, 20464.940196239226, 20.99001412619831, 114.64975304839034, 20447.912719222124, 0.09547165335915303, 114.74522470174949, 3.962537109097144, 13169.884155532236, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 3.962537109097144, 114.74522470174949, 0.09547165335915303, 20447.912719222124, 114.64975304839034, 20.99001412619831, 20464.940196239226, 2625.0026504989196, 3.962537109097144, 11279.93784552447, 13904.94049602339, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272], [13169.884155532236, 13284.629380233986, 114.74522470174949, 176.61767389159772, 20447.912719222124, 20292.285059456724, 20.99001412619831, 2.7152606300295816, 2625.0026504989196, 13902.22523539336, 11279.93784552447, 0.0, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
orig(this.eMin) one of { 0.0, 176.61767389159772 }
orig(this.dMin1) one of { 0.0, 2622.2873898688904 }
orig(this.dMin2) one of { 0.0, 13169.884155532236 }
orig(this.dN2) one of { 0.0, 20271.295045330528 }
orig(end) one of { 4, 7 }
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.sigma in orig(this.work[])
this.dMin in this.work[]
this.dMin2 in this.work[]
this.dMin in orig(this.work[])
this.dMin2 in orig(this.work[])
orig(this.dMin2) in orig(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(int, int):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.g == orig(this.sigmaLow)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.work[]) == orig(size(this.work[]))
this.main has only one value
this.main != null
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary != null
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary != null
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.work has only one value
this.work != null
this.qMax == 20464.940196239226
this.dMin >= 0.0
this.realEigenvalues has only one value
this.realEigenvalues != null
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.imagEigenvalues != null
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.main[] elements > this.splitTolerance
this.squaredSecondary[] elements > this.splitTolerance
this.sigma % this.splitTolerance == 0
this.splitTolerance % this.sigma == 0
this.splitTolerance % this.tau == 0
this.tau % this.splitTolerance == 0
this.splitTolerance in this.work[]
this.eMin % this.splitTolerance == 0
this.splitTolerance % this.eMin == 0
this.dMin % this.splitTolerance == 0
this.splitTolerance % this.dMin == 0
this.splitTolerance <= this.dMin
this.dMin1 % this.splitTolerance == 0
this.splitTolerance % this.dMin1 == 0
this.splitTolerance <= this.dMin1
this.dMin2 % this.splitTolerance == 0
this.splitTolerance % this.dMin2 == 0
this.dN % this.splitTolerance == 0
this.splitTolerance % this.dN == 0
this.dN1 % this.splitTolerance == 0
this.splitTolerance % this.dN1 == 0
this.splitTolerance <= this.dN1
this.dN2 % this.splitTolerance == 0
this.splitTolerance % this.dN2 == 0
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
orig(this.sigma) % this.splitTolerance == 0
this.splitTolerance % orig(this.sigma) == 0
this.splitTolerance <= orig(this.sigma)
orig(this.tau) % this.splitTolerance == 0
this.splitTolerance % orig(this.tau) == 0
this.splitTolerance <= orig(this.tau)
this.splitTolerance in orig(this.work[])
this.splitTolerance <= orig(this.qMax)
orig(this.eMin) % this.splitTolerance == 0
this.splitTolerance % orig(this.eMin) == 0
this.splitTolerance <= orig(this.eMin)
orig(this.dMin) % this.splitTolerance == 0
this.splitTolerance % orig(this.dMin) == 0
this.splitTolerance <= orig(this.dMin)
orig(this.dMin1) % this.splitTolerance == 0
this.splitTolerance % orig(this.dMin1) == 0
this.splitTolerance <= orig(this.dMin1)
orig(this.dMin2) % this.splitTolerance == 0
this.splitTolerance % orig(this.dMin2) == 0
this.splitTolerance <= orig(this.dMin2)
orig(this.dN) % this.splitTolerance == 0
this.splitTolerance % orig(this.dN) == 0
orig(this.dN1) % this.splitTolerance == 0
this.splitTolerance % orig(this.dN1) == 0
this.splitTolerance <= orig(this.dN1)
orig(this.dN2) % this.splitTolerance == 0
this.splitTolerance % orig(this.dN2) == 0
this.splitTolerance <= orig(this.dN2)
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] elements > this.minPivot
this.main[] elements > this.sigmaLow
this.main[] elements < this.qMax
this.main[] elements > this.g
this.main[] > this.realEigenvalues[] (elementwise)
this.main[] elements > orig(this.sigmaLow)
this.secondary[] < this.squaredSecondary[] (elementwise)
this.secondary[] elements < this.upperSpectra
this.secondary[] < this.work[] (lexically)
this.secondary[] <= this.work[] (lexically)
this.secondary[] elements < this.qMax
this.secondary[] < orig(this.work[]) (lexically)
this.secondary[] <= orig(this.work[]) (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements > this.minPivot
this.squaredSecondary[] elements > this.sigmaLow
this.squaredSecondary[] elements > this.g
this.squaredSecondary[] elements > orig(this.sigmaLow)
this.squaredSecondary[] > orig(this.work[]) (lexically)
this.squaredSecondary[] >= orig(this.work[]) (lexically)
this.lowerSpectra < this.sigma
this.lowerSpectra < this.tau
this.lowerSpectra in this.work[]
this.work[] elements >= this.lowerSpectra
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.lowerSpectra < this.dN
this.lowerSpectra < this.dN1
this.lowerSpectra < this.dN2
this.lowerSpectra < orig(this.sigma)
this.lowerSpectra < orig(this.tau)
orig(this.work[]) elements >= this.lowerSpectra
this.lowerSpectra in orig(this.work[])
this.lowerSpectra < orig(this.qMax)
this.lowerSpectra < orig(this.eMin)
this.lowerSpectra < orig(this.dMin)
this.lowerSpectra < orig(this.dMin1)
this.lowerSpectra < orig(this.dMin2)
this.lowerSpectra < orig(this.dN)
this.lowerSpectra < orig(this.dN1)
this.lowerSpectra < orig(this.dN2)
this.upperSpectra > this.sigma
this.upperSpectra > this.tau
this.upperSpectra in this.work[]
this.work[] elements <= this.upperSpectra
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.upperSpectra > this.dN
this.upperSpectra > this.dN1
this.upperSpectra > this.dN2
this.upperSpectra > orig(this.sigma)
this.upperSpectra > orig(this.tau)
orig(this.work[]) elements <= this.upperSpectra
this.upperSpectra in orig(this.work[])
this.upperSpectra > orig(this.qMax)
this.upperSpectra > orig(this.eMin)
this.upperSpectra > orig(this.dMin)
this.upperSpectra > orig(this.dMin1)
this.upperSpectra > orig(this.dMin2)
this.upperSpectra > orig(this.dN)
this.upperSpectra > orig(this.dN1)
this.upperSpectra > orig(this.dN2)
this.minPivot % this.sigma == 0
this.sigma % this.minPivot == 0
this.minPivot % this.tau == 0
this.tau % this.minPivot == 0
this.minPivot in this.work[]
this.eMin % this.minPivot == 0
this.minPivot % this.eMin == 0
this.dMin % this.minPivot == 0
this.minPivot % this.dMin == 0
this.minPivot <= this.dMin
this.dMin1 % this.minPivot == 0
this.minPivot % this.dMin1 == 0
this.minPivot <= this.dMin1
this.dMin2 % this.minPivot == 0
this.minPivot % this.dMin2 == 0
this.dN % this.minPivot == 0
this.minPivot % this.dN == 0
this.dN1 % this.minPivot == 0
this.minPivot % this.dN1 == 0
this.minPivot <= this.dN1
this.dN2 % this.minPivot == 0
this.minPivot % this.dN2 == 0
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
orig(this.sigma) % this.minPivot == 0
this.minPivot % orig(this.sigma) == 0
this.minPivot <= orig(this.sigma)
orig(this.tau) % this.minPivot == 0
this.minPivot % orig(this.tau) == 0
this.minPivot <= orig(this.tau)
this.minPivot in orig(this.work[])
this.minPivot <= orig(this.qMax)
orig(this.eMin) % this.minPivot == 0
this.minPivot % orig(this.eMin) == 0
this.minPivot <= orig(this.eMin)
orig(this.dMin) % this.minPivot == 0
this.minPivot % orig(this.dMin) == 0
this.minPivot <= orig(this.dMin)
orig(this.dMin1) % this.minPivot == 0
this.minPivot % orig(this.dMin1) == 0
this.minPivot <= orig(this.dMin1)
orig(this.dMin2) % this.minPivot == 0
this.minPivot % orig(this.dMin2) == 0
this.minPivot <= orig(this.dMin2)
orig(this.dN) % this.minPivot == 0
this.minPivot % orig(this.dN) == 0
orig(this.dN1) % this.minPivot == 0
this.minPivot % orig(this.dN1) == 0
this.minPivot <= orig(this.dN1)
orig(this.dN2) % this.minPivot == 0
this.minPivot % orig(this.dN2) == 0
this.minPivot <= orig(this.dN2)
this.sigma >= this.tau
this.sigma < this.qMax
this.sigma >= orig(this.sigma)
this.sigma >= orig(this.sigmaLow)
this.sigma >= orig(this.tau)
this.sigma <= orig(this.qMax)
this.sigmaLow in this.work[]
this.sigmaLow <= this.dMin
this.sigmaLow <= this.dMin1
this.sigmaLow <= this.dN
this.sigmaLow <= this.dN1
this.realEigenvalues[] elements == this.sigmaLow
this.sigmaLow in this.realEigenvalues[]
this.sigmaLow <= orig(this.sigma)
this.sigmaLow <= orig(this.tau)
this.sigmaLow in orig(this.work[])
this.sigmaLow <= orig(this.qMax)
this.sigmaLow <= orig(this.eMin)
this.sigmaLow <= orig(this.dMin)
this.sigmaLow <= orig(this.dMin1)
this.sigmaLow <= orig(this.dMin2)
this.sigmaLow <= orig(this.dN)
this.sigmaLow <= orig(this.dN1)
this.sigmaLow <= orig(this.dN2)
this.tau < this.qMax
this.tau >= orig(this.sigmaLow)
this.tau <= orig(this.qMax)
this.tau <= orig(this.eMin)
this.tau <= orig(this.dMin)
this.tau <= orig(this.dMin1)
this.tau <= orig(this.dMin2)
this.tau <= orig(this.dN1)
this.tau <= orig(this.dN2)
this.eMin in this.work[]
this.dN in this.work[]
this.g in this.work[]
this.work[] > this.realEigenvalues[] (lexically)
this.work[] >= this.realEigenvalues[] (lexically)
orig(this.sigmaLow) in this.work[]
orig(this.eMin) in this.work[]
orig(this.dN) in this.work[]
this.pingPong != return
this.pingPong >= orig(this.tType)
this.pingPong < orig(end)
this.qMax > this.eMin
this.qMax > this.dMin
this.qMax > this.dMin1
this.qMax > this.dMin2
this.qMax > this.dN
this.qMax > this.dN1
this.qMax > this.dN2
this.qMax > orig(this.sigma)
this.qMax > orig(this.tau)
this.qMax >= orig(this.qMax)
this.qMax > orig(this.eMin)
this.qMax > orig(this.dMin)
this.qMax > orig(this.dMin1)
this.qMax > orig(this.dMin2)
this.qMax > orig(this.dN)
this.qMax > orig(this.dN1)
this.qMax > orig(this.dN2)
this.eMin >= orig(this.sigmaLow)
this.eMin <= orig(this.qMax)
this.eMin >= orig(this.dMin)
this.eMin >= orig(this.dMin1)
this.eMin >= orig(this.dN1)
this.tType < return
this.tType <= orig(start)
this.tType < orig(end)
this.dMin >= this.g
this.dMin <= orig(this.qMax)
this.dMin <= orig(this.dN2)
this.dMin1 >= this.g
this.dMin1 >= orig(this.sigmaLow)
this.dMin1 <= orig(this.qMax)
this.dMin2 >= orig(this.sigmaLow)
this.dMin2 <= orig(this.qMax)
this.dN >= this.g
this.dN <= orig(this.qMax)
this.dN1 >= this.g
this.dN1 >= orig(this.sigmaLow)
this.dN1 <= orig(this.qMax)
this.dN2 >= orig(this.sigmaLow)
this.dN2 <= orig(this.qMax)
this.g in this.realEigenvalues[]
this.realEigenvalues[] elements == this.g
this.g <= orig(this.sigma)
this.g <= orig(this.tau)
this.g in orig(this.work[])
this.g <= orig(this.qMax)
this.g <= orig(this.eMin)
this.g <= orig(this.dMin)
this.g <= orig(this.dMin1)
this.g <= orig(this.dMin2)
this.g <= orig(this.dN)
this.g <= orig(this.dN1)
this.g <= orig(this.dN2)
orig(this.sigmaLow) in this.realEigenvalues[]
this.realEigenvalues[] elements == orig(this.sigmaLow)
this.realEigenvalues[] < orig(this.work[]) (lexically)
this.realEigenvalues[] <= orig(this.work[]) (lexically)
return > orig(this.tType)
return >= orig(start)
return <= orig(end)
return <= size(this.main[])
return != size(this.secondary[])
return != size(this.secondary[])-1
return < size(this.work[])-1
orig(this.tType) < size(this.secondary[])-1
orig(this.tType) < size(this.work[])-1
orig(start) < size(this.secondary[])-1
orig(start) < size(this.work[])-1
orig(end) <= size(this.main[])
orig(end) != size(this.secondary[])
orig(end) != size(this.secondary[])-1
orig(end) < size(this.work[])-1
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.initialSplits(int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.realEigenvalues[] == this.imagEigenvalues[]
n == size(this.main[])
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.tau == 1.6006892232545997E-11
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20094.430077247813, 0.0, 198.12300408391457, 0.5032985539728543, 10439.913389332172, 11279.434546970497, 2583.268761038723, 2625.1197804873664, 4216.250745159982, 20.872884137751694, 925.8861564255155, 20562.657943923878, 1323.5776689804854, 0.0, 13169.884155532236, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.tau in this.work[]
this.realEigenvalues[] elements == this.tau
this.tau in this.realEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.initialSplits(int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.sigma == orig(this.g)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
orig(n) == size(this.main[])
orig(n) == size(this.realEigenvalues[])
orig(n) == size(this.imagEigenvalues[])
orig(n) == orig(size(this.realEigenvalues[]))
orig(n) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.work[]) == orig(size(this.work[]))
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.tau == 1.6006892232545997E-11
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 13904.94049602339, 11279.93784552447, 3.962537109097144, 2625.0026504989196, 20464.940196239226, 20.99001412619831, 114.64975304839034, 20447.912719222124, 0.09547165335915303, 114.74522470174949, 0.0, 13169.884155532236, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
orig(n) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.splitTolerance in orig(this.work[])
this.lowerSpectra in this.work[]
this.lowerSpectra in orig(this.work[])
this.upperSpectra in this.work[]
this.upperSpectra in orig(this.work[])
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.minPivot in orig(this.work[])
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.sigma in orig(this.work[])
this.tau in this.work[]
this.realEigenvalues[] elements == this.tau
this.tau in this.realEigenvalues[]
this.tau in orig(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.splitTolerance
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.splitTolerance
this.splitTolerance == this.lowerSpectra
this.splitTolerance == this.upperSpectra
this.splitTolerance == this.minPivot
this.splitTolerance == this.sigma
this.splitTolerance == this.sigmaLow
this.splitTolerance == this.tau
this.splitTolerance == this.qMax
this.splitTolerance == this.eMin
this.splitTolerance == this.dMin
this.splitTolerance == this.dMin1
this.splitTolerance == this.dMin2
this.splitTolerance == this.dN
this.splitTolerance == this.dN1
this.splitTolerance == this.dN2
this.main == this.secondary
this.main == this.squaredSecondary
this.main == this.work
this.main == this.realEigenvalues
this.main == this.imagEigenvalues
this.pingPong == this.tType
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.main == null
this.transformer == null
this.pingPong == 0
this.eigenvectors == null
this.cachedV == null
matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT227
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT227;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.splitTolerance
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.splitTolerance
this.splitTolerance == this.lowerSpectra
this.splitTolerance == this.upperSpectra
this.splitTolerance == this.minPivot
this.splitTolerance == this.sigma
this.splitTolerance == this.sigmaLow
this.splitTolerance == this.tau
this.splitTolerance == this.qMax
this.splitTolerance == this.eMin
this.splitTolerance == this.dMin
this.splitTolerance == this.dMin1
this.splitTolerance == this.dMin2
this.splitTolerance == this.dN
this.splitTolerance == this.dN1
this.splitTolerance == this.dN2
this.splitTolerance == orig(this.splitTolerance)
this.splitTolerance == orig(this.lowerSpectra)
this.splitTolerance == orig(this.upperSpectra)
this.splitTolerance == orig(this.minPivot)
this.splitTolerance == orig(this.sigma)
this.splitTolerance == orig(this.sigmaLow)
this.splitTolerance == orig(this.tau)
this.splitTolerance == orig(this.qMax)
this.splitTolerance == orig(this.eMin)
this.splitTolerance == orig(this.dMin)
this.splitTolerance == orig(this.dMin1)
this.splitTolerance == orig(this.dMin2)
this.splitTolerance == orig(this.dN)
this.splitTolerance == orig(this.dN1)
this.splitTolerance == orig(this.dN2)
this.splitTolerance == orig(this.g)
this.main == this.secondary
this.main == this.squaredSecondary
this.main == this.work
this.main == this.realEigenvalues
this.main == this.imagEigenvalues
this.main == orig(this.main)
this.main == orig(this.secondary)
this.main == orig(this.squaredSecondary)
this.main == orig(this.work)
this.main == orig(this.realEigenvalues)
this.main == orig(this.imagEigenvalues)
this.transformer == orig(this.transformer)
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
this.main == null
this.transformer == null
this.pingPong == 0
this.eigenvectors == null
this.cachedV == null
return == true
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.ldlTDecomposition(double, int, int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.pingPong == index
this.realEigenvalues[] == this.imagEigenvalues[]
n == size(this.main[])
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.tau == 1.6006892232545997E-11
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
lambda == 20654.74511575945
size(this.main[]) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.tau in this.work[]
this.realEigenvalues[] elements == this.tau
this.tau in this.realEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.ldlTDecomposition(double, int, int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.sigma == orig(this.g)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.pingPong == orig(index)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
orig(n) == size(this.main[])
orig(n) == size(this.realEigenvalues[])
orig(n) == size(this.imagEigenvalues[])
orig(n) == orig(size(this.realEigenvalues[]))
orig(n) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.work[]) == orig(size(this.work[]))
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.tau == 1.6006892232545997E-11
this.work has only one value
this.work[] == [13169.884155532236, 0.0, 1323.5776689804854, 0.0, 925.8861564255155, 0.0, 4216.250745159982, 0.0, 2583.268761038723, 0.0, 10439.913389332172, 0.0, 198.12300408391457, 0.0, 20094.430077247813, 0.0, 0.5032985539728543, 0.0, 11279.434546970497, 0.0, 2625.1197804873664, 0.0, 20.872884137751694, 0.0, 20562.657943923878, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
orig(n) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.splitTolerance in orig(this.work[])
this.lowerSpectra in this.work[]
this.lowerSpectra in orig(this.work[])
this.upperSpectra in this.work[]
this.upperSpectra in orig(this.work[])
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.minPivot in orig(this.work[])
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.sigma in orig(this.work[])
this.tau in this.work[]
this.realEigenvalues[] elements == this.tau
this.tau in this.realEigenvalues[]
this.tau in orig(this.work[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.process1RowBlock(int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.main[] == this.transformer.main[]
this.secondary[] == this.transformer.secondary[]
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQt == this.cachedV
this.transformer.cachedT == this.cachedV
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
index == size(this.secondary[])
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.transformer.householderVectors[])-1
size(this.secondary[]) == size(this.transformer.main[])-1
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [3.0, 3.9999999999999996, -1.0]
this.main[] elements one of { -1.0, 3.0, 3.9999999999999996 }
this.secondary has only one value
this.secondary[] == [-4.47213595499958, 0.0]
this.secondary[] elements one of { -4.47213595499958, 0.0 }
this.squaredSecondary has only one value
this.squaredSecondary[] == [20.000000000000004, 0.0]
this.squaredSecondary[] elements one of { 0.0, 20.000000000000004 }
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 3
this.lowerSpectra == -1.4721359549995796
this.upperSpectra == 8.47213595499958
this.minPivot == 4.4501477170144036E-307
this.sigma == 0.0
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4721359549995796, -0.47213595499958005, -1.0, 7.47213595499958, 8.47213595499958, -1.0]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [8.0, -1.0000000000000007, 0.0]
this.realEigenvalues[] elements one of { -1.0000000000000007, 0.0, 8.0 }
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0]
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 3
size(this.work[]) == 18
this.transformer.householderVectors[this.pingPong] has only one value
this.transformer.householderVectors[index] has only one value
this.transformer.householderVectors[index-1] has only one value
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.secondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.squaredSecondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.secondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.squaredSecondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.splitTolerance in this.secondary[]
this.splitTolerance in this.squaredSecondary[]
this.splitTolerance in this.work[]
this.splitTolerance in this.realEigenvalues[]
this.minPivot in this.secondary[]
this.sigma in this.secondary[]
this.minPivot in this.squaredSecondary[]
this.sigma in this.squaredSecondary[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.sigma in this.work[]
this.sigma in this.realEigenvalues[]
this.imagEigenvalues[] elements == this.sigma
this.sigma in this.imagEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.process1RowBlock(int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main == orig(this.transformer.main)
this.main[] == this.transformer.main[]
this.main[] == orig(this.main[])
this.main[] == orig(this.transformer.main[])
this.secondary == orig(this.secondary)
this.secondary == orig(this.transformer.secondary)
this.secondary[] == this.transformer.secondary[]
this.secondary[] == orig(this.secondary[])
this.secondary[] == orig(this.transformer.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQt == this.cachedV
this.transformer.cachedT == this.cachedV
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.tau)
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.sigma == orig(this.g)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.transformer.cachedQ)
this.cachedV == orig(this.transformer.cachedQt)
this.cachedV == orig(this.transformer.cachedT)
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
orig(index) == size(this.main[])-1
orig(index) == size(this.secondary[])
orig(index) == size(this.squaredSecondary[])
orig(index) == size(this.transformer.householderVectors[])-1
orig(index) == size(this.transformer.main[])-1
orig(index) == size(this.transformer.secondary[])
orig(index) == size(this.realEigenvalues[])-1
orig(index) == size(this.imagEigenvalues[])-1
orig(index) == orig(size(this.main[]))-1
orig(index) == orig(size(this.squaredSecondary[]))
orig(index) == orig(size(this.transformer.householderVectors[]))-1
orig(index) == orig(size(this.transformer.main[]))-1
orig(index) == orig(size(this.transformer.secondary[]))
orig(index) == orig(size(this.realEigenvalues[]))-1
orig(index) == orig(size(this.imagEigenvalues[]))-1
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.transformer.householderVectors[]))
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
this.main has only one value
this.main[] == [3.0, 3.9999999999999996, -1.0]
this.main[] elements one of { -1.0, 3.0, 3.9999999999999996 }
this.secondary has only one value
this.secondary[] == [-4.47213595499958, 0.0]
this.secondary[] elements one of { -4.47213595499958, 0.0 }
this.squaredSecondary has only one value
this.squaredSecondary[] == [20.000000000000004, 0.0]
this.squaredSecondary[] elements one of { 0.0, 20.000000000000004 }
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 3
this.lowerSpectra == -1.4721359549995796
this.upperSpectra == 8.47213595499958
this.minPivot == 4.4501477170144036E-307
this.sigma == 0.0
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4721359549995796, -0.47213595499958005, -1.0, 7.47213595499958, 8.47213595499958, -1.0]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [8.0, -1.0000000000000007, -1.0]
this.realEigenvalues[] elements one of { -1.0000000000000007, 8.0 }
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0]
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 3
size(this.work[]) == 18
this.transformer.householderVectors[this.pingPong] has only one value
this.transformer.householderVectors[orig(index)] has only one value
this.transformer.householderVectors[orig(index)-1] has only one value
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.secondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.squaredSecondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.secondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.squaredSecondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.secondary[]
this.splitTolerance in this.squaredSecondary[]
this.splitTolerance in this.work[]
this.splitTolerance in orig(this.realEigenvalues[])
this.minPivot in this.secondary[]
this.sigma in this.secondary[]
this.minPivot in this.squaredSecondary[]
this.sigma in this.squaredSecondary[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in orig(this.realEigenvalues[])
this.sigma in this.work[]
this.imagEigenvalues[] elements == this.sigma
this.sigma in this.imagEigenvalues[]
this.sigma in orig(this.realEigenvalues[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.process2RowsBlock(int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.main[] == this.transformer.main[]
this.secondary[] == this.transformer.secondary[]
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQt == this.cachedV
this.transformer.cachedT == this.cachedV
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.pingPong == index
this.realEigenvalues[] == this.imagEigenvalues[]
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.transformer.householderVectors[])-1
size(this.secondary[]) == size(this.transformer.main[])-1
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [3.0, 3.9999999999999996, -1.0]
this.main[] elements one of { -1.0, 3.0, 3.9999999999999996 }
this.secondary has only one value
this.secondary[] == [-4.47213595499958, 0.0]
this.secondary[] elements one of { -4.47213595499958, 0.0 }
this.squaredSecondary has only one value
this.squaredSecondary[] == [20.000000000000004, 0.0]
this.squaredSecondary[] elements one of { 0.0, 20.000000000000004 }
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 3
this.lowerSpectra == -1.4721359549995796
this.upperSpectra == 8.47213595499958
this.minPivot == 4.4501477170144036E-307
this.sigma == 0.0
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4721359549995796, -0.47213595499958005, -1.0, 7.47213595499958, 8.47213595499958, -1.0]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 3
size(this.work[]) == 18
this.transformer.householderVectors[this.pingPong] has only one value
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.secondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.squaredSecondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.secondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.squaredSecondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.secondary[]
this.splitTolerance in this.squaredSecondary[]
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.minPivot in this.secondary[]
this.sigma in this.secondary[]
this.minPivot in this.squaredSecondary[]
this.sigma in this.squaredSecondary[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.process2RowsBlock(int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main == orig(this.transformer.main)
this.main[] == this.transformer.main[]
this.main[] == orig(this.main[])
this.main[] == orig(this.transformer.main[])
this.secondary == orig(this.secondary)
this.secondary == orig(this.transformer.secondary)
this.secondary[] == this.transformer.secondary[]
this.secondary[] == orig(this.secondary[])
this.secondary[] == orig(this.transformer.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQt == this.cachedV
this.transformer.cachedT == this.cachedV
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.tau)
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.sigma == orig(this.g)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.pingPong == orig(index)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.transformer.cachedQ)
this.cachedV == orig(this.transformer.cachedQt)
this.cachedV == orig(this.transformer.cachedT)
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.transformer.householderVectors[]))
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.transformer.householderVectors[])-1
size(this.secondary[]) == size(this.transformer.main[])-1
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.secondary[]) == orig(size(this.transformer.main[]))-1
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
this.main has only one value
this.main[] == [3.0, 3.9999999999999996, -1.0]
this.main[] elements one of { -1.0, 3.0, 3.9999999999999996 }
this.secondary has only one value
this.secondary[] == [-4.47213595499958, 0.0]
this.secondary[] elements one of { -4.47213595499958, 0.0 }
this.squaredSecondary has only one value
this.squaredSecondary[] == [20.000000000000004, 0.0]
this.squaredSecondary[] elements one of { 0.0, 20.000000000000004 }
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 3
this.lowerSpectra == -1.4721359549995796
this.upperSpectra == 8.47213595499958
this.minPivot == 4.4501477170144036E-307
this.sigma == 0.0
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4721359549995796, -0.47213595499958005, -1.0, 7.47213595499958, 8.47213595499958, -1.0]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [8.0, -1.0000000000000007, 0.0]
this.realEigenvalues[] elements one of { -1.0000000000000007, 0.0, 8.0 }
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0]
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 3
size(this.work[]) == 18
this.transformer.householderVectors[this.pingPong] has only one value
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.secondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.squaredSecondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.secondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.squaredSecondary[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.splitTolerance in this.secondary[]
this.splitTolerance in this.squaredSecondary[]
this.splitTolerance in this.work[]
this.splitTolerance in this.realEigenvalues[]
this.minPivot in this.secondary[]
this.sigma in this.secondary[]
this.minPivot in this.squaredSecondary[]
this.sigma in this.squaredSecondary[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.sigma in this.work[]
this.sigma in this.realEigenvalues[]
this.imagEigenvalues[] elements == this.sigma
this.sigma in this.imagEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.process3RowsBlock(int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.main[] == this.transformer.main[]
this.secondary[] == this.transformer.secondary[]
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQt == this.cachedV
this.transformer.cachedT == this.cachedV
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.pingPong == index
this.realEigenvalues[] == this.imagEigenvalues[]
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.transformer.householderVectors[])-1
size(this.secondary[]) == size(this.transformer.main[])-1
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.squaredSecondary[] one of { [2.0000000000000004, 6.004365899753108E-32], [17.0, 5.53633217993079] }
this.lowerSpectra one of { -1.4142135623730951, -1.1231056256176606 }
this.upperSpectra one of { 2.414213562373095, 16.064282096205893 }
this.minPivot one of { 4.450147717014404E-308, 3.782625559462242E-307 }
this.sigma == 0.0
this.work[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4142135623730951, -0.4142135623730959, 0.9999999999999997, 1.4142135623730951, 2.414213562373095, 1.0000000000000002], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1231056256176606, 3.112188492029399, -0.9411764705882344, 7.123105625617661, 16.064282096205893, 3.7647058823529393] }
this.pingPong == 0
this.realEigenvalues[] == [0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 3
size(this.work[]) == 18
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.process3RowsBlock(int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main == orig(this.transformer.main)
this.main[] == this.transformer.main[]
this.main[] == orig(this.main[])
this.main[] == orig(this.transformer.main[])
this.secondary == orig(this.secondary)
this.secondary == orig(this.transformer.secondary)
this.secondary[] == this.transformer.secondary[]
this.secondary[] == orig(this.secondary[])
this.secondary[] == orig(this.transformer.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQt == this.cachedV
this.transformer.cachedT == this.cachedV
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.sigma
this.minPivot == orig(this.minPivot)
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.sigma == orig(this.sigma)
this.sigma == orig(this.sigmaLow)
this.sigma == orig(this.tau)
this.sigma == orig(this.qMax)
this.sigma == orig(this.eMin)
this.sigma == orig(this.dMin)
this.sigma == orig(this.dMin1)
this.sigma == orig(this.dMin2)
this.sigma == orig(this.dN)
this.sigma == orig(this.dN1)
this.sigma == orig(this.dN2)
this.sigma == orig(this.g)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.pingPong == orig(index)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.transformer.cachedQ)
this.cachedV == orig(this.transformer.cachedQt)
this.cachedV == orig(this.transformer.cachedT)
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.transformer.householderVectors[]))
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.transformer.householderVectors[])-1
size(this.secondary[]) == size(this.transformer.main[])-1
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.secondary[]) == orig(size(this.transformer.main[]))-1
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.squaredSecondary[] one of { [2.0000000000000004, 6.004365899753108E-32], [17.0, 5.53633217993079] }
this.lowerSpectra one of { -1.4142135623730951, -1.1231056256176606 }
this.upperSpectra one of { 2.414213562373095, 16.064282096205893 }
this.minPivot one of { 4.450147717014404E-308, 3.782625559462242E-307 }
this.sigma == 0.0
this.work[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4142135623730951, -0.4142135623730959, 0.9999999999999997, 1.4142135623730951, 2.414213562373095, 1.0000000000000002], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1231056256176606, 3.112188492029399, -0.9411764705882344, 7.123105625617661, 16.064282096205893, 3.7647058823529393] }
this.pingPong == 0
this.realEigenvalues[] one of { [2.0, 1.0, -1.0000000000000004], [12.0, 1.9999999999999996, 1.7763568394002505E-15] }
this.imagEigenvalues[] == [0.0, 0.0, 0.0]
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 3
size(this.work[]) == 18
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
this.splitTolerance in this.work[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.sigma in this.work[]
this.imagEigenvalues[] elements == this.sigma
this.sigma in this.imagEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock(int):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.sigma
this.splitTolerance == this.sigma
this.minPivot == this.sigma
this.sigma == this.sigmaLow
this.sigma == this.tau
this.sigma == this.qMax
this.sigma == this.eMin
this.sigma == this.dMin
this.sigma == this.dMin1
this.sigma == this.dMin2
this.sigma == this.dN
this.sigma == this.dN1
this.sigma == this.dN2
this.sigma == this.g
this.pingPong == this.tType
this.realEigenvalues[] == this.imagEigenvalues[]
n == size(this.main[])
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 0.0
this.tau == 1.6006892232545997E-11
this.work has only one value
this.work[] == [13169.884155532236, 0.0, 1323.5776689804854, 0.0, 925.8861564255155, 0.0, 4216.250745159982, 0.0, 2583.268761038723, 0.0, 10439.913389332172, 0.0, 198.12300408391457, 0.0, 20094.430077247813, 0.0, 0.5032985539728543, 0.0, 11279.434546970497, 0.0, 2625.1197804873664, 0.0, 20.872884137751694, 0.0, 20562.657943923878, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.lowerSpectra in this.work[]
this.upperSpectra in this.work[]
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma in this.work[]
this.realEigenvalues[] elements == this.sigma
this.sigma in this.realEigenvalues[]
this.tau in this.work[]
this.realEigenvalues[] elements == this.tau
this.tau in this.realEigenvalues[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock(int):::EXIT929
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock(int):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.dMin
this.minPivot == orig(this.minPivot)
this.sigmaLow == this.dMin
this.tau == this.dMin
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.eMin == this.dMin1
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.sigma)
this.dMin == orig(this.sigmaLow)
this.dMin == orig(this.tau)
this.dMin == orig(this.qMax)
this.dMin == orig(this.eMin)
this.dMin == orig(this.dMin)
this.dMin == orig(this.dMin1)
this.dMin == orig(this.dMin2)
this.dMin == orig(this.dN)
this.dMin == orig(this.dN1)
this.dMin == orig(this.dN2)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin2 == this.dN2
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
orig(n) == size(this.main[])
orig(n) == size(this.realEigenvalues[])
orig(n) == size(this.imagEigenvalues[])
orig(n) == orig(size(this.realEigenvalues[]))
orig(n) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.work[]) == orig(size(this.work[]))
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.sigma == 12969.296828772238
this.tau == 1.418780186650953E-20
this.work has only one value
this.work[] == [20789.54123048877, 7820.24440171653, 3.183169331076479E-4, 3.786867141004985E-5, 13899.634550344692, 930.3377215724533, 7.091254901045897E-14, 1.0814279227325111E-36, 12969.296828772238, 0.0, 930.3345969689944, 930.3377645544963, 0.0, 0.0, 0.0, 176.61767389159772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.pingPong == 0
this.qMax == 20464.940196239226
this.eMin == 930.3377645544963
this.tType == -2
this.dMin == 0.0
this.dMin1 == 930.3377266858249
this.dMin2 == 7820.244040417554
this.dN == -3.009265538105056E-36
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
orig(n) == 7
size(this.work[]) == 42
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance in this.work[]
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.splitTolerance in orig(this.work[])
this.lowerSpectra in this.work[]
this.lowerSpectra in orig(this.work[])
this.upperSpectra in this.work[]
this.upperSpectra in orig(this.work[])
this.minPivot in this.work[]
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.minPivot in orig(this.work[])
this.sigma in this.work[]
this.sigmaLow in this.work[]
this.realEigenvalues[] elements == this.sigmaLow
this.sigmaLow in this.realEigenvalues[]
this.sigmaLow in orig(this.work[])
this.tau in this.work[]
this.realEigenvalues[] elements == this.tau
this.tau in this.realEigenvalues[]
this.tau in orig(this.work[])
this.eMin in this.work[]
this.dMin in this.work[]
this.dMin1 in this.work[]
this.dMin2 in this.work[]
this.dN in this.work[]
orig(this.tau) in this.work[]
this.dMin in this.realEigenvalues[]
this.realEigenvalues[] elements == this.dMin
this.dMin in orig(this.work[])
this.dN in this.realEigenvalues[]
this.realEigenvalues[] elements == this.dN
this.dN in orig(this.work[])
orig(this.tau) in this.realEigenvalues[]
this.realEigenvalues[] elements == orig(this.tau)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.progressiveQuotientDifferenceWithShift(double[], double[], double):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.transformer.cachedT == this.cachedV
this.minPivot == this.dMin
this.sigmaLow == this.dMin
this.tau == this.dMin
this.eMin == this.dMin1
this.dMin == this.dN
this.dMin == this.g
this.dMin1 == this.dN1
this.dMin2 == this.dN2
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == size(d[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == size(d[])-1
size(this.secondary[]) == size(l[])
this.main != null
this.secondary != null
this.squaredSecondary != null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.work != null
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.realEigenvalues != null
this.realEigenvalues[] sorted by >=
this.imagEigenvalues != null
this.eigenvectors != null
this.cachedV == null
d != null
d[] elements >= 8.881784197001252E-16
l != null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dMin1
lambda % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != lambda
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % lambda == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin1
d[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
lambda % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % lambda == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < lambda
this.splitTolerance > this.lowerSpectra
this.splitTolerance < this.upperSpectra
this.splitTolerance < this.minPivot
this.splitTolerance <= this.dMin1
d[] elements > this.splitTolerance
lambda % this.splitTolerance == 0
this.splitTolerance % lambda == 0
this.splitTolerance < lambda
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] > this.work[] (lexically)
this.main[] >= this.work[] (lexically)
this.main[] < this.realEigenvalues[] (lexically)
this.main[] <= this.realEigenvalues[] (lexically)
this.main[] > l[] (lexically)
this.main[] >= l[] (lexically)
this.secondary[] elements < this.upperSpectra
this.secondary[] < d[] (lexically)
this.secondary[] <= d[] (lexically)
this.secondary[] < l[] (lexically)
this.secondary[] <= l[] (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements >= this.tau
this.squaredSecondary[] elements >= this.eMin
this.squaredSecondary[] elements >= this.dMin
this.squaredSecondary[] elements >= this.dMin1
this.squaredSecondary[] elements >= this.dN
this.squaredSecondary[] > d[] (lexically)
this.squaredSecondary[] >= d[] (lexically)
this.squaredSecondary[] > l[] (lexically)
this.squaredSecondary[] >= l[] (elementwise)
this.transformer.main[] elements > this.lowerSpectra
this.transformer.main[] elements < this.upperSpectra
this.transformer.main[] < this.realEigenvalues[] (lexically)
this.transformer.main[] <= this.realEigenvalues[] (lexically)
this.transformer.main[] > l[] (lexically)
this.transformer.main[] >= l[] (lexically)
this.transformer.secondary[] elements < this.upperSpectra
this.transformer.secondary[] < d[] (lexically)
this.transformer.secondary[] <= d[] (lexically)
this.transformer.secondary[] < l[] (lexically)
this.transformer.secondary[] <= l[] (lexically)
this.lowerSpectra < this.upperSpectra
this.lowerSpectra % this.minPivot == 0
this.lowerSpectra < this.minPivot
this.minPivot % this.lowerSpectra == 0
this.lowerSpectra < this.sigma
this.lowerSpectra < this.sigmaLow
this.sigmaLow % this.lowerSpectra == 0
this.lowerSpectra < this.tau
this.tau % this.lowerSpectra == 0
this.lowerSpectra < this.qMax
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.dN % this.lowerSpectra == 0
this.lowerSpectra < this.dN
d[] elements > this.lowerSpectra
this.lowerSpectra < lambda
this.minPivot % this.upperSpectra == 0
this.upperSpectra % this.minPivot == 0
this.upperSpectra > this.minPivot
this.upperSpectra > this.sigma
this.sigmaLow % this.upperSpectra == 0
this.upperSpectra > this.sigmaLow
this.tau % this.upperSpectra == 0
this.upperSpectra > this.tau
this.upperSpectra > this.qMax
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.dN % this.upperSpectra == 0
this.upperSpectra > this.dN
l[] elements < this.upperSpectra
this.upperSpectra != lambda
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
this.sigma % this.minPivot == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
this.minPivot >= this.sigmaLow
this.sigmaLow % this.minPivot == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.tau % this.minPivot == 0
this.tau == this.minPivot**2
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
this.qMax % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
this.eMin % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
this.dMin1 % this.minPivot == 0
this.minPivot <= this.dMin1
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
this.dMin2 % this.minPivot == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.dN % this.minPivot == 0
this.dN == this.minPivot**2
this.minPivot >= this.dN
d[] elements > this.minPivot
Infinity * this.minPivot + 8.44424930131969E14 * lambda - 6.516145710851688E16 == 0
lambda % this.minPivot == 0
this.minPivot % lambda == 0
this.minPivot < lambda
this.sigma >= this.tau
this.sigma >= this.eMin
this.sigma >= this.dMin
this.sigma >= this.dMin1
this.sigma >= this.dMin2
this.sigma >= this.dN
this.sigmaLow <= this.dMin1
d[] elements >= this.sigmaLow
this.sigmaLow % lambda == 0
this.sigmaLow <= lambda
this.tau <= this.dMin1
this.tau <= this.dMin2
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
d[] elements >= this.tau
this.tau % lambda == 0
this.tau <= lambda
this.work[] < this.realEigenvalues[] (lexically)
this.work[] <= this.realEigenvalues[] (lexically)
this.work[] < d[] (lexically)
this.work[] <= d[] (lexically)
this.eMin <= this.dMin2
this.eMin >= this.dN
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
d[] elements >= this.dMin
this.dMin <= lambda
this.dMin1 >= this.dN
this.dMin2 >= this.dN
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
d[] elements >= this.dN
this.dN % lambda == 0
this.dN <= lambda
this.realEigenvalues[] > this.imagEigenvalues[] (lexically)
this.realEigenvalues[] > d[] (lexically)
this.realEigenvalues[] >= d[] (lexically)
this.realEigenvalues[] > l[] (lexically)
this.realEigenvalues[] >= l[] (lexically)
this.imagEigenvalues[] < d[] (lexically)
this.imagEigenvalues[] <= d[] (elementwise)
this.imagEigenvalues[] > l[] (lexically)
this.imagEigenvalues[] >= l[] (lexically)
d[] > l[] (lexically)
d[] >= l[] (lexically)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.progressiveQuotientDifferenceWithShift(double[], double[], double):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedT == this.cachedV
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.dMin
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == this.dMin
this.sigmaLow == orig(this.sigmaLow)
this.tau == this.dMin
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == this.dMin1
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.dMin)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin1 == orig(this.dMin1)
this.dMin1 == orig(this.dN1)
this.dMin2 == this.dN2
this.dMin2 == orig(this.dMin2)
this.dMin2 == orig(this.dN2)
this.dN == orig(this.dN)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
d[] == orig(d[])
l[] == orig(l[])
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.main[]) == orig(size(this.eigenvectors[]))
size(this.main[]) == orig(size(d[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == size(d[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.eigenvectors[]))-1
size(this.secondary[]) == orig(size(d[]))-1
size(this.secondary[]) == orig(size(l[]))
size(this.transformer.householderVectors[]) == orig(size(this.transformer.main[]))
size(this.transformer.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.transformer.secondary[]) == orig(size(this.transformer.main[]))-1
size(this.work[]) == orig(size(this.work[]))
this.transformer.householderVectors[this.pingPong] == this.transformer.householderVectors[orig(this.tType)]
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[post(this.tType)])
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[this.tType])
this.main != null
this.secondary != null
this.squaredSecondary != null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.work != null
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.realEigenvalues != null
this.realEigenvalues[] sorted by >=
this.imagEigenvalues != null
this.eigenvectors != null
this.cachedV == null
d[] elements >= 8.881784197001252E-16
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin1
d[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance > this.lowerSpectra
this.splitTolerance < this.upperSpectra
this.splitTolerance < this.minPivot
this.splitTolerance <= this.dMin1
d[] elements > this.splitTolerance
orig(lambda) % this.splitTolerance == 0
this.splitTolerance % orig(lambda) == 0
this.splitTolerance < orig(lambda)
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] > this.work[] (lexically)
this.main[] >= this.work[] (lexically)
this.main[] < this.realEigenvalues[] (lexically)
this.main[] <= this.realEigenvalues[] (lexically)
this.main[] > l[] (lexically)
this.main[] >= l[] (lexically)
this.main[] > orig(this.work[]) (lexically)
this.main[] >= orig(this.work[]) (lexically)
this.secondary[] elements < this.upperSpectra
this.secondary[] < d[] (lexically)
this.secondary[] <= d[] (lexically)
this.secondary[] < l[] (lexically)
this.secondary[] <= l[] (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements >= this.tau
this.squaredSecondary[] elements >= this.eMin
this.squaredSecondary[] elements >= this.dMin
this.squaredSecondary[] elements >= this.dMin1
this.squaredSecondary[] elements >= this.dN
this.squaredSecondary[] > d[] (lexically)
this.squaredSecondary[] >= d[] (lexically)
this.squaredSecondary[] > l[] (lexically)
this.squaredSecondary[] >= l[] (elementwise)
this.squaredSecondary[] > orig(this.work[]) (lexically)
this.squaredSecondary[] >= orig(this.work[]) (lexically)
this.transformer.main[] elements > this.lowerSpectra
this.transformer.main[] elements < this.upperSpectra
this.transformer.main[] < this.realEigenvalues[] (lexically)
this.transformer.main[] <= this.realEigenvalues[] (lexically)
this.transformer.main[] > l[] (lexically)
this.transformer.main[] >= l[] (lexically)
this.transformer.main[] > orig(this.work[]) (lexically)
this.transformer.main[] >= orig(this.work[]) (lexically)
this.transformer.secondary[] elements < this.upperSpectra
this.transformer.secondary[] < d[] (lexically)
this.transformer.secondary[] <= d[] (lexically)
this.transformer.secondary[] < l[] (lexically)
this.transformer.secondary[] <= l[] (lexically)
this.lowerSpectra < this.upperSpectra
this.lowerSpectra % this.minPivot == 0
this.lowerSpectra < this.minPivot
this.minPivot % this.lowerSpectra == 0
this.lowerSpectra < this.sigma
this.lowerSpectra < this.sigmaLow
this.sigmaLow % this.lowerSpectra == 0
this.lowerSpectra < this.tau
this.tau % this.lowerSpectra == 0
this.lowerSpectra < this.qMax
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.dN % this.lowerSpectra == 0
this.lowerSpectra < this.dN
d[] elements > this.lowerSpectra
this.lowerSpectra < orig(lambda)
this.minPivot % this.upperSpectra == 0
this.upperSpectra % this.minPivot == 0
this.upperSpectra > this.minPivot
this.upperSpectra > this.sigma
this.sigmaLow % this.upperSpectra == 0
this.upperSpectra > this.sigmaLow
this.tau % this.upperSpectra == 0
this.upperSpectra > this.tau
this.upperSpectra > this.qMax
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.dN % this.upperSpectra == 0
this.upperSpectra > this.dN
l[] elements < this.upperSpectra
this.upperSpectra != orig(lambda)
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
this.sigma % this.minPivot == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
this.minPivot >= this.sigmaLow
this.sigmaLow % this.minPivot == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.tau % this.minPivot == 0
this.tau == this.minPivot**2
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
this.qMax % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
this.eMin % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
this.dMin1 % this.minPivot == 0
this.minPivot <= this.dMin1
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
this.dMin2 % this.minPivot == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.dN % this.minPivot == 0
this.dN == this.minPivot**2
this.minPivot >= this.dN
d[] elements > this.minPivot
Infinity * this.minPivot + 8.44424930131969E14 * orig(lambda) - 6.516145710851688E16 == 0
orig(lambda) % this.minPivot == 0
this.minPivot % orig(lambda) == 0
this.minPivot < orig(lambda)
this.sigma >= this.tau
this.sigma >= this.eMin
this.sigma >= this.dMin
this.sigma >= this.dMin1
this.sigma >= this.dMin2
this.sigma >= this.dN
this.sigmaLow <= this.dMin1
d[] elements >= this.sigmaLow
this.sigmaLow % orig(lambda) == 0
this.sigmaLow <= orig(lambda)
this.tau <= this.dMin1
this.tau <= this.dMin2
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
d[] elements >= this.tau
this.tau % orig(lambda) == 0
this.tau <= orig(lambda)
this.work[] < this.realEigenvalues[] (lexically)
this.work[] <= this.realEigenvalues[] (lexically)
this.work[] < d[] (lexically)
this.work[] <= d[] (lexically)
this.pingPong < size(l[])-1
this.eMin <= this.dMin2
this.eMin >= this.dN
this.tType < size(l[])-1
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
d[] elements >= this.dMin
this.dMin <= orig(lambda)
this.dMin1 >= this.dN
this.dMin2 >= this.dN
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
d[] elements >= this.dN
this.dN % orig(lambda) == 0
this.dN <= orig(lambda)
this.realEigenvalues[] > this.imagEigenvalues[] (lexically)
this.realEigenvalues[] > d[] (lexically)
this.realEigenvalues[] >= d[] (lexically)
this.realEigenvalues[] > l[] (lexically)
this.realEigenvalues[] >= l[] (lexically)
this.realEigenvalues[] > orig(this.work[]) (lexically)
this.realEigenvalues[] >= orig(this.work[]) (lexically)
this.imagEigenvalues[] < d[] (lexically)
this.imagEigenvalues[] <= d[] (elementwise)
this.imagEigenvalues[] > l[] (lexically)
this.imagEigenvalues[] >= l[] (lexically)
d[] > l[] (lexically)
d[] >= l[] (lexically)
d[] > orig(this.work[]) (lexically)
d[] >= orig(this.work[]) (lexically)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.stationaryQuotientDifferenceWithShift(double[], double[], double):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.transformer.cachedT == this.cachedV
this.minPivot == this.dMin
this.sigmaLow == this.dMin
this.tau == this.dMin
this.eMin == this.dMin1
this.dMin == this.dN
this.dMin == this.g
this.dMin1 == this.dN1
this.dMin2 == this.dN2
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == size(d[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == size(d[])-1
size(this.secondary[]) == size(l[])
this.main != null
this.secondary != null
this.squaredSecondary != null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.work != null
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.realEigenvalues != null
this.realEigenvalues[] sorted by >=
this.imagEigenvalues != null
this.eigenvectors != null
this.cachedV == null
d != null
d[] elements >= 8.881784197001252E-16
l != null
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dMin1
lambda % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != lambda
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % lambda == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin1
d[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
lambda % org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % lambda == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < lambda
this.splitTolerance > this.lowerSpectra
this.splitTolerance < this.upperSpectra
this.splitTolerance < this.minPivot
this.splitTolerance <= this.dMin1
d[] elements > this.splitTolerance
lambda % this.splitTolerance == 0
this.splitTolerance % lambda == 0
this.splitTolerance < lambda
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] < this.realEigenvalues[] (lexically)
this.main[] <= this.realEigenvalues[] (lexically)
this.main[] > l[] (lexically)
this.main[] >= l[] (lexically)
this.secondary[] elements < this.upperSpectra
this.secondary[] < d[] (lexically)
this.secondary[] <= d[] (lexically)
this.secondary[] < l[] (lexically)
this.secondary[] <= l[] (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements >= this.tau
this.squaredSecondary[] elements >= this.eMin
this.squaredSecondary[] elements >= this.dMin
this.squaredSecondary[] elements >= this.dMin1
this.squaredSecondary[] elements >= this.dN
this.squaredSecondary[] > d[] (lexically)
this.squaredSecondary[] >= d[] (lexically)
this.squaredSecondary[] > l[] (lexically)
this.squaredSecondary[] >= l[] (elementwise)
this.transformer.main[] elements > this.lowerSpectra
this.transformer.main[] elements < this.upperSpectra
this.transformer.main[] < this.realEigenvalues[] (lexically)
this.transformer.main[] <= this.realEigenvalues[] (lexically)
this.transformer.main[] > l[] (lexically)
this.transformer.main[] >= l[] (lexically)
this.transformer.secondary[] elements < this.upperSpectra
this.transformer.secondary[] < d[] (lexically)
this.transformer.secondary[] <= d[] (lexically)
this.transformer.secondary[] < l[] (lexically)
this.transformer.secondary[] <= l[] (lexically)
this.lowerSpectra < this.upperSpectra
this.lowerSpectra % this.minPivot == 0
this.lowerSpectra < this.minPivot
this.minPivot % this.lowerSpectra == 0
this.lowerSpectra < this.sigma
this.lowerSpectra < this.sigmaLow
this.sigmaLow % this.lowerSpectra == 0
this.lowerSpectra < this.tau
this.tau % this.lowerSpectra == 0
this.lowerSpectra < this.qMax
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.dN % this.lowerSpectra == 0
this.lowerSpectra < this.dN
d[] elements > this.lowerSpectra
this.lowerSpectra < lambda
this.minPivot % this.upperSpectra == 0
this.upperSpectra % this.minPivot == 0
this.upperSpectra > this.minPivot
this.upperSpectra > this.sigma
this.sigmaLow % this.upperSpectra == 0
this.upperSpectra > this.sigmaLow
this.tau % this.upperSpectra == 0
this.upperSpectra > this.tau
this.upperSpectra > this.qMax
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.dN % this.upperSpectra == 0
this.upperSpectra > this.dN
l[] elements < this.upperSpectra
this.upperSpectra != lambda
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
this.sigma % this.minPivot == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
this.minPivot >= this.sigmaLow
this.sigmaLow % this.minPivot == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.tau % this.minPivot == 0
this.tau == this.minPivot**2
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
this.qMax % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
this.eMin % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
this.dMin1 % this.minPivot == 0
this.minPivot <= this.dMin1
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
this.dMin2 % this.minPivot == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.dN % this.minPivot == 0
this.dN == this.minPivot**2
this.minPivot >= this.dN
d[] elements > this.minPivot
Infinity * this.minPivot + 8.44424930131969E14 * lambda - 6.516145710851688E16 == 0
lambda % this.minPivot == 0
this.minPivot % lambda == 0
this.minPivot < lambda
this.sigma >= this.tau
this.sigma >= this.eMin
this.sigma >= this.dMin
this.sigma >= this.dMin1
this.sigma >= this.dMin2
this.sigma >= this.dN
this.sigmaLow <= this.dMin1
d[] elements >= this.sigmaLow
this.sigmaLow % lambda == 0
this.sigmaLow <= lambda
this.tau <= this.dMin1
this.tau <= this.dMin2
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
d[] elements >= this.tau
this.tau % lambda == 0
this.tau <= lambda
this.eMin <= this.dMin2
this.eMin >= this.dN
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
d[] elements >= this.dMin
this.dMin <= lambda
this.dMin1 >= this.dN
this.dMin2 >= this.dN
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
d[] elements >= this.dN
this.dN % lambda == 0
this.dN <= lambda
this.realEigenvalues[] > this.imagEigenvalues[] (lexically)
this.realEigenvalues[] > d[] (lexically)
this.realEigenvalues[] >= d[] (lexically)
this.realEigenvalues[] > l[] (lexically)
this.realEigenvalues[] >= l[] (lexically)
this.imagEigenvalues[] < d[] (lexically)
this.imagEigenvalues[] <= d[] (elementwise)
this.imagEigenvalues[] > l[] (lexically)
this.imagEigenvalues[] >= l[] (lexically)
d[] > l[] (lexically)
d[] >= l[] (lexically)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.stationaryQuotientDifferenceWithShift(double[], double[], double):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.dMin
this.splitTolerance == this.dMin
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedT == this.cachedV
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == this.dMin
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == this.dMin
this.sigmaLow == orig(this.sigmaLow)
this.tau == this.dMin
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == this.dMin1
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == this.dN
this.dMin == this.g
this.dMin == orig(this.dMin)
this.dMin == orig(this.g)
this.dMin1 == this.dN1
this.dMin1 == orig(this.dMin1)
this.dMin1 == orig(this.dN1)
this.dMin2 == this.dN2
this.dMin2 == orig(this.dMin2)
this.dMin2 == orig(this.dN2)
this.dN == orig(this.dN)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
d[] == orig(d[])
l[] == orig(l[])
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.main[]) == orig(size(this.eigenvectors[]))
size(this.main[]) == orig(size(d[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == size(d[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.eigenvectors[]))-1
size(this.secondary[]) == orig(size(d[]))-1
size(this.secondary[]) == orig(size(l[]))
size(this.transformer.householderVectors[]) == orig(size(this.transformer.main[]))
size(this.transformer.secondary[]) == orig(size(this.transformer.householderVectors[]))-1
size(this.transformer.secondary[]) == orig(size(this.transformer.main[]))-1
size(this.work[]) == orig(size(this.work[]))
this.transformer.householderVectors[this.pingPong] == this.transformer.householderVectors[orig(this.tType)]
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[post(this.tType)])
this.transformer.householderVectors[this.pingPong] == orig(this.transformer.householderVectors[this.tType])
this.main != null
this.secondary != null
this.squaredSecondary != null
this.sigma one of { 0.0, 12969.296828772238 }
this.tau == 0.0
this.work != null
this.pingPong == 0
this.eMin one of { 0.0, 930.3377645544963 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 930.3377266858249 }
this.dMin2 one of { 0.0, 7820.244040417554 }
this.dN == 0.0
this.realEigenvalues != null
this.realEigenvalues[] sorted by >=
this.imagEigenvalues != null
this.eigenvectors != null
this.cachedV == null
d[] elements >= 8.881784197001252E-16
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE <= this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.upperSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 > this.minPivot
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin1
d[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.splitTolerance > this.lowerSpectra
this.splitTolerance < this.upperSpectra
this.splitTolerance < this.minPivot
this.splitTolerance <= this.dMin1
d[] elements > this.splitTolerance
orig(lambda) % this.splitTolerance == 0
this.splitTolerance % orig(lambda) == 0
this.splitTolerance < orig(lambda)
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] > this.work[] (lexically)
this.main[] >= this.work[] (lexically)
this.main[] < this.realEigenvalues[] (lexically)
this.main[] <= this.realEigenvalues[] (lexically)
this.main[] > l[] (lexically)
this.main[] >= l[] (lexically)
this.secondary[] elements < this.upperSpectra
this.secondary[] < d[] (lexically)
this.secondary[] <= d[] (lexically)
this.secondary[] < l[] (lexically)
this.secondary[] <= l[] (lexically)
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements >= this.tau
this.squaredSecondary[] elements >= this.eMin
this.squaredSecondary[] elements >= this.dMin
this.squaredSecondary[] elements >= this.dMin1
this.squaredSecondary[] elements >= this.dN
this.squaredSecondary[] > d[] (lexically)
this.squaredSecondary[] >= d[] (lexically)
this.squaredSecondary[] > l[] (lexically)
this.squaredSecondary[] >= l[] (elementwise)
this.squaredSecondary[] > orig(this.work[]) (lexically)
this.squaredSecondary[] >= orig(this.work[]) (lexically)
this.transformer.main[] elements > this.lowerSpectra
this.transformer.main[] elements < this.upperSpectra
this.transformer.main[] < this.realEigenvalues[] (lexically)
this.transformer.main[] <= this.realEigenvalues[] (lexically)
this.transformer.main[] > l[] (lexically)
this.transformer.main[] >= l[] (lexically)
this.transformer.main[] > orig(this.work[]) (lexically)
this.transformer.main[] >= orig(this.work[]) (lexically)
this.transformer.secondary[] elements < this.upperSpectra
this.transformer.secondary[] < d[] (lexically)
this.transformer.secondary[] <= d[] (lexically)
this.transformer.secondary[] < l[] (lexically)
this.transformer.secondary[] <= l[] (lexically)
this.lowerSpectra < this.upperSpectra
this.lowerSpectra % this.minPivot == 0
this.lowerSpectra < this.minPivot
this.minPivot % this.lowerSpectra == 0
this.lowerSpectra < this.sigma
this.lowerSpectra < this.sigmaLow
this.sigmaLow % this.lowerSpectra == 0
this.lowerSpectra < this.tau
this.tau % this.lowerSpectra == 0
this.lowerSpectra < this.qMax
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.dN % this.lowerSpectra == 0
this.lowerSpectra < this.dN
d[] elements > this.lowerSpectra
this.lowerSpectra < orig(lambda)
this.minPivot % this.upperSpectra == 0
this.upperSpectra % this.minPivot == 0
this.upperSpectra > this.minPivot
this.upperSpectra > this.sigma
this.sigmaLow % this.upperSpectra == 0
this.upperSpectra > this.sigmaLow
this.tau % this.upperSpectra == 0
this.upperSpectra > this.tau
this.upperSpectra > this.qMax
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.dN % this.upperSpectra == 0
this.upperSpectra > this.dN
l[] elements < this.upperSpectra
this.upperSpectra != orig(lambda)
Infinity * this.minPivot - 9.2665060589548262E17 * this.sigma - 8.912432917070925E15 == 0
this.sigma % this.minPivot == 0
Infinity * this.minPivot + 6.072897410796635E22 * this.sigmaLow - 35255 == 0
this.minPivot >= this.sigmaLow
this.sigmaLow % this.minPivot == 0
8.558163247284879E295 * this.minPivot - 3.619728929279229E15 * this.tau == 0
this.tau % this.minPivot == 0
this.tau == this.minPivot**2
Infinity * this.minPivot - 4.6332530294774131E17 * this.qMax - 7.031699908595465E15 == 0
this.qMax % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.eMin - 5.114585949433997E15 == 0
this.eMin % this.minPivot == 0
Infinity * this.minPivot - 7.413204847163861E18 * this.dMin1 - 5.114585741248775E15 == 0
this.dMin1 % this.minPivot == 0
this.minPivot <= this.dMin1
Infinity * this.minPivot - 5.7915662868467664E16 * this.dMin2 - 3.35876924003323E14 == 0
this.dMin2 % this.minPivot == 0
1.8152061871066688E280 * this.minPivot + 3.619728929279229E15 * this.dN == 0
this.dN % this.minPivot == 0
this.dN == this.minPivot**2
this.minPivot >= this.dN
d[] elements > this.minPivot
Infinity * this.minPivot + 8.44424930131969E14 * orig(lambda) - 6.516145710851688E16 == 0
orig(lambda) % this.minPivot == 0
this.minPivot % orig(lambda) == 0
this.minPivot < orig(lambda)
this.sigma >= this.tau
this.sigma >= this.eMin
this.sigma >= this.dMin
this.sigma >= this.dMin1
this.sigma >= this.dMin2
this.sigma >= this.dN
this.sigmaLow <= this.dMin1
d[] elements >= this.sigmaLow
this.sigmaLow % orig(lambda) == 0
this.sigmaLow <= orig(lambda)
this.tau <= this.dMin1
this.tau <= this.dMin2
this.imagEigenvalues[] elements == this.tau
this.tau in this.imagEigenvalues[]
d[] elements >= this.tau
this.tau % orig(lambda) == 0
this.tau <= orig(lambda)
this.work[] < this.realEigenvalues[] (lexically)
this.work[] <= this.realEigenvalues[] (lexically)
this.work[] < d[] (lexically)
this.work[] <= d[] (lexically)
this.pingPong < size(l[])-1
this.eMin <= this.dMin2
this.eMin >= this.dN
this.tType < size(l[])-1
this.dMin in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dMin
d[] elements >= this.dMin
this.dMin <= orig(lambda)
this.dMin1 >= this.dN
this.dMin2 >= this.dN
this.dN in this.imagEigenvalues[]
this.imagEigenvalues[] elements == this.dN
d[] elements >= this.dN
this.dN % orig(lambda) == 0
this.dN <= orig(lambda)
this.realEigenvalues[] > this.imagEigenvalues[] (lexically)
this.realEigenvalues[] > d[] (lexically)
this.realEigenvalues[] >= d[] (lexically)
this.realEigenvalues[] > l[] (lexically)
this.realEigenvalues[] >= l[] (lexically)
this.imagEigenvalues[] < d[] (lexically)
this.imagEigenvalues[] <= d[] (elementwise)
this.imagEigenvalues[] > l[] (lexically)
this.imagEigenvalues[] >= l[] (lexically)
d[] > l[] (lexically)
d[] >= l[] (lexically)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.transformToTridiagonal(org.apache.commons.math.linear.RealMatrix):::ENTER
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.lowerSpectra
this.splitTolerance == this.lowerSpectra
this.main == this.secondary
this.main == this.squaredSecondary
this.main == this.work
this.main == this.realEigenvalues
this.main == this.imagEigenvalues
this.lowerSpectra == this.upperSpectra
this.lowerSpectra == this.minPivot
this.lowerSpectra == this.sigma
this.lowerSpectra == this.sigmaLow
this.lowerSpectra == this.tau
this.lowerSpectra == this.qMax
this.lowerSpectra == this.eMin
this.lowerSpectra == this.dMin
this.lowerSpectra == this.dMin1
this.lowerSpectra == this.dMin2
this.lowerSpectra == this.dN
this.lowerSpectra == this.dN1
this.lowerSpectra == this.dN2
this.lowerSpectra == this.g
this.pingPong == this.tType
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.main == null
this.transformer == null
this.lowerSpectra == 0.0
this.pingPong == 0
this.eigenvectors == null
this.cachedV == null
matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.transformToTridiagonal(org.apache.commons.math.linear.RealMatrix):::EXIT
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE == this.lowerSpectra
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 == this.lowerSpectra
this.splitTolerance == this.lowerSpectra
this.splitTolerance == orig(this.splitTolerance)
this.main[] == this.transformer.main[]
this.secondary[] == this.transformer.secondary[]
this.transformer.cachedQ == this.cachedV
this.transformer.cachedQt == this.cachedV
this.transformer.cachedT == this.cachedV
this.lowerSpectra == this.upperSpectra
this.lowerSpectra == this.minPivot
this.lowerSpectra == this.sigma
this.lowerSpectra == this.sigmaLow
this.lowerSpectra == this.tau
this.lowerSpectra == this.qMax
this.lowerSpectra == this.eMin
this.lowerSpectra == this.dMin
this.lowerSpectra == this.dMin1
this.lowerSpectra == this.dMin2
this.lowerSpectra == this.dN
this.lowerSpectra == this.dN1
this.lowerSpectra == this.dN2
this.lowerSpectra == this.g
this.lowerSpectra == orig(this.lowerSpectra)
this.lowerSpectra == orig(this.upperSpectra)
this.lowerSpectra == orig(this.minPivot)
this.lowerSpectra == orig(this.sigma)
this.lowerSpectra == orig(this.sigmaLow)
this.lowerSpectra == orig(this.tau)
this.lowerSpectra == orig(this.qMax)
this.lowerSpectra == orig(this.eMin)
this.lowerSpectra == orig(this.dMin)
this.lowerSpectra == orig(this.dMin1)
this.lowerSpectra == orig(this.dMin2)
this.lowerSpectra == orig(this.dN)
this.lowerSpectra == orig(this.dN1)
this.lowerSpectra == orig(this.dN2)
this.lowerSpectra == orig(this.g)
this.work == this.realEigenvalues
this.work == this.imagEigenvalues
this.work == orig(this.main)
this.work == orig(this.secondary)
this.work == orig(this.squaredSecondary)
this.work == orig(this.work)
this.work == orig(this.realEigenvalues)
this.work == orig(this.imagEigenvalues)
this.pingPong == this.tType
this.pingPong == orig(this.pingPong)
this.pingPong == orig(this.tType)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.secondary[]) == size(this.transformer.householderVectors[])-1
size(this.secondary[]) == size(this.transformer.main[])-1
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.squaredSecondary[] one of { [2.0000000000000004, 6.004365899753108E-32], [17.0, 5.53633217993079], [20.000000000000004, 0.0] }
this.lowerSpectra == 0.0
this.work == null
this.pingPong == 0
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 3
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.updateSigma(double):::ENTER
this.tau == shift
this.dMin2 == this.dN2
this.realEigenvalues[] == this.imagEigenvalues[]
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
size(this.main[]) == size(this.imagEigenvalues[])
size(this.secondary[]) == size(this.imagEigenvalues[])-1
this has only one value
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.work has only one value
this.qMax == 20464.940196239226
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.main[] elements > this.splitTolerance
this.squaredSecondary[] elements > this.splitTolerance
this.sigma % this.splitTolerance == 0
this.splitTolerance % this.sigma == 0
this.splitTolerance % this.tau == 0
this.splitTolerance < this.tau
this.tau % this.splitTolerance == 0
this.splitTolerance in this.work[]
this.eMin % this.splitTolerance == 0
this.splitTolerance % this.eMin == 0
this.splitTolerance < this.eMin
this.dMin % this.splitTolerance == 0
this.splitTolerance <= this.dMin
this.dMin1 % this.splitTolerance == 0
this.splitTolerance % this.dMin1 == 0
this.splitTolerance < this.dMin1
this.dMin2 % this.splitTolerance == 0
this.splitTolerance % this.dMin2 == 0
this.splitTolerance < this.dMin2
this.dN % this.splitTolerance == 0
this.splitTolerance != this.dN
this.splitTolerance % this.dN == 0
this.dN1 % this.splitTolerance == 0
this.splitTolerance % this.dN1 == 0
this.splitTolerance < this.dN1
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] elements > this.minPivot
this.main[] elements > this.sigmaLow
this.main[] elements < this.qMax
this.main[] elements > this.g
this.main[] > this.realEigenvalues[] (elementwise)
this.secondary[] < this.squaredSecondary[] (elementwise)
this.secondary[] elements < this.upperSpectra
this.secondary[] < this.work[] (lexically)
this.secondary[] <= this.work[] (lexically)
this.secondary[] elements < this.qMax
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements > this.minPivot
this.squaredSecondary[] elements > this.sigmaLow
this.squaredSecondary[] elements > this.dMin
this.squaredSecondary[] elements > this.dMin1
this.squaredSecondary[] elements > this.dN
this.squaredSecondary[] elements > this.dN1
this.squaredSecondary[] elements > this.g
this.lowerSpectra < this.sigma
this.lowerSpectra < this.tau
this.lowerSpectra in this.work[]
this.work[] elements >= this.lowerSpectra
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.lowerSpectra < this.dN
this.lowerSpectra < this.dN1
this.upperSpectra > this.sigma
this.upperSpectra > this.tau
this.upperSpectra in this.work[]
this.work[] elements <= this.upperSpectra
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.upperSpectra > this.dN
this.upperSpectra > this.dN1
this.minPivot % this.sigma == 0
this.sigma % this.minPivot == 0
this.minPivot % this.tau == 0
this.minPivot < this.tau
this.tau % this.minPivot == 0
this.minPivot in this.work[]
this.eMin % this.minPivot == 0
this.minPivot % this.eMin == 0
this.minPivot < this.eMin
this.dMin % this.minPivot == 0
this.minPivot <= this.dMin
this.dMin1 % this.minPivot == 0
this.minPivot % this.dMin1 == 0
this.minPivot < this.dMin1
this.dMin2 % this.minPivot == 0
this.minPivot % this.dMin2 == 0
this.minPivot < this.dMin2
this.dN % this.minPivot == 0
this.minPivot != this.dN
this.minPivot % this.dN == 0
this.dN1 % this.minPivot == 0
this.minPivot % this.dN1 == 0
this.minPivot < this.dN1
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
this.sigma != this.tau
this.sigma < this.qMax
this.sigma != this.eMin
this.sigma != this.dMin
this.sigma != this.dMin1
this.sigma != this.dMin2
this.sigma != this.dN
this.sigma != this.dN1
this.sigmaLow % this.tau == 0
this.sigmaLow < this.tau
this.sigmaLow in this.work[]
this.sigmaLow % this.eMin == 0
this.sigmaLow < this.eMin
this.sigmaLow % this.dMin1 == 0
this.sigmaLow < this.dMin1
this.sigmaLow % this.dMin2 == 0
this.sigmaLow < this.dMin2
this.sigmaLow != this.dN
this.sigmaLow % this.dN == 0
this.sigmaLow % this.dN1 == 0
this.sigmaLow < this.dN1
this.realEigenvalues[] elements == this.sigmaLow
this.sigmaLow in this.realEigenvalues[]
this.tau < this.qMax
this.tau < this.eMin
this.tau != this.dMin1
this.tau != this.dMin2
this.tau != this.dN
this.tau != this.dN1
this.eMin in this.work[]
this.dN in this.work[]
this.g in this.work[]
this.work[] > this.realEigenvalues[] (lexically)
this.work[] >= this.realEigenvalues[] (lexically)
this.pingPong > this.tType
this.qMax > this.eMin
this.qMax > this.dMin
this.qMax > this.dMin1
this.qMax > this.dMin2
this.qMax > this.dN
this.qMax > this.dN1
this.eMin > this.dMin
this.eMin >= this.dMin1
this.eMin != this.dMin2
this.eMin != this.dN
this.eMin >= this.dN1
this.eMin > this.g
this.dMin >= this.g
this.dMin1 != this.dN
this.dMin1 > this.g
this.dMin2 != this.dN
this.dMin2 != this.dN1
this.dMin2 > this.g
this.dN != this.dN1
this.dN >= this.g
this.dN1 > this.g
this.g in this.realEigenvalues[]
this.realEigenvalues[] elements == this.g
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.updateSigma(double):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.tau == orig(this.tau)
this.tau == orig(shift)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == this.dN2
this.dMin2 == orig(this.dMin2)
this.dMin2 == orig(this.dN2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.g == orig(this.sigmaLow)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == this.imagEigenvalues[]
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.realEigenvalues[] == orig(this.imagEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == this.cachedD
this.cachedV == this.cachedVt
this.cachedV == orig(this.cachedV)
this.cachedV == orig(this.cachedD)
this.cachedV == orig(this.cachedVt)
size(this.main[]) == size(this.imagEigenvalues[])
size(this.main[]) == orig(size(this.realEigenvalues[]))
size(this.main[]) == orig(size(this.imagEigenvalues[]))
size(this.secondary[]) == size(this.imagEigenvalues[])-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.squaredSecondary[]))
size(this.secondary[]) == orig(size(this.realEigenvalues[]))-1
size(this.secondary[]) == orig(size(this.imagEigenvalues[]))-1
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.minPivot == 6.000824412933464E-301
this.work has only one value
this.qMax == 20464.940196239226
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.realEigenvalues[] elements == 0.0
this.imagEigenvalues has only one value
this.eigenvectors == null
this.cachedV == null
size(this.main[]) == 7
size(this.work[]) == 42
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE < this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE
this.main[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.squaredSecondary[] elements > org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.sigma == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.sigma
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.tau == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.tau
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.work[]
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.eMin == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.eMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 <= this.dMin
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dMin2 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dMin2
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 != this.dN
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 % this.dN1 == 0
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 < this.dN1
org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2 in this.realEigenvalues[]
this.realEigenvalues[] elements == org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE_2
this.main[] elements > this.splitTolerance
this.squaredSecondary[] elements > this.splitTolerance
this.sigma % this.splitTolerance == 0
this.splitTolerance % this.sigma == 0
this.splitTolerance < this.sigma
this.splitTolerance % this.tau == 0
this.splitTolerance < this.tau
this.tau % this.splitTolerance == 0
this.splitTolerance in this.work[]
this.eMin % this.splitTolerance == 0
this.splitTolerance % this.eMin == 0
this.splitTolerance < this.eMin
this.dMin % this.splitTolerance == 0
this.splitTolerance <= this.dMin
this.dMin1 % this.splitTolerance == 0
this.splitTolerance % this.dMin1 == 0
this.splitTolerance < this.dMin1
this.dMin2 % this.splitTolerance == 0
this.splitTolerance % this.dMin2 == 0
this.splitTolerance < this.dMin2
this.dN % this.splitTolerance == 0
this.splitTolerance != this.dN
this.splitTolerance % this.dN == 0
this.dN1 % this.splitTolerance == 0
this.splitTolerance % this.dN1 == 0
this.splitTolerance < this.dN1
this.realEigenvalues[] elements == this.splitTolerance
this.splitTolerance in this.realEigenvalues[]
orig(this.sigma) % this.splitTolerance == 0
this.splitTolerance % orig(this.sigma) == 0
this.splitTolerance <= orig(this.sigma)
this.main[] elements > this.lowerSpectra
this.main[] elements < this.upperSpectra
this.main[] elements > this.minPivot
this.main[] elements > this.sigmaLow
this.main[] elements < this.qMax
this.main[] elements > this.g
this.main[] > this.realEigenvalues[] (elementwise)
this.main[] elements > orig(this.sigmaLow)
this.secondary[] < this.squaredSecondary[] (elementwise)
this.secondary[] elements < this.upperSpectra
this.secondary[] elements < this.sigma
this.secondary[] < this.work[] (lexically)
this.secondary[] <= this.work[] (lexically)
this.secondary[] elements < this.qMax
this.squaredSecondary[] elements > this.lowerSpectra
this.squaredSecondary[] elements > this.minPivot
this.squaredSecondary[] elements > this.sigmaLow
this.squaredSecondary[] elements > this.dMin
this.squaredSecondary[] elements > this.dMin1
this.squaredSecondary[] elements > this.dN
this.squaredSecondary[] elements > this.dN1
this.squaredSecondary[] elements > this.g
this.squaredSecondary[] elements > orig(this.sigmaLow)
this.lowerSpectra < this.sigma
this.lowerSpectra < this.tau
this.lowerSpectra in this.work[]
this.work[] elements >= this.lowerSpectra
this.lowerSpectra < this.eMin
this.lowerSpectra < this.dMin
this.lowerSpectra < this.dMin1
this.lowerSpectra < this.dMin2
this.lowerSpectra < this.dN
this.lowerSpectra < this.dN1
this.lowerSpectra < orig(this.sigma)
this.upperSpectra > this.sigma
this.upperSpectra > this.tau
this.upperSpectra in this.work[]
this.work[] elements <= this.upperSpectra
this.upperSpectra > this.eMin
this.upperSpectra > this.dMin
this.upperSpectra > this.dMin1
this.upperSpectra > this.dMin2
this.upperSpectra > this.dN
this.upperSpectra > this.dN1
this.upperSpectra > orig(this.sigma)
this.minPivot % this.sigma == 0
this.minPivot < this.sigma
this.sigma % this.minPivot == 0
this.minPivot % this.tau == 0
this.minPivot < this.tau
this.tau % this.minPivot == 0
this.minPivot in this.work[]
this.eMin % this.minPivot == 0
this.minPivot % this.eMin == 0
this.minPivot < this.eMin
this.dMin % this.minPivot == 0
this.minPivot <= this.dMin
this.dMin1 % this.minPivot == 0
this.minPivot % this.dMin1 == 0
this.minPivot < this.dMin1
this.dMin2 % this.minPivot == 0
this.minPivot % this.dMin2 == 0
this.minPivot < this.dMin2
this.dN % this.minPivot == 0
this.minPivot != this.dN
this.minPivot % this.dN == 0
this.dN1 % this.minPivot == 0
this.minPivot % this.dN1 == 0
this.minPivot < this.dN1
this.minPivot in this.realEigenvalues[]
this.realEigenvalues[] elements == this.minPivot
orig(this.sigma) % this.minPivot == 0
this.minPivot % orig(this.sigma) == 0
this.minPivot <= orig(this.sigma)
this.sigma > this.sigmaLow
this.sigmaLow % this.sigma == 0
this.sigma >= this.tau
this.sigma < this.qMax
this.sigma != this.eMin
this.sigma > this.dMin
this.sigma > this.dMin1
this.sigma > this.dMin2
this.sigma > this.dN
this.sigma > this.dN1
this.sigma > this.g
this.sigma >= orig(this.sigma)
orig(this.sigmaLow) % this.sigma == 0
this.sigma > orig(this.sigmaLow)
this.sigmaLow % this.tau == 0
this.sigmaLow < this.tau
this.sigmaLow in this.work[]
this.sigmaLow % this.eMin == 0
this.sigmaLow < this.eMin
this.sigmaLow <= this.dMin
this.sigmaLow % this.dMin1 == 0
this.sigmaLow < this.dMin1
this.sigmaLow % this.dMin2 == 0
this.sigmaLow < this.dMin2
this.sigmaLow % this.dN == 0
this.sigmaLow < this.dN
this.sigmaLow % this.dN1 == 0
this.sigmaLow < this.dN1
this.realEigenvalues[] elements == this.sigmaLow
this.sigmaLow in this.realEigenvalues[]
this.sigmaLow <= orig(this.sigma)
this.tau < this.qMax
this.tau < this.eMin
this.tau != this.dMin1
this.tau != this.dMin2
this.tau != this.dN
this.tau != this.dN1
this.tau != orig(this.sigma)
orig(this.sigmaLow) % this.tau == 0
this.tau > orig(this.sigmaLow)
this.eMin in this.work[]
this.dN in this.work[]
this.g in this.work[]
this.work[] > this.realEigenvalues[] (lexically)
this.work[] >= this.realEigenvalues[] (lexically)
orig(this.sigmaLow) in this.work[]
this.pingPong > this.tType
this.qMax > this.eMin
this.qMax > this.dMin
this.qMax > this.dMin1
this.qMax > this.dMin2
this.qMax > this.dN
this.qMax > this.dN1
this.qMax > orig(this.sigma)
this.eMin > this.dMin
this.eMin >= this.dMin1
this.eMin != this.dMin2
this.eMin != this.dN
this.eMin >= this.dN1
this.eMin > this.g
this.eMin != orig(this.sigma)
orig(this.sigmaLow) % this.eMin == 0
this.eMin > orig(this.sigmaLow)
this.dMin >= this.g
this.dMin != orig(this.sigma)
this.dMin1 != this.dN
this.dMin1 > this.g
this.dMin1 != orig(this.sigma)
orig(this.sigmaLow) % this.dMin1 == 0
this.dMin1 > orig(this.sigmaLow)
this.dMin2 != this.dN
this.dMin2 != this.dN1
this.dMin2 > this.g
this.dMin2 != orig(this.sigma)
orig(this.sigmaLow) % this.dMin2 == 0
this.dMin2 > orig(this.sigmaLow)
this.dN != this.dN1
this.dN >= this.g
this.dN != orig(this.sigma)
orig(this.sigmaLow) % this.dN == 0
this.dN != orig(this.sigmaLow)
this.dN1 > this.g
this.dN1 != orig(this.sigma)
orig(this.sigmaLow) % this.dN1 == 0
this.dN1 > orig(this.sigmaLow)
this.g in this.realEigenvalues[]
this.realEigenvalues[] elements == this.g
this.g <= orig(this.sigma)
orig(this.sigmaLow) in this.realEigenvalues[]
this.realEigenvalues[] elements == orig(this.sigmaLow)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests:::OBJECT
this.matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.refValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
this.refValues[] sorted by >
this.fName != null
size(this.refValues[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.EigenDecompositionImplTestFailingTests(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.EigenDecompositionImplTestFailingTests(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
this.matrix == null
this.refValues == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.checkEigenValues(double[], org.apache.commons.math.linear.EigenDecomposition, double):::ENTER
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
targetValues[] one of { [2.0, 0.0, 12.0], [2.0, 1.0, -1.0], [8.0, -1.0, -1.0] }
targetValues[] elements >= -1.0
ed.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl.class
tolerance == 1.0E-12
size(targetValues[]) == 3
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.checkEigenValues(double[], org.apache.commons.math.linear.EigenDecomposition, double):::EXIT
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
targetValues[] == orig(targetValues[])
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
targetValues[] one of { [2.0, 0.0, 12.0], [2.0, 1.0, -1.0], [8.0, -1.0, -1.0] }
targetValues[] elements >= -1.0
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.checkEigenVector(double[], org.apache.commons.math.linear.EigenDecomposition, double):::ENTER
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
ed.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl.class
tolerance == 1.0E-12
size(eigenVector[]) == 3
this.matrix.getClass().getName() != ed.getClass().getName()
this.refValues[] > eigenVector[] (lexically)
this.refValues[] >= eigenVector[] (lexically)
this.refValues[] elements > tolerance
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.checkEigenVector(double[], org.apache.commons.math.linear.EigenDecomposition, double):::EXIT
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
eigenVector[] == orig(eigenVector[])
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
this.matrix.getClass().getName() != orig(ed.getClass().getName())
this.refValues[] > eigenVector[] (lexically)
this.refValues[] >= eigenVector[] (lexically)
this.refValues[] elements > orig(tolerance)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.createDiagonalMatrix(double[], int, int):::ENTER
rows == columns
rows == size(diagonal[])
diagonal[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
rows == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.createDiagonalMatrix(double[], int, int):::EXIT
diagonal[] == orig(diagonal[])
diagonal[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.createOrthogonalMatrix(java.util.Random, int):::ENTER
size == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.createOrthogonalMatrix(java.util.Random, int):::EXIT
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.createTestMatrix(java.util.Random, double[]):::ENTER
eigenValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
size(eigenValues[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.createTestMatrix(java.util.Random, double[]):::EXIT
eigenValues[] == orig(eigenValues[])
eigenValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.isIncludedColumn(double[], org.apache.commons.math.linear.RealMatrix, double):::ENTER
this.matrix.getClass().getName() == searchMatrix.getClass().getName()
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
tolerance == 1.0E-12
size(column[]) == 3
this.refValues[] > column[] (lexically)
this.refValues[] >= column[] (lexically)
this.refValues[] elements > tolerance
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.isIncludedColumn(double[], org.apache.commons.math.linear.RealMatrix, double):::EXIT
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.matrix.getClass().getName() == orig(searchMatrix.getClass().getName())
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
column[] == orig(column[])
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
return == true
this.refValues[] > column[] (lexically)
this.refValues[] >= column[] (lexically)
this.refValues[] elements > orig(tolerance)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.isIncludedColumn(double[], org.apache.commons.math.linear.RealMatrix, double):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.isIncludedValue(double, double[], double):::ENTER
this.matrix != null
this.refValues != null
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
searchArray != null
tolerance == 1.0E-12
size(searchArray[]) == 3
this.refValues[] elements > tolerance
value in searchArray[]
value % tolerance == 0
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.isIncludedValue(double, double[], double):::EXIT
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
searchArray[] == orig(searchArray[])
this.matrix != null
this.refValues != null
this.fName.toString one of { "testDistinctEigenvalues", "testRepeatedEigenvalue", "testZeroDivide" }
return == true
this.refValues[] elements > orig(tolerance)
orig(value) in searchArray[]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.isIncludedValue(double, double[], double):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.setUp():::ENTER
this.matrix == null
this.refValues == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.tearDown():::ENTER
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.matrix == null
this.refValues == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testDistinctEigenvalues():::ENTER
this has only one value
this.matrix has only one value
this.refValues has only one value
this.fName has only one value
this.fName.toString == "testDistinctEigenvalues"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testDistinctEigenvalues():::EXIT
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.matrix has only one value
this.refValues has only one value
this.fName has only one value
this.fName.toString == "testDistinctEigenvalues"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testRepeatedEigenvalue():::ENTER
this has only one value
this.matrix has only one value
this.refValues has only one value
this.fName has only one value
this.fName.toString == "testRepeatedEigenvalue"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testRepeatedEigenvalue():::EXIT
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.matrix has only one value
this.refValues has only one value
this.fName has only one value
this.fName.toString == "testRepeatedEigenvalue"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testZeroDivide():::ENTER
this has only one value
this.matrix has only one value
this.refValues has only one value
this.fName has only one value
this.fName.toString == "testZeroDivide"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testZeroDivide():::EXIT
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.matrix has only one value
this.refValues has only one value
this.fName has only one value
this.fName.toString == "testZeroDivide"
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
column one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::ENTER
left.getClass().getName() == right.getClass().getName()
left.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][]):::ENTER
data.getClass().getName() == double[][].class
size(data[]) one of { 3, 6 }
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][]):::EXIT
data[] == orig(data[])
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
return.getClass().getName() != orig(data.getClass().getName())
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(int, int):::ENTER
rows == columns
rows == 3
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(int, int):::EXIT
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::CLASS
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::OBJECT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == this.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == this.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == this.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == this.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == this.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == this.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == this.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == this.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == this.separator
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == this.separator.toString
this has only one value
this.trimmedSeparator has only one value
this.trimmedSeparator.toString == ";"
this.format has only one value
this.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix has only one value
prefix.toString == "{"
suffix has only one value
suffix.toString == "}"
separator has only one value
separator.toString == "; "
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(separator)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == separator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(separator.toString)
this.format == orig(format)
this.format.getClass().getName() == orig(format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::ENTER
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::EXIT
this.format == orig(format)
this.format.getClass().getName() == orig(format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == return.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == return.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == return.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == return.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == return.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == return.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == return.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == return.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == return.separator
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == return.separator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == return.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == return.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == return.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == return.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == return.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == return.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == return.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == return.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == return.separator
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == return.separator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer:::OBJECT
this.cachedQ.getClass().getName() == this.cachedQt.getClass().getName()
size(this.householderVectors[]) == size(this.main[])
size(this.householderVectors[])-1 == size(this.secondary[])
size(this.main[])-1 == size(this.secondary[])
this.householderVectors != null
this.householderVectors.getClass().getName() == double[][].class
this.householderVectors[] elements != null
this.main != null
this.secondary != null
this.secondary[] sorted by <=
this.cachedQ.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedQt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedT == null
size(this.householderVectors[]) == 3
this.householderVectors.getClass().getName() != this.cachedQ.getClass().getName()
this.householderVectors.getClass().getName() != this.cachedQt.getClass().getName()
this.main[] > this.secondary[] (lexically)
this.main[] >= this.secondary[] (lexically)
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.TriDiagonalTransformer(org.apache.commons.math.linear.RealMatrix):::ENTER
matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.TriDiagonalTransformer(org.apache.commons.math.linear.RealMatrix):::EXIT
this.cachedQ == this.cachedQt
this.cachedQ == this.cachedT
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.cachedQ == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getMainDiagonalRef():::ENTER
this.cachedQ == this.cachedQt
this.cachedQ == this.cachedT
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.cachedQ == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getMainDiagonalRef():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == return
this.main[] == return[]
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ == this.cachedQt
this.cachedQ == this.cachedT
this.cachedQ == orig(this.cachedQ)
this.cachedQ == orig(this.cachedQt)
this.cachedQ == orig(this.cachedT)
return == orig(this.main)
return[] == orig(this.main[])
size(this.householderVectors[]) == size(return[])
size(this.secondary[]) == size(return[])-1
size(this.secondary[]) == orig(size(this.householderVectors[]))-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(return[]) == orig(size(this.householderVectors[]))
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.cachedQ == null
return[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
size(return[]) == 3
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQ():::ENTER
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.secondary[] sorted by <
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQ():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ == return
this.cachedQ.getClass().getName() == return.getClass().getName()
this.cachedQt.getClass().getName() == return.getClass().getName()
this.cachedT == orig(this.cachedT)
return.getClass().getName() == orig(this.cachedQ.getClass().getName())
size(this.householderVectors[]) == orig(size(this.main[]))
size(this.secondary[]) == orig(size(this.householderVectors[]))-1
size(this.secondary[]) == orig(size(this.main[]))-1
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.secondary[] sorted by <
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.householderVectors.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQT():::ENTER
this.cachedQ == this.cachedQt
this.cachedQ == this.cachedT
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.cachedQ == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQT():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ == this.cachedT
this.cachedQ == orig(this.cachedQ)
this.cachedQ == orig(this.cachedQt)
this.cachedQ == orig(this.cachedT)
this.cachedQt == return
this.cachedQt.getClass().getName() == return.getClass().getName()
size(this.householderVectors[]) == orig(size(this.main[]))
size(this.secondary[]) == orig(size(this.householderVectors[]))-1
size(this.secondary[]) == orig(size(this.main[]))-1
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.cachedQ == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getSecondaryDiagonalRef():::ENTER
this.cachedQ == this.cachedQt
this.cachedQ == this.cachedT
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.cachedQ == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getSecondaryDiagonalRef():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == return
this.secondary[] == return[]
this.cachedQ == this.cachedQt
this.cachedQ == this.cachedT
this.cachedQ == orig(this.cachedQ)
this.cachedQ == orig(this.cachedQt)
this.cachedQ == orig(this.cachedT)
return == orig(this.secondary)
return[] == orig(this.secondary[])
size(this.householderVectors[]) == orig(size(this.main[]))
size(this.householderVectors[])-1 == size(return[])
size(this.main[])-1 == size(return[])
size(return[]) == orig(size(this.householderVectors[]))-1
size(return[]) == orig(size(this.main[]))-1
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.cachedQ == null
return[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.transform():::ENTER
this.cachedQ == this.cachedQt
this.cachedQ == this.cachedT
this.main[] == [0.0, 0.0, 0.0]
this.main[] elements == 0.0
this.secondary[] == [0.0, 0.0]
this.secondary[] elements == 0.0
this.cachedQ == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.transform():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.secondary == orig(this.secondary)
this.cachedQ == this.cachedQt
this.cachedQ == this.cachedT
this.cachedQ == orig(this.cachedQ)
this.cachedQ == orig(this.cachedQt)
this.cachedQ == orig(this.cachedT)
size(this.householderVectors[]) == orig(size(this.main[]))
size(this.secondary[]) == orig(size(this.householderVectors[]))-1
size(this.secondary[]) == orig(size(this.main[]))-1
size(this.secondary[]) == orig(size(this.secondary[]))
this.main[] one of { [0.0, 0.9999999999999994, 0.9999999999999999], [3.0, 3.9999999999999996, -1.0], [3.0, 9.588235294117647, 1.4117647058823526] }
this.secondary[] one of { [-4.47213595499958, 0.0], [-4.123105625617661, 2.352941176470587], [-1.4142135623730951, -2.4503807662796223E-16] }
this.cachedQ == null
===========================================================================
org.apache.commons.math.util.CompositeFormat:::CLASS
===========================================================================
org.apache.commons.math.util.CompositeFormat:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.RealVectorFormat.class
===========================================================================
org.apache.commons.math.util.CompositeFormat.CompositeFormat():::EXIT
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::EXIT
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String):::ENTER
className has only one value
className.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String):::EXIT
className.toString == orig(className.toString)
className.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
return has only one value
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String, java.lang.Class):::ENTER
className has only one value
className.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
callingClass has only one value
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String, java.lang.Class):::EXIT
className.toString == orig(className.toString)
className.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
return has only one value
===========================================================================
org.junit.internal.MethodSorter$1:::OBJECT
this has only one value
===========================================================================
org.junit.internal.MethodSorter$1.():::EXIT
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::ENTER
m1 != null
m2 != null
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT19
return one of { -1, 1 }
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT21
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT
return != 0
===========================================================================
org.junit.internal.MethodSorter$2:::OBJECT
this has only one value
===========================================================================
org.junit.internal.MethodSorter$2.():::EXIT
===========================================================================
org.junit.internal.MethodSorter$2.compare(java.lang.reflect.Method, java.lang.reflect.Method):::ENTER
m1 != null
m2 != null
===========================================================================
org.junit.internal.MethodSorter$2.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT34
===========================================================================
org.junit.internal.MethodSorter$2.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT
===========================================================================
org.junit.internal.MethodSorter:::CLASS
org.junit.internal.MethodSorter.DEFAULT has only one value
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == org.junit.internal.MethodSorter$1.class
org.junit.internal.MethodSorter.NAME_ASCENDING has only one value
org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName() == org.junit.internal.MethodSorter$2.class
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() != org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName()
===========================================================================
org.junit.internal.MethodSorter.getDeclaredMethods(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.MethodSorter.getDeclaredMethods(java.lang.Class):::EXIT
org.junit.internal.MethodSorter.DEFAULT == orig(org.junit.internal.MethodSorter.DEFAULT)
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == orig(org.junit.internal.MethodSorter.DEFAULT.getClass().getName())
org.junit.internal.MethodSorter.NAME_ASCENDING == orig(org.junit.internal.MethodSorter.NAME_ASCENDING)
org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName() == orig(org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName())
return.getClass().getName() == java.lang.reflect.Method[].class
size(return[]) one of { 14, 49 }
===========================================================================
org.junit.internal.MethodSorter.getSorter(org.junit.FixMethodOrder):::ENTER
fixMethodOrder == null
===========================================================================
org.junit.internal.MethodSorter.getSorter(org.junit.FixMethodOrder):::EXIT68
===========================================================================
org.junit.internal.MethodSorter.getSorter(org.junit.FixMethodOrder):::EXIT
org.junit.internal.MethodSorter.DEFAULT == return
org.junit.internal.MethodSorter.DEFAULT == orig(org.junit.internal.MethodSorter.DEFAULT)
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == return.getClass().getName()
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == orig(org.junit.internal.MethodSorter.DEFAULT.getClass().getName())
org.junit.internal.MethodSorter.NAME_ASCENDING == orig(org.junit.internal.MethodSorter.NAME_ASCENDING)
org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName() == orig(org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName())
===========================================================================
org.junit.internal.RealSystem:::OBJECT
this has only one value
===========================================================================
org.junit.internal.RealSystem.RealSystem():::EXIT
===========================================================================
org.junit.internal.RealSystem.out():::ENTER
===========================================================================
org.junit.internal.RealSystem.out():::EXIT
return has only one value
===========================================================================
org.junit.internal.TextListener:::OBJECT
this has only one value
this.writer has only one value
this.writer != null
===========================================================================
org.junit.internal.TextListener.TextListener(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
org.junit.internal.TextListener.TextListener(java.io.PrintStream):::EXIT
this.writer == orig(writer)
===========================================================================
org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem):::ENTER
system has only one value
system.getClass().getName() == org.junit.internal.RealSystem.class
===========================================================================
org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem):::EXIT
===========================================================================
org.junit.internal.TextListener.elapsedTimeAsString(long):::ENTER
runTime == 329
===========================================================================
org.junit.internal.TextListener.elapsedTimeAsString(long):::EXIT
this.writer == orig(this.writer)
return has only one value
return.toString == "0.329"
===========================================================================
org.junit.internal.TextListener.getWriter():::ENTER
===========================================================================
org.junit.internal.TextListener.getWriter():::EXIT
this.writer == return
return == orig(this.writer)
return has only one value
===========================================================================
org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String):::ENTER
org.junit.runner.notification.Failure.serialVersionUID == org.junit.runner.Description.serialVersionUID
each has only one value
each.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
each.fDescription.fChildren has only one value
each.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
each.fDescription.fDisplayName has only one value
each.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
each.fDescription.fUniqueId has only one value
each.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
each.fDescription.fAnnotations has only one value
each.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
each.fDescription.fAnnotations[] == []
each.fDescription.fAnnotations[].getClass().getName() == []
each.fDescription.fTestClass has only one value
each.fThrownException has only one value
prefix has only one value
prefix.toString == "1"
===========================================================================
org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String):::EXIT
this.writer == orig(this.writer)
each.fDescription == orig(each.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
each.fDescription.fChildren == orig(each.fDescription.fChildren)
each.fDescription.fChildren.getClass().getName() == orig(each.fDescription.fChildren.getClass().getName())
each.fDescription.fDisplayName == orig(each.fDescription.fDisplayName)
each.fDescription.fDisplayName.toString == orig(each.fDescription.fDisplayName.toString)
each.fDescription.fUniqueId == orig(each.fDescription.fUniqueId)
each.fDescription.fUniqueId.getClass().getName() == orig(each.fDescription.fUniqueId.getClass().getName())
each.fDescription.fAnnotations == orig(each.fDescription.fAnnotations)
each.fDescription.fAnnotations.getClass().getName() == orig(each.fDescription.fAnnotations.getClass().getName())
each.fDescription.fAnnotations[] == orig(each.fDescription.fAnnotations[])
each.fDescription.fTestClass == orig(each.fDescription.fTestClass)
each.fThrownException == orig(each.fThrownException)
prefix.toString == orig(prefix.toString)
each.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
each.fDescription.fChildren has only one value
each.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
each.fDescription.fDisplayName has only one value
each.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
each.fDescription.fUniqueId has only one value
each.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
each.fDescription.fAnnotations has only one value
each.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
each.fDescription.fAnnotations[] == []
each.fDescription.fAnnotations[].getClass().getName() == []
each.fDescription.fTestClass has only one value
each.fThrownException has only one value
prefix.toString == "1"
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(result.failures[])
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::EXIT73
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.printFooter(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(result.failures[])
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.printFooter(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.printHeader(long):::ENTER
runTime == 329
===========================================================================
org.junit.internal.TextListener.printHeader(long):::EXIT
this.writer == orig(this.writer)
===========================================================================
org.junit.internal.TextListener.testFailure(org.junit.runner.notification.Failure):::ENTER
org.junit.runner.notification.Failure.serialVersionUID == org.junit.runner.Description.serialVersionUID
failure has only one value
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass has only one value
failure.fThrownException has only one value
===========================================================================
org.junit.internal.TextListener.testFailure(org.junit.runner.notification.Failure):::EXIT
this.writer == orig(this.writer)
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren.getClass().getName() == orig(failure.fDescription.fChildren.getClass().getName())
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fUniqueId == orig(failure.fDescription.fUniqueId)
failure.fDescription.fUniqueId.getClass().getName() == orig(failure.fDescription.fUniqueId.getClass().getName())
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fDescription.fTestClass == orig(failure.fDescription.fTestClass)
failure.fThrownException == orig(failure.fThrownException)
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass has only one value
failure.fThrownException has only one value
===========================================================================
org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(result.failures[])
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.internal.TextListener.testStarted(org.junit.runner.Description):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.internal.Throwables$1:::OBJECT
this has only one value
this.val$list has only one value
this.val$list != null
this.val$list[] contains no nulls and has only one value, of length 32
this.val$list[] elements != null
this.val$list[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]
this.val$list[].getClass().getName() elements == java.lang.StackTraceElement.class
this.val$list.getClass().getName() == java.util.Arrays$ArrayList.class
size(this.val$list[]) == 32
===========================================================================
org.junit.internal.Throwables$1.(java.util.List):::ENTER
$hidden$1 has only one value
$hidden$1[] contains no nulls and has only one value, of length 32
$hidden$1[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]
$hidden$1[].getClass().getName() elements == java.lang.StackTraceElement.class
$hidden$1.getClass().getName() == java.util.Arrays$ArrayList.class
size($hidden$1[]) == 32
===========================================================================
org.junit.internal.Throwables$1.(java.util.List):::EXIT
this.val$list == orig($hidden$1)
this.val$list[] == $hidden$1[]
this.val$list.getClass().getName() == orig($hidden$1.getClass().getName())
$hidden$1[] == orig($hidden$1[])
$hidden$1[] contains no nulls and has only one value, of length 32
$hidden$1[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]
$hidden$1[].getClass().getName() elements == java.lang.StackTraceElement.class
===========================================================================
org.junit.internal.Throwables$1.get(int):::ENTER
index < size(this.val$list[])-1
===========================================================================
org.junit.internal.Throwables$1.get(int):::EXIT
this.val$list == orig(this.val$list)
this.val$list[] == orig(this.val$list[])
this.val$list.getClass().getName() == orig(this.val$list.getClass().getName())
return != null
return.getClass().getName() == java.lang.StackTraceElement.class
return in this.val$list[]
return.getClass().getName() in this.val$list[].getClass().getName()
this.val$list.getClass().getName() != return.getClass().getName()
orig(index) < size(this.val$list[])-1
===========================================================================
org.junit.internal.Throwables$1.size():::ENTER
===========================================================================
org.junit.internal.Throwables$1.size():::EXIT
this.val$list == orig(this.val$list)
this.val$list[] == orig(this.val$list[])
this.val$list.getClass().getName() == orig(this.val$list.getClass().getName())
return == size(this.val$list[])
return == orig(size(this.val$list[]))
return == 32
this.val$list[return-1] has only one value
===========================================================================
org.junit.internal.Throwables$State$1:::CLASS
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == org.junit.internal.Throwables$State$1.class
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == org.junit.internal.Throwables$State$2.class
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == org.junit.internal.Throwables$State$3.class
org.junit.internal.Throwables$State.DONE has only one value
org.junit.internal.Throwables$State.DONE.getClass().getName() == org.junit.internal.Throwables$State$4.class
org.junit.internal.Throwables$State.$VALUES has only one value
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == org.junit.internal.Throwables$State[].class
org.junit.internal.Throwables$State.$VALUES[] contains no nulls and has only one value, of length 4
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() == [null, null, null, null]
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() elements == null
size(org.junit.internal.Throwables$State.$VALUES[]) == 4
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.DONE in org.junit.internal.Throwables$State.$VALUES[]
===========================================================================
org.junit.internal.Throwables$State$1:::OBJECT
this has only one value
===========================================================================
org.junit.internal.Throwables$State$1.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "PROCESSING_OTHER_CODE"
$hidden$2 == 0
===========================================================================
org.junit.internal.Throwables$State$1.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "PROCESSING_OTHER_CODE"
===========================================================================
org.junit.internal.Throwables$State$1.processLine(java.lang.String):::ENTER
methodName has only one value
methodName.toString == "org.junit.runner.JUnitCore.main()"
===========================================================================
org.junit.internal.Throwables$State$1.processLine(java.lang.String):::EXIT189
===========================================================================
org.junit.internal.Throwables$State$1.processLine(java.lang.String):::EXIT
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE)
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == return
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE)
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == return.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE)
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName())
org.junit.internal.Throwables$State.DONE == orig(org.junit.internal.Throwables$State.DONE)
org.junit.internal.Throwables$State.DONE.getClass().getName() == orig(org.junit.internal.Throwables$State.DONE.getClass().getName())
org.junit.internal.Throwables$State.$VALUES == orig(org.junit.internal.Throwables$State.$VALUES)
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == orig(org.junit.internal.Throwables$State.$VALUES.getClass().getName())
org.junit.internal.Throwables$State.$VALUES[] == orig(org.junit.internal.Throwables$State.$VALUES[])
methodName.toString == orig(methodName.toString)
methodName.toString == "org.junit.runner.JUnitCore.main()"
===========================================================================
org.junit.internal.Throwables$State$2:::CLASS
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE != null
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == org.junit.internal.Throwables$State$1.class
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE != null
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == org.junit.internal.Throwables$State$2.class
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE != null
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == org.junit.internal.Throwables$State$3.class
org.junit.internal.Throwables$State.DONE has only one value
org.junit.internal.Throwables$State.DONE != null
org.junit.internal.Throwables$State.DONE.getClass().getName() == org.junit.internal.Throwables$State$4.class
org.junit.internal.Throwables$State.$VALUES has only one value
org.junit.internal.Throwables$State.$VALUES != null
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == org.junit.internal.Throwables$State[].class
org.junit.internal.Throwables$State.$VALUES[] contains no nulls and has only one value, of length 4
org.junit.internal.Throwables$State.$VALUES[] elements != null
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() == [null, null, null, null]
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() elements == null
size(org.junit.internal.Throwables$State.$VALUES[]) == 4
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.DONE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.DONE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
===========================================================================
org.junit.internal.Throwables$State$2:::OBJECT
this has only one value
===========================================================================
org.junit.internal.Throwables$State$2.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "PROCESSING_TEST_FRAMEWORK_CODE"
$hidden$2 == 1
===========================================================================
org.junit.internal.Throwables$State$2.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "PROCESSING_TEST_FRAMEWORK_CODE"
===========================================================================
org.junit.internal.Throwables$State$2.processLine(java.lang.String):::ENTER
methodName != null
===========================================================================
org.junit.internal.Throwables$State$2.processLine(java.lang.String):::EXIT197
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == return
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == return.getClass().getName()
methodName.toString one of { "java.lang.reflect.Method.invoke()", "junit.framework.TestCase.runBare()" }
===========================================================================
org.junit.internal.Throwables$State$2.processLine(java.lang.String):::EXIT199
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == return
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == return.getClass().getName()
===========================================================================
org.junit.internal.Throwables$State$2.processLine(java.lang.String):::EXIT
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE)
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE)
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE)
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName())
org.junit.internal.Throwables$State.DONE == orig(org.junit.internal.Throwables$State.DONE)
org.junit.internal.Throwables$State.DONE.getClass().getName() == orig(org.junit.internal.Throwables$State.DONE.getClass().getName())
org.junit.internal.Throwables$State.$VALUES == orig(org.junit.internal.Throwables$State.$VALUES)
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == orig(org.junit.internal.Throwables$State.$VALUES.getClass().getName())
org.junit.internal.Throwables$State.$VALUES[] == orig(org.junit.internal.Throwables$State.$VALUES[])
methodName.toString == orig(methodName.toString)
return != null
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != return.getClass().getName()
org.junit.internal.Throwables$State.DONE.getClass().getName() != return.getClass().getName()
org.junit.internal.Throwables$State.$VALUES.getClass().getName() != return.getClass().getName()
return in org.junit.internal.Throwables$State.$VALUES[]
===========================================================================
org.junit.internal.Throwables$State$3:::CLASS
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == org.junit.internal.Throwables$State$1.class
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == org.junit.internal.Throwables$State$2.class
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == org.junit.internal.Throwables$State$3.class
org.junit.internal.Throwables$State.DONE has only one value
org.junit.internal.Throwables$State.DONE.getClass().getName() == org.junit.internal.Throwables$State$4.class
org.junit.internal.Throwables$State.$VALUES has only one value
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == org.junit.internal.Throwables$State[].class
org.junit.internal.Throwables$State.$VALUES[] contains no nulls and has only one value, of length 4
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() == [null, null, null, null]
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() elements == null
size(org.junit.internal.Throwables$State.$VALUES[]) == 4
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.DONE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.DONE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
===========================================================================
org.junit.internal.Throwables$State$3:::OBJECT
this has only one value
===========================================================================
org.junit.internal.Throwables$State$3.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "PROCESSING_REFLECTION_CODE"
$hidden$2 == 2
===========================================================================
org.junit.internal.Throwables$State$3.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "PROCESSING_REFLECTION_CODE"
===========================================================================
org.junit.internal.Throwables$State$3.processLine(java.lang.String):::ENTER
===========================================================================
org.junit.internal.Throwables$State$3.processLine(java.lang.String):::EXIT207
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == return
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == return.getClass().getName()
methodName.toString one of { "jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke()", "jdk.internal.reflect.NativeMethodAccessorImpl.invoke()", "jdk.internal.reflect.NativeMethodAccessorImpl.invoke0()" }
===========================================================================
org.junit.internal.Throwables$State$3.processLine(java.lang.String):::EXIT210
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == return
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == return.getClass().getName()
methodName.toString == "junit.framework.TestCase.runTest()"
orig(methodName) has only one value
===========================================================================
org.junit.internal.Throwables$State$3.processLine(java.lang.String):::EXIT212
org.junit.internal.Throwables$State.DONE == return
org.junit.internal.Throwables$State.DONE.getClass().getName() == return.getClass().getName()
methodName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testMathpbx02()"
orig(methodName) has only one value
===========================================================================
org.junit.internal.Throwables$State$3.processLine(java.lang.String):::EXIT
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE)
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE)
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE)
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName())
org.junit.internal.Throwables$State.DONE == orig(org.junit.internal.Throwables$State.DONE)
org.junit.internal.Throwables$State.DONE.getClass().getName() == orig(org.junit.internal.Throwables$State.DONE.getClass().getName())
org.junit.internal.Throwables$State.$VALUES == orig(org.junit.internal.Throwables$State.$VALUES)
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == orig(org.junit.internal.Throwables$State.$VALUES.getClass().getName())
org.junit.internal.Throwables$State.$VALUES[] == orig(org.junit.internal.Throwables$State.$VALUES[])
methodName.toString == orig(methodName.toString)
return in org.junit.internal.Throwables$State.$VALUES[]
===========================================================================
org.junit.internal.Throwables$State$4:::OBJECT
this has only one value
===========================================================================
org.junit.internal.Throwables$State$4.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "DONE"
$hidden$2 == 3
===========================================================================
org.junit.internal.Throwables$State$4.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "DONE"
===========================================================================
org.junit.internal.Throwables$State:::CLASS
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE != null
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == org.junit.internal.Throwables$State$1.class
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE != null
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == org.junit.internal.Throwables$State$2.class
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE != null
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == org.junit.internal.Throwables$State$3.class
org.junit.internal.Throwables$State.DONE has only one value
org.junit.internal.Throwables$State.DONE != null
org.junit.internal.Throwables$State.DONE.getClass().getName() == org.junit.internal.Throwables$State$4.class
org.junit.internal.Throwables$State.$VALUES has only one value
org.junit.internal.Throwables$State.$VALUES != null
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == org.junit.internal.Throwables$State[].class
org.junit.internal.Throwables$State.$VALUES[] contains no nulls and has only one value, of length 4
org.junit.internal.Throwables$State.$VALUES[] elements != null
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() == [null, null, null, null]
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() elements == null
size(org.junit.internal.Throwables$State.$VALUES[]) == 4
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.DONE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.DONE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
===========================================================================
org.junit.internal.Throwables$State:::OBJECT
this in org.junit.internal.Throwables$State.$VALUES[]
this.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
this.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
===========================================================================
org.junit.internal.Throwables$State.State(java.lang.String, int):::ENTER
===========================================================================
org.junit.internal.Throwables$State.State(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.junit.internal.Throwables$State.processStackTraceElement(java.lang.StackTraceElement):::ENTER
element != null
===========================================================================
org.junit.internal.Throwables$State.processStackTraceElement(java.lang.StackTraceElement):::EXIT
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE)
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE)
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE)
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName())
org.junit.internal.Throwables$State.DONE == orig(org.junit.internal.Throwables$State.DONE)
org.junit.internal.Throwables$State.DONE.getClass().getName() == orig(org.junit.internal.Throwables$State.DONE.getClass().getName())
org.junit.internal.Throwables$State.$VALUES == orig(org.junit.internal.Throwables$State.$VALUES)
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == orig(org.junit.internal.Throwables$State.$VALUES.getClass().getName())
org.junit.internal.Throwables$State.$VALUES[] == orig(org.junit.internal.Throwables$State.$VALUES[])
return != null
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != return.getClass().getName()
org.junit.internal.Throwables$State.DONE.getClass().getName() != orig(this.getClass().getName())
org.junit.internal.Throwables$State.$VALUES.getClass().getName() != return.getClass().getName()
org.junit.internal.Throwables$State.$VALUES.getClass().getName() != orig(this.getClass().getName())
return in org.junit.internal.Throwables$State.$VALUES[]
orig(this) in org.junit.internal.Throwables$State.$VALUES[]
===========================================================================
org.junit.internal.Throwables:::CLASS
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName()
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName()
size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])-1 == size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.getSuppressed has only one value
org.junit.internal.Throwables.getSuppressed != null
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES has only one value
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES != null
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == java.lang.String[].class
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] contains no nulls and has only one value, of length 8
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] elements != null
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[].getClass().getName() elements == java.lang.String.class
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[].toString == [org.junit.runner., org.junit.runners., org.junit.experimental.runners., org.junit.internal., junit.extensions, junit.framework, junit.runner, junit.textui]
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES has only one value
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES != null
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] contains no nulls and has only one value, of length 1
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] elements has only one value
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] elements != null
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[].getClass().getName() == [java.lang.String]
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[].getClass().getName() elements == java.lang.String.class
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[].toString == [org.junit.internal.StackTracesTest]
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[].toString elements == "org.junit.internal.StackTracesTest"
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES has only one value
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES != null
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] contains no nulls and has only one value, of length 7
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] elements != null
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[].getClass().getName() elements == java.lang.String.class
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[].toString == [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(]
size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]) == 8
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) == 1
===========================================================================
org.junit.internal.Throwables.appendStackTraceLines(java.util.List, java.lang.StringBuilder):::ENTER
stackTraceLines[].getClass().getName() elements == java.lang.String.class
stackTraceLines[].getClass().getName() one of { [], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
destBuilder has only one value
size(stackTraceLines[]) one of { 0, 7 }
===========================================================================
org.junit.internal.Throwables.appendStackTraceLines(java.util.List, java.lang.StringBuilder):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
stackTraceLines[] == orig(stackTraceLines[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
stackTraceLines[].getClass().getName() elements == java.lang.String.class
stackTraceLines[].getClass().getName() one of { [], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
===========================================================================
org.junit.internal.Throwables.asReversedList(java.util.List):::ENTER
list has only one value
list[] contains no nulls and has only one value, of length 32
list[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]
list[].getClass().getName() elements == java.lang.StackTraceElement.class
list.getClass().getName() == java.util.Arrays$ArrayList.class
size(list[]) == 32
===========================================================================
org.junit.internal.Throwables.asReversedList(java.util.List):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
list[] == orig(list[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
size(return[]) == orig(size(list[]))
list[] contains no nulls and has only one value, of length 32
list[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]
list[].getClass().getName() elements == java.lang.StackTraceElement.class
return has only one value
return[] contains no nulls and has only one value, of length 32
return.getClass().getName() == org.junit.internal.Throwables$1.class
size(return[]) == 32
list[] is the reverse of return[]
===========================================================================
org.junit.internal.Throwables.getCauseStackTraceLines(java.lang.Throwable):::ENTER
exception has only one value
===========================================================================
org.junit.internal.Throwables.getCauseStackTraceLines(java.lang.Throwable):::EXIT153
===========================================================================
org.junit.internal.Throwables.getCauseStackTraceLines(java.lang.Throwable):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])-1 == size(return[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
size(return[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]))-1
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$EmptyList.class
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTrace(java.lang.Throwable):::ENTER
exception has only one value
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTrace(java.lang.Throwable):::EXIT82
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTrace(java.lang.Throwable):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
return has only one value
return.toString == "junit.framework.AssertionFailedError: expected:<16828.208208485466> but was:<20654.74511575945>\n\tat junit.framework.Assert.fail(Assert.java:59)\n\tat junit.framework.Assert.failNotEquals(Assert.java:331)\n\tat junit.framework.Assert.assertEquals(Assert.java:122)\n\tat junit.framework.Assert.assertEquals(Assert.java:131)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:277)\n\tat org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testMathpbx02(EigenDecompositionImplTestFailingTests.java:62)\n"
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTraceLines(java.lang.Throwable):::ENTER
exception has only one value
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTraceLines(java.lang.Throwable):::EXIT101
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTraceLines(java.lang.Throwable):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == size(return[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
return has only one value
return[] contains no nulls and has only one value, of length 7
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.Throwables.hasSuppressed(java.lang.Throwable):::ENTER
exception has only one value
===========================================================================
org.junit.internal.Throwables.hasSuppressed(java.lang.Throwable):::EXIT124
===========================================================================
org.junit.internal.Throwables.hasSuppressed(java.lang.Throwable):::EXIT124;condition="not(return == true)"
===========================================================================
org.junit.internal.Throwables.hasSuppressed(java.lang.Throwable):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
return == false
===========================================================================
org.junit.internal.Throwables.hasSuppressed(java.lang.Throwable):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.Throwables.initGetSuppressed():::EXIT112
===========================================================================
org.junit.internal.Throwables.initGetSuppressed():::EXIT
return has only one value
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::ENTER
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == methodNamePrefixes.getClass().getName()
methodName != null
methodNamePrefixes != null
methodNamePrefixes[] elements != null
size(methodNamePrefixes[]) one of { 1, 7, 8 }
size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]) >= size(methodNamePrefixes[])
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) <= size(methodNamePrefixes[])
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) != size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])-1 <= size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) >= size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 != size(methodNamePrefixes[])
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT267
methodNamePrefixes[].toString one of { [org.junit.runner., org.junit.runners., org.junit.experimental.runners., org.junit.internal., junit.extensions, junit.framework, junit.runner, junit.textui], [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(] }
return == true
orig(size(methodNamePrefixes[])) one of { 7, 8 }
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) < size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) <= orig(size(methodNamePrefixes[]))
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 <= size(methodNamePrefixes[])-1
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT267;condition="return == true"
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT271
return == false
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT271;condition="not(return == true)"
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(methodNamePrefixes.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
methodName.toString == orig(methodName.toString)
methodNamePrefixes[] == orig(methodNamePrefixes[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
(return == false)  ==>  (orig(size(methodNamePrefixes[])) one of { 1, 7, 8 })
(return == true)  ==>  (methodNamePrefixes[].toString one of { [org.junit.runner., org.junit.runners., org.junit.experimental.runners., org.junit.internal., junit.extensions, junit.framework, junit.runner, junit.textui], [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(] })
(return == true)  ==>  (orig(size(methodNamePrefixes[])) one of { 7, 8 })
(return == true)  ==>  (size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) <= orig(size(methodNamePrefixes[])))
(return == true)  ==>  (size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 <= size(methodNamePrefixes[])-1)
(return == true)  ==>  (size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) < size(methodNamePrefixes[])-1)
methodNamePrefixes[] elements != null
size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]) >= orig(size(methodNamePrefixes[]))
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) != size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) <= orig(size(methodNamePrefixes[]))
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])-1 <= size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) >= size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 != orig(size(methodNamePrefixes[]))
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT;condition="return == true"
methodNamePrefixes[].toString one of { [org.junit.runner., org.junit.runners., org.junit.experimental.runners., org.junit.internal., junit.extensions, junit.framework, junit.runner, junit.textui], [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(] }
return == true
orig(size(methodNamePrefixes[])) one of { 7, 8 }
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) < size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) <= orig(size(methodNamePrefixes[]))
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 <= size(methodNamePrefixes[])-1
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.junit.internal.Throwables.isReflectionMethod(java.lang.String):::ENTER
methodName != null
===========================================================================
org.junit.internal.Throwables.isReflectionMethod(java.lang.String):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
methodName.toString == orig(methodName.toString)
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
===========================================================================
org.junit.internal.Throwables.isReflectionMethod(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.junit.internal.Throwables.isReflectionMethod(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.junit.internal.Throwables.isTestFrameworkMethod(java.lang.String):::ENTER
methodName != null
===========================================================================
org.junit.internal.Throwables.isTestFrameworkMethod(java.lang.String):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
methodName.toString == orig(methodName.toString)
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
(return == false)  ==>  (methodName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testMathpbx02()")
(return == false)  ==>  (orig(methodName) has only one value)
===========================================================================
org.junit.internal.Throwables.isTestFrameworkMethod(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.junit.internal.Throwables.isTestFrameworkMethod(java.lang.String):::EXIT;condition="not(return == true)"
methodName.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testMathpbx02()"
return == false
orig(methodName) has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder:::OBJECT
this has only one value
this.canUseSuiteMethod == true
this.parents has only one value
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder():::EXIT
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == return.suiteBuilder.parents
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
return.suiteBuilder has only one value
return.suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT39
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT63
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.builders.SuiteMethodBuilder.class
return.parents has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::CLASS
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::OBJECT
this.suiteBuilder.parents.getClass().getName() == this.parents.getClass().getName()
this has only one value
this.suiteBuilder has only one value
this.suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.suiteBuilder.parents has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::ENTER
suiteBuilder has only one value
suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::EXIT
this.suiteBuilder == orig(suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(suiteBuilder.getClass().getName())
this.suiteBuilder.parents == suiteBuilder.parents
this.parents.getClass().getName() == suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == orig(suiteBuilder.parents.getClass().getName())
suiteBuilder.parents == orig(suiteBuilder.parents)
suiteBuilder.parents has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::ENTER
currentTestClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::EXIT97
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.suiteBuilder == orig(this.suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(this.suiteBuilder.getClass().getName())
this.suiteBuilder.parents == orig(this.suiteBuilder.parents)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.suiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT90
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.suiteBuilder == orig(this.suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(this.suiteBuilder.getClass().getName())
this.suiteBuilder.parents == orig(this.suiteBuilder.parents)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.suiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.IgnoredBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder():::EXIT
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT13
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.JUnit3Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit3Builder.JUnit3Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit4Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit4Builder.JUnit4Builder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22;condition="return == true"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == true
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT;condition="return == true"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::ENTER
each has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT11
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener:::OBJECT
this has only one value
this.notifier has only one value
this.notifier != null
this.notifier.listeners has only one value
this.notifier.listeners != null
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[] elements != null
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
size(this.notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.OldTestClassAdaptingListener(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.OldTestClassAdaptingListener(org.junit.runner.notification.RunNotifier):::EXIT
this.notifier == orig(notifier)
this.notifier.listeners == notifier.listeners
this.notifier.listeners[] == notifier.listeners[]
this.notifier.listeners.getClass().getName() == notifier.listeners.getClass().getName()
this.notifier.pleaseStop == notifier.pleaseStop
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable):::ENTER
test has only one value
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
e has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::ENTER
junit.framework.AssertionFailedError.serialVersionUID == size(this.notifier.listeners[])-1
test has only one value
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
t has only one value
this.notifier.listeners[junit.framework.AssertionFailedError.serialVersionUID] has only one value
this.notifier.listeners[junit.framework.AssertionFailedError.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
junit.framework.AssertionFailedError.serialVersionUID == size(this.notifier.listeners[])-1
this.notifier.listeners[junit.framework.AssertionFailedError.serialVersionUID] has only one value
this.notifier.listeners[junit.framework.AssertionFailedError.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
this.notifier.listeners.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test):::EXIT55
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.notifier.listeners[])-1
org.junit.runner.Description.serialVersionUID == orig(size(this.notifier.listeners[]))-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fTestClass has only one value
this.notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
this.notifier.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
this.notifier.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
this.notifier.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.notifier.listeners.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
this.notifier.listeners.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
return has only one value
this.notifier.listeners.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
this.notifier.listeners.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test):::EXIT64
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.notifier.listeners.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner:::OBJECT
this has only one value
this.test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test):::EXIT
this.test == orig(test)
this.test.getClass().getName() == orig(test.getClass().getName())
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier):::ENTER
this.test has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier):::EXIT
this.test == orig(this.test)
this.test.getClass().getName() == orig(this.test.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
this.test has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getAnnotations(junit.framework.TestCase):::ENTER
test != null
test.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
test.fName != null
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getAnnotations(junit.framework.TestCase):::EXIT136
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getAnnotations(junit.framework.TestCase):::EXIT
test.fName == orig(test.fName)
test.fName.toString == orig(test.fName.toString)
test.fName != null
return has only one value
return != null
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getDescription():::ENTER
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getDescription():::EXIT
this.test == orig(this.test)
this.test.getClass().getName() == orig(this.test.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
this.test has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "EigenDecompositionImpl Tests"
return.fUniqueId has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getTest():::ENTER
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getTest():::EXIT
this.test == return
this.test.getClass().getName() == return.getClass().getName()
return == orig(this.test)
return.getClass().getName() == orig(this.test.getClass().getName())
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::ENTER
test != null
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::EXIT105
return.fAnnotations has only one value
return.fTestClass has only one value
return.fTestClass != null
orig(test.getClass().getName()) == org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.class
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::EXIT116
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
return.fDisplayName has only one value
return.fDisplayName.toString == "EigenDecompositionImpl Tests"
return.fUniqueId has only one value
orig(test) has only one value
orig(test.getClass().getName()) == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::EXIT
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
return != null
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
return.fChildren != null
return.fDisplayName != null
return.fUniqueId != null
return.fAnnotations != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString != return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString != return.fDisplayName.toString
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
this.test has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
this.test == orig(this.test)
this.test.getClass().getName() == orig(this.test.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
this.test has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test):::ENTER
this.test == null
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test):::EXIT
this.test == orig(test)
this.test.getClass().getName() == orig(test.getClass().getName())
this.test has only one value
===========================================================================
org.junit.internal.runners.SuiteMethod:::OBJECT
this has only one value
this.test has only one value
this.test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class):::ENTER
klass has only one value
===========================================================================
org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class):::EXIT
===========================================================================
org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class):::ENTER
klass has only one value
===========================================================================
org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class):::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.model.EachTestNotifier:::OBJECT
org.junit.runner.Description.serialVersionUID == size(this.notifier.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.description.fTestClass
this has only one value
this.notifier has only one value
this.notifier.listeners has only one value
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
this.description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.description.fChildren has only one value
this.description.fDisplayName has only one value
this.description.fDisplayName.toString == "classes"
this.description.fUniqueId has only one value
this.description.fAnnotations has only one value
size(this.notifier.listeners[]) == 2
this.notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(notifier.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(notifier.listeners[]) == 2
notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.notifier == orig(notifier)
this.notifier.listeners == notifier.listeners
this.notifier.listeners[] == notifier.listeners[]
this.notifier.listeners.getClass().getName() == notifier.listeners.getClass().getName()
this.notifier.pleaseStop == notifier.pleaseStop
this.description == orig(description)
org.junit.runner.Description.serialVersionUID == size(notifier.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == description.fChildren
this.description.fDisplayName == description.fDisplayName
this.description.fDisplayName.toString == description.fDisplayName.toString
this.description.fUniqueId == description.fUniqueId
this.description.fAnnotations == description.fAnnotations
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(notifier.listeners[]) == 2
notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteFinished():::ENTER
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteFinished():::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.description == orig(this.description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == orig(this.description.fChildren)
this.description.fDisplayName == orig(this.description.fDisplayName)
this.description.fDisplayName.toString == orig(this.description.fDisplayName.toString)
this.description.fUniqueId == orig(this.description.fUniqueId)
this.description.fAnnotations == orig(this.description.fAnnotations)
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteStarted():::ENTER
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteStarted():::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.description == orig(this.description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == orig(this.description.fChildren)
this.description.fDisplayName == orig(this.description.fDisplayName)
this.description.fDisplayName.toString == orig(this.description.fDisplayName.toString)
this.description.fUniqueId == orig(this.description.fUniqueId)
this.description.fAnnotations == orig(this.description.fAnnotations)
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder:::OBJECT
this.annotation != null
this.validators != null
this.validators[] elements != null
this.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.Builder(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.Builder(java.lang.Class):::EXIT
this.annotation == orig(annotation)
this.methods == false
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.build():::ENTER
size(this.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.build():::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.methods == orig(this.methods)
this.validators == return.validatorStrategies
this.validators == orig(this.validators)
this.validators[] == return.validatorStrategies[]
this.validators[] == orig(this.validators[])
this.validators.getClass().getName() == return.validatorStrategies.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
size(this.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.forMethods():::ENTER
this.methods == false
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.forMethods():::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.validators == return.validators
this.validators == orig(this.validators)
this.validators[] == return.validators[]
this.validators[] == orig(this.validators[])
this.validators.getClass().getName() == return.validators.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
return == orig(this)
this.methods == true
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.withValidator(org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator):::ENTER
validator != null
this.validators.getClass().getName() != validator.getClass().getName()
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.withValidator(org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator):::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.methods == orig(this.methods)
this.validators == return.validators
this.validators == orig(this.validators)
this.validators[] == return.validators[]
this.validators.getClass().getName() == return.validators.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
return == orig(this)
size(this.validators[])-1 == orig(size(this.validators[]))
return != null
size(this.validators[]) >= 1
orig(validator) in this.validators[]
this.validators.getClass().getName() != orig(validator.getClass().getName())
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$DeclaringClassMustBePublic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$DeclaringClassMustBePublic.DeclaringClassMustBePublic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeARule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeARule.FieldMustBeARule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeATestRule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeATestRule.FieldMustBeATestRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule.MemberMustBeNonStaticOrAlsoClassRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBePublic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBePublic.MemberMustBePublic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeStatic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeStatic.MemberMustBeStatic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeARule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeARule.MethodMustBeARule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeATestRule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeATestRule.MethodMustBeATestRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator:::CLASS
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.methods
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.methods
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[])-1 == size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[])
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == false
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 4
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule]
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == java.util.ArrayList.class
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 3
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeNonStaticOrAlsoClassRule, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeARule]
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == true
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 4
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule]
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 3
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeNonStaticOrAlsoClassRule, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeARule]
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == 4
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator:::OBJECT
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == this.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == this.validatorStrategies.getClass().getName()
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == size(this.validatorStrategies[])
this.validatorStrategies.getClass().getName() == java.util.ArrayList.class
size(this.validatorStrategies[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.RuleMemberValidator(org.junit.internal.runners.rules.RuleMemberValidator$Builder):::ENTER
builder.validators.getClass().getName() == java.util.ArrayList.class
size(builder.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.RuleMemberValidator(org.junit.internal.runners.rules.RuleMemberValidator$Builder):::EXIT
this.annotation == builder.annotation
this.annotation == orig(builder.annotation)
this.methods == builder.methods
this.methods == orig(builder.methods)
this.validatorStrategies == builder.validators
this.validatorStrategies == orig(builder.validators)
this.validatorStrategies[] == builder.validators[]
this.validatorStrategies[] == orig(builder.validators[])
this.validatorStrategies.getClass().getName() == builder.validators.getClass().getName()
this.validatorStrategies.getClass().getName() == orig(builder.validators.getClass().getName())
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.classRuleValidatorBuilder():::EXIT
return.annotation has only one value
return.methods == false
return.validators[] == []
return.validators[].getClass().getName() == []
return.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.testRuleValidatorBuilder():::EXIT
return.annotation has only one value
return.methods == false
return.validators[] == []
return.validators[].getClass().getName() == []
return.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.validate(org.junit.runners.model.TestClass, java.util.List):::ENTER
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == errors.getClass().getName()
target.methodsForAnnotations.getClass().getName() == target.fieldsForAnnotations.getClass().getName()
this.validatorStrategies[].getClass().getName() one of { [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule], [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule] }
target has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
target.clazz == null
target.methodsForAnnotations has only one value
target.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
target.fieldsForAnnotations has only one value
errors has only one value
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.validate(org.junit.runners.model.TestClass, java.util.List):::EXIT
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(this.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(this.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(errors.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[])
this.methods == orig(this.methods)
this.validatorStrategies == orig(this.validatorStrategies)
this.validatorStrategies[] == orig(this.validatorStrategies[])
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
target.clazz == orig(target.clazz)
target.methodsForAnnotations == orig(target.methodsForAnnotations)
target.methodsForAnnotations.getClass().getName() == target.fieldsForAnnotations.getClass().getName()
target.methodsForAnnotations.getClass().getName() == orig(target.methodsForAnnotations.getClass().getName())
target.methodsForAnnotations.getClass().getName() == orig(target.fieldsForAnnotations.getClass().getName())
target.fieldsForAnnotations == orig(target.fieldsForAnnotations)
errors[] == orig(errors[])
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == orig(size(this.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]))-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[]))-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(this.validatorStrategies[]))-1
this.validatorStrategies[].getClass().getName() one of { [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule], [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule] }
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
target.clazz == null
target.methodsForAnnotations has only one value
target.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
target.fieldsForAnnotations has only one value
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runner.Computer$1:::OBJECT
this.val$builder.parents.getClass().getName() == this.parents.getClass().getName()
this has only one value
this.val$builder has only one value
this.val$builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.val$builder.parents has only one value
org.junit.runner.Computer.this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::ENTER
org.junit.runner.Computer.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
$hidden$2.parents has only one value
$hidden$2.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::EXIT
this.val$builder == orig($hidden$2)
this.val$builder.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$builder.parents == $hidden$2.parents
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents.getClass().getName() == $hidden$2.parents.getClass().getName()
this.parents.getClass().getName() == orig($hidden$2.parents.getClass().getName())
$hidden$2.parents == orig($hidden$2.parents)
$hidden$2.parents has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::EXIT
this.val$builder == orig(this.val$builder)
this.val$builder.getClass().getName() == orig(this.val$builder.getClass().getName())
this.val$builder.parents == orig(this.val$builder.parents)
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.val$builder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
===========================================================================
org.junit.runner.Computer$2:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runner.Computer$2:::OBJECT
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName()
this.runners.getClass().getName() == this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(this.runners[]) == size(org.junit.runners.ParentRunner.VALIDATORS[])
this has only one value
org.junit.runner.Computer.this has only one value
this.runners has only one value
this.runners[] contains no nulls and has only one value, of length 1
this.runners[] elements has only one value
this.runners[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
this.runners[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
this.runners.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.childrenLock has only one value
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.runners[] == this.filteredChildren[] (elementwise)
this.runners[] is the reverse of this.filteredChildren[]
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName() (elementwise)
===========================================================================
org.junit.runner.Computer$2.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
org.junit.runner.Computer.this has only one value
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer$2.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(classes[]))
this.filteredChildren == null
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
===========================================================================
org.junit.runner.Computer$2.getName():::ENTER
===========================================================================
org.junit.runner.Computer$2.getName():::EXIT
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.runners == orig(this.runners)
this.runners[] == orig(this.runners[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
return has only one value
return.toString == "classes"
===========================================================================
org.junit.runner.Computer:::OBJECT
this has only one value
===========================================================================
org.junit.runner.Computer.Computer():::EXIT
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
testClass has only one value
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
return has only one value
return.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Description:::CLASS
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description:::OBJECT
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == this.fAnnotations[].getClass().getName()
this.fChildren != null
this.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
this.fDisplayName != null
this.fUniqueId != null
this.fUniqueId.getClass().getName() == java.lang.String.class
this.fAnnotations != null
this.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fAnnotations[] == []
this.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString != this.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of this.fAnnotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString != this.fDisplayName.toString
this.fChildren.getClass().getName() != this.fUniqueId.getClass().getName()
this.fChildren.getClass().getName() != this.fAnnotations.getClass().getName()
this.fUniqueId.getClass().getName() != this.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.io.Serializable, java.lang.annotation.Annotation[]):::ENTER
displayName != null
uniqueId != null
uniqueId.getClass().getName() == java.lang.String.class
annotations != null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] == []
uniqueId.getClass().getName() != annotations.getClass().getName()
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.io.Serializable, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
this.fDisplayName == orig(displayName)
this.fDisplayName.toString == displayName.toString
this.fUniqueId == orig(uniqueId)
this.fUniqueId.getClass().getName() == orig(uniqueId.getClass().getName())
this.fAnnotations == orig(annotations)
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
this.fAnnotations[] == annotations[]
this.fTestClass == orig(testClass)
displayName.toString == orig(displayName.toString)
annotations[] == orig(annotations[])
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString != displayName.toString
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of annotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString != displayName.toString
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
displayName != null
annotations != null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] == []
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
this.fDisplayName == orig(displayName)
this.fDisplayName.toString == displayName.toString
this.fAnnotations == orig(annotations)
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
this.fAnnotations[] == annotations[]
this.fTestClass == orig(clazz)
displayName.toString == orig(displayName.toString)
annotations[] == orig(annotations[])
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString != displayName.toString
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of annotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString != displayName.toString
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
this.fDisplayName.toString one of { "EigenDecompositionImpl Tests", "classes" }
description != null
description.fChildren != null
description.fDisplayName != null
description.fUniqueId != null
description.fAnnotations != null
org.junit.runner.Description.EMPTY.fDisplayName.toString != description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString != description.fDisplayName.toString
this.fDisplayName.toString != description.fDisplayName.toString
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fUniqueId == orig(this.fUniqueId)
this.fAnnotations == orig(this.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
this.fDisplayName.toString one of { "EigenDecompositionImpl Tests", "classes" }
description.fChildren != null
description.fDisplayName != null
description.fUniqueId != null
description.fAnnotations != null
org.junit.runner.Description.EMPTY.fDisplayName.toString != description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString != description.fDisplayName.toString
this.fDisplayName.toString != description.fDisplayName.toString
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
name.toString one of { "EigenDecompositionImpl Tests", "classes" }
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
name.toString == return.fDisplayName.toString
name.toString == orig(name.toString)
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fDisplayName == orig(name)
return.fAnnotations == orig(annotations)
name.toString one of { "EigenDecompositionImpl Tests", "classes" }
annotations[] == []
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String):::ENTER
clazz has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
name.toString == orig(name.toString)
return.fTestClass == orig(clazz)
return.fTestClass has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
name.toString < return.fDisplayName.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
clazz has only one value
clazz != null
name != null
annotations has only one value
annotations != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
name.toString == orig(name.toString)
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fAnnotations == orig(annotations)
return.fTestClass == orig(clazz)
annotations[] == []
return != null
return.fChildren != null
return.fDisplayName != null
return.fUniqueId != null
return.fAnnotations has only one value
return.fAnnotations != null
return.fTestClass has only one value
return.fTestClass != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
name.toString < return.fDisplayName.toString
===========================================================================
org.junit.runner.Description.formatDisplayName(java.lang.String, java.lang.String):::ENTER
name != null
className has only one value
className != null
className.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < className.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < className.toString
name.toString > className.toString
===========================================================================
org.junit.runner.Description.formatDisplayName(java.lang.String, java.lang.String):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
name.toString == orig(name.toString)
className.toString == orig(className.toString)
className.toString == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
return != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < className.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < className.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.toString
name.toString > className.toString
name.toString < return.toString
className.toString < return.toString
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::ENTER
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
this.fDisplayName has only one value
this.fDisplayName.toString == "EigenDecompositionImpl Tests"
this.fUniqueId has only one value
annotationType has only one value
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::EXIT279
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fUniqueId == orig(this.fUniqueId)
this.fAnnotations == orig(this.fAnnotations)
this.fDisplayName has only one value
this.fDisplayName.toString == "EigenDecompositionImpl Tests"
this.fUniqueId has only one value
return == null
===========================================================================
org.junit.runner.Description.getDisplayName():::ENTER
this has only one value
this.fChildren has only one value
this.fDisplayName has only one value
this.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
this.fUniqueId has only one value
this.fAnnotations has only one value
this.fTestClass has only one value
===========================================================================
org.junit.runner.Description.getDisplayName():::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == return
this.fDisplayName.toString == return.toString
this.fUniqueId == orig(this.fUniqueId)
this.fAnnotations == orig(this.fAnnotations)
this.fTestClass == orig(this.fTestClass)
return == orig(this.fDisplayName)
return.toString == orig(this.fDisplayName.toString)
this.fChildren has only one value
this.fUniqueId has only one value
this.fAnnotations has only one value
this.fTestClass has only one value
return has only one value
return.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
===========================================================================
org.junit.runner.JUnitCommandLineParseResult:::OBJECT
this.filterSpecs[] == this.parserErrors[]
this.filterSpecs.getClass().getName() == this.classes.getClass().getName()
this.filterSpecs.getClass().getName() == this.parserErrors.getClass().getName()
this has only one value
this.filterSpecs has only one value
this.filterSpecs != null
this.filterSpecs[] == []
this.filterSpecs[].getClass().getName() == []
this.filterSpecs.getClass().getName() == java.util.ArrayList.class
this.classes has only one value
this.classes != null
this.classes[] elements has only one value
this.classes[] elements != null
this.classes[].getClass().getName() elements == java.lang.Class.class
this.classes[].getClass().getName() one of { [], [java.lang.Class] }
this.parserErrors has only one value
this.parserErrors != null
size(this.classes[]) one of { 0, 1 }
size(this.filterSpecs[]) <= size(this.classes[])
size(this.filterSpecs[]) >= size(this.classes[])-1
size(this.filterSpecs[])-1 <= size(this.classes[])-1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.JUnitCommandLineParseResult():::EXIT
this.filterSpecs[] == this.classes[]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::ENTER
size(this.filterSpecs[]) == size(this.classes[])-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::EXIT131
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.classes[] == orig(this.classes[])
this.parserErrors == orig(this.parserErrors)
return == orig(request)
return.getClass().getName() == orig(request.getClass().getName())
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == orig(size(this.classes[]))-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.copyArray(java.lang.String[], int, int):::ENTER
this.filterSpecs[] == this.classes[]
from == size(this.filterSpecs[])
to == size(args[])
size(this.filterSpecs[]) == size(args[])-1
args[from] == args[to-1]
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
to == 1
args[] elements == args[from]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.copyArray(java.lang.String[], int, int):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == this.classes[]
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == return[]
args[] == orig(args[])
return.getClass().getName() == orig(args.getClass().getName())
orig(from) == size(this.filterSpecs[])
orig(from) == size(this.classes[])
orig(from) == size(this.parserErrors[])
orig(from) == size(args[])-1
orig(from) == size(return[])-1
orig(from) == orig(size(this.classes[]))
orig(from) == orig(size(this.parserErrors[]))
orig(from) == orig(size(args[]))-1
orig(to) == size(return[])
args[orig(from)] == args[orig(to)-1]
args[orig(from)] == orig(args[post(to)-1])
args[orig(from)] == return[orig(to)-1]
args[orig(from)] == orig(args[to-1])
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
return has only one value
return.getClass().getName() == java.lang.String[].class
args[] elements == args[orig(from)]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::ENTER
size(this.filterSpecs[]) == size(this.classes[])-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
computer has only one value
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::EXIT118
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.classes[] == orig(this.classes[])
this.parserErrors == orig(this.parserErrors)
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == orig(size(this.classes[]))-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parse(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parse(java.lang.String[]):::EXIT
args[] == orig(args[])
return.filterSpecs[] == return.parserErrors[]
return.filterSpecs.getClass().getName() == return.classes.getClass().getName()
return.filterSpecs.getClass().getName() == return.parserErrors.getClass().getName()
size(args[])-1 == size(return.filterSpecs[])
size(args[])-1 == size(return.parserErrors[])
size(return.classes[]) == orig(size(args[]))
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
return has only one value
return.filterSpecs has only one value
return.filterSpecs[] == []
return.filterSpecs[].getClass().getName() == []
return.filterSpecs.getClass().getName() == java.util.ArrayList.class
return.classes has only one value
return.classes[] contains no nulls and has only one value, of length 1
return.classes[] elements has only one value
return.classes[].getClass().getName() == [java.lang.Class]
return.classes[].getClass().getName() elements == java.lang.Class.class
return.parserErrors has only one value
size(return.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseArgs(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseArgs(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == orig(args[])
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
size(this.classes[]) == orig(size(args[]))
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::EXIT80
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == this.classes[]
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == return[]
args[] == orig(args[])
return.getClass().getName() == orig(args.getClass().getName())
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == size(return[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
return has only one value
return.getClass().getName() == java.lang.String[].class
size(return[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseParameters(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseParameters(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == orig(args[])
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
size(this.classes[]) == orig(size(args[]))
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore:::OBJECT
this has only one value
this.notifier has only one value
this.notifier.listeners has only one value
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
size(this.notifier.listeners[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.JUnitCore.JUnitCore():::EXIT
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
===========================================================================
org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener):::ENTER
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
size(this.notifier.listeners[])-1 == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.defaultComputer():::EXIT
return has only one value
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listener has only one value
size(this.notifier.listeners[]) == 2
listener in this.notifier.listeners[]
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
size(this.notifier.listeners[]) == orig(size(this.notifier.listeners[]))-1
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == size(return.failures[])
org.junit.runner.Result.serialVersionUID == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] contains no nulls and has only one value, of length 1
return.failures[] elements has only one value
return.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
return.failures[] elements == return.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
runner has only one value
runner.getClass().getName() == org.junit.runner.Computer$2.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == size(return.failures[])
org.junit.runner.Result.serialVersionUID == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] contains no nulls and has only one value, of length 1
return.failures[] elements has only one value
return.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
return.failures[] elements == return.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[]):::ENTER
size(this.notifier.listeners[]) == size(args[])-1
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
system has only one value
system.getClass().getName() == org.junit.internal.RealSystem.class
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[]):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
args[] == orig(args[])
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == size(return.failures[])
org.junit.runner.Result.serialVersionUID == orig(size(args[]))
size(args[])-1 == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests]
args[].toString elements == "org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests"
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] contains no nulls and has only one value, of length 1
return.failures[] elements has only one value
return.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
args[] elements == args[org.junit.runner.Result.serialVersionUID-1]
return.failures[] elements == return.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Request$1:::OBJECT
this has only one value
this.val$runner has only one value
this.val$runner.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::EXIT
this.val$runner == orig($hidden$1)
this.val$runner.getClass().getName() == orig($hidden$1.getClass().getName())
===========================================================================
org.junit.runner.Request$1.getRunner():::ENTER
===========================================================================
org.junit.runner.Request$1.getRunner():::EXIT
this.val$runner == return
this.val$runner.getClass().getName() == return.getClass().getName()
return == orig(this.val$runner)
return.getClass().getName() == orig(this.val$runner.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request:::OBJECT
this has only one value
this.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.Request():::EXIT
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::ENTER
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT78
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT
classes[] == orig(classes[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::EXIT
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Result$Listener:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
this has only one value
org.junit.runner.Result.this has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields != null
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[] elements != null
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
org.junit.runner.Result.this.count has only one value
org.junit.runner.Result.this.count != null
org.junit.runner.Result.this.ignoreCount has only one value
org.junit.runner.Result.this.ignoreCount != null
org.junit.runner.Result.this.assumptionFailureCount has only one value
org.junit.runner.Result.this.assumptionFailureCount != null
org.junit.runner.Result.this.failures has only one value
org.junit.runner.Result.this.failures != null
org.junit.runner.Result.this.failures[] elements has only one value
org.junit.runner.Result.this.failures[] elements != null
org.junit.runner.Result.this.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
org.junit.runner.Result.this.failures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure] }
org.junit.runner.Result.this.runTime has only one value
org.junit.runner.Result.this.runTime != null
org.junit.runner.Result.this.startTime has only one value
org.junit.runner.Result.this.startTime != null
org.junit.runner.Result.this.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
size(org.junit.runner.Result.this.failures[]) one of { 0, 1 }
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialVersionUID >= size(org.junit.runner.Result.this.failures[])
size(org.junit.runner.Result.serialPersistentFields[])-1 > size(org.junit.runner.Result.this.failures[])
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.this has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
org.junit.runner.Result.this.count has only one value
org.junit.runner.Result.this.ignoreCount has only one value
org.junit.runner.Result.this.assumptionFailureCount has only one value
org.junit.runner.Result.this.failures has only one value
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Result.this.failures[].getClass().getName() == []
org.junit.runner.Result.this.runTime has only one value
org.junit.runner.Result.this.startTime has only one value
org.junit.runner.Result.this.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Result.this.failures[].getClass().getName() == []
===========================================================================
org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.notification.Failure.serialVersionUID
org.junit.runner.Result.serialVersionUID == org.junit.runner.Description.serialVersionUID
size(org.junit.runner.Result.this.failures[]) == size(failure.fDescription.fAnnotations[])
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Result.this.failures[].getClass().getName() == []
failure has only one value
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fTestClass has only one value
failure.fThrownException has only one value
===========================================================================
org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren.getClass().getName() == orig(failure.fDescription.fChildren.getClass().getName())
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fUniqueId == orig(failure.fDescription.fUniqueId)
failure.fDescription.fUniqueId.getClass().getName() == orig(failure.fDescription.fUniqueId.getClass().getName())
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fDescription.fTestClass == orig(failure.fDescription.fTestClass)
failure.fThrownException == orig(failure.fThrownException)
orig(failure) == org.junit.runner.Result.this.failures[org.junit.runner.Result.serialVersionUID-1]
size(org.junit.runner.Result.this.failures[])-1 == size(failure.fDescription.fAnnotations[])
size(failure.fDescription.fAnnotations[]) == orig(size(org.junit.runner.Result.this.failures[]))
org.junit.runner.Result.this.failures[] contains no nulls and has only one value, of length 1
org.junit.runner.Result.this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass has only one value
failure.fThrownException has only one value
org.junit.runner.Result.this.failures[] elements == orig(failure)
orig(failure) in org.junit.runner.Result.this.failures[]
org.junit.runner.Result.this.failures[] elements == org.junit.runner.Result.this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this == result
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.this.count == result.count
org.junit.runner.Result.this.ignoreCount == result.ignoreCount
org.junit.runner.Result.this.assumptionFailureCount == result.assumptionFailureCount
org.junit.runner.Result.this.failures == result.failures
org.junit.runner.Result.this.failures[] == result.failures[]
org.junit.runner.Result.this.runTime == result.runTime
org.junit.runner.Result.this.startTime == result.startTime
org.junit.runner.Result.this.serializedForm == result.serializedForm
org.junit.runner.Result.this.failures[] contains no nulls and has only one value, of length 1
org.junit.runner.Result.this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result has only one value
org.junit.runner.Result.this.failures[] elements == org.junit.runner.Result.this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this == orig(result)
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == result.count
org.junit.runner.Result.this.ignoreCount == result.ignoreCount
org.junit.runner.Result.this.assumptionFailureCount == result.assumptionFailureCount
org.junit.runner.Result.this.failures == result.failures
org.junit.runner.Result.this.failures[] == result.failures[]
org.junit.runner.Result.this.runTime == result.runTime
org.junit.runner.Result.this.startTime == result.startTime
org.junit.runner.Result.this.serializedForm == result.serializedForm
result.count == orig(org.junit.runner.Result.this.count)
result.count == orig(result.count)
result.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(org.junit.runner.Result.this.failures)
result.failures == orig(result.failures)
result.failures[] == orig(org.junit.runner.Result.this.failures[])
result.failures[] == orig(result.failures[])
result.runTime == orig(org.junit.runner.Result.this.runTime)
result.runTime == orig(result.runTime)
result.startTime == orig(org.junit.runner.Result.this.startTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
result.serializedForm == orig(result.serializedForm)
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Result.this.failures[] == []
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fAnnotations[]) == orig(size(org.junit.runner.Result.this.failures[]))
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.Result:::CLASS
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields != null
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[] elements != null
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.Result:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
this has only one value
this.count has only one value
this.count != null
this.ignoreCount has only one value
this.ignoreCount != null
this.assumptionFailureCount has only one value
this.assumptionFailureCount != null
this.failures has only one value
this.failures != null
this.failures[] elements has only one value
this.failures[] elements != null
this.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
this.failures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure] }
this.runTime has only one value
this.runTime != null
this.startTime has only one value
this.startTime != null
this.serializedForm == null
size(this.failures[]) one of { 0, 1 }
org.junit.runner.Result.serialVersionUID >= size(this.failures[])
size(org.junit.runner.Result.serialPersistentFields[])-1 > size(this.failures[])
===========================================================================
org.junit.runner.Result.Result():::EXIT
this.failures[] == []
this.failures[].getClass().getName() == []
===========================================================================
org.junit.runner.Result.createListener():::ENTER
this.failures[] == []
this.failures[].getClass().getName() == []
===========================================================================
org.junit.runner.Result.createListener():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] == []
this.failures[].getClass().getName() == []
return has only one value
===========================================================================
org.junit.runner.Result.getFailureCount():::ENTER
org.junit.runner.Result.serialVersionUID == size(this.failures[])
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getFailureCount():::EXIT
org.junit.runner.Result.serialVersionUID == return
org.junit.runner.Result.serialVersionUID == size(this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getFailures():::ENTER
org.junit.runner.Result.serialVersionUID == size(this.failures[])
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getFailures():::EXIT
org.junit.runner.Result.serialVersionUID == size(this.failures[])
org.junit.runner.Result.serialVersionUID == size(return[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] contains no nulls and has only one value, of length 1
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runner.notification.Failure]
return[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.failures[] elements == return[org.junit.runner.Result.serialVersionUID-1]
return[] elements == return[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getRunCount():::ENTER
org.junit.runner.Result.serialVersionUID == size(this.failures[])
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getRunCount():::EXIT
org.junit.runner.Result.serialVersionUID == size(this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return == 4
org.junit.runner.Result.serialPersistentFields[return] has only one value
org.junit.runner.Result.serialPersistentFields[return-1] has only one value
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getRunTime():::ENTER
org.junit.runner.Result.serialVersionUID == size(this.failures[])
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getRunTime():::EXIT
org.junit.runner.Result.serialVersionUID == size(this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return == 329
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.wasSuccessful():::ENTER
org.junit.runner.Result.serialVersionUID == size(this.failures[])
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT
org.junit.runner.Result.serialVersionUID == size(this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return == false
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runner.Runner:::OBJECT
===========================================================================
org.junit.runner.Runner.Runner():::EXIT
===========================================================================
org.junit.runner.notification.Failure:::CLASS
===========================================================================
org.junit.runner.notification.Failure:::OBJECT
org.junit.runner.notification.Failure.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.fDescription.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.fDescription.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fDescription.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fDescription.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this has only one value
this.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.fDescription.fChildren has only one value
this.fDescription.fDisplayName has only one value
this.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
this.fDescription.fUniqueId has only one value
this.fDescription.fAnnotations has only one value
this.fDescription.fTestClass has only one value
this.fThrownException has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDescription.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDescription.fDisplayName.toString
===========================================================================
org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
description.fTestClass has only one value
thrownException has only one value
===========================================================================
org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable):::EXIT
this.fDescription == orig(description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == description.fChildren
this.fDescription.fDisplayName == description.fDisplayName
this.fDescription.fDisplayName.toString == description.fDisplayName.toString
this.fDescription.fUniqueId == description.fUniqueId
this.fDescription.fAnnotations == description.fAnnotations
this.fDescription.fTestClass == description.fTestClass
this.fThrownException == orig(thrownException)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.Failure.getException():::ENTER
===========================================================================
org.junit.runner.notification.Failure.getException():::EXIT
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fDescription.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fDescription.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fDescription.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
this.fDescription.fUniqueId == orig(this.fDescription.fUniqueId)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fTestClass == orig(this.fDescription.fTestClass)
this.fThrownException == return
return == orig(this.fThrownException)
return has only one value
===========================================================================
org.junit.runner.notification.Failure.getTestHeader():::ENTER
===========================================================================
org.junit.runner.notification.Failure.getTestHeader():::EXIT
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fDescription.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fDescription.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fDescription.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == return
this.fDescription.fDisplayName.toString == return.toString
this.fDescription.fUniqueId == orig(this.fDescription.fUniqueId)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fTestClass == orig(this.fDescription.fTestClass)
this.fThrownException == orig(this.fThrownException)
return == orig(this.fDescription.fDisplayName)
return.toString == orig(this.fDescription.fDisplayName.toString)
return has only one value
return.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
===========================================================================
org.junit.runner.notification.Failure.getTrimmedTrace():::ENTER
===========================================================================
org.junit.runner.notification.Failure.getTrimmedTrace():::EXIT
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fDescription.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fDescription.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fDescription.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
this.fDescription.fUniqueId == orig(this.fDescription.fUniqueId)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fTestClass == orig(this.fDescription.fTestClass)
this.fThrownException == orig(this.fThrownException)
return has only one value
return.toString == "junit.framework.AssertionFailedError: expected:<16828.208208485466> but was:<20654.74511575945>\n\tat junit.framework.Assert.fail(Assert.java:59)\n\tat junit.framework.Assert.failNotEquals(Assert.java:331)\n\tat junit.framework.Assert.assertEquals(Assert.java:122)\n\tat junit.framework.Assert.assertEquals(Assert.java:131)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:277)\n\tat org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests.testMathpbx02(EigenDecompositionImplTestFailingTests.java:62)\n"
===========================================================================
org.junit.runner.notification.RunListener:::OBJECT
===========================================================================
org.junit.runner.notification.RunListener.RunListener():::EXIT
===========================================================================
org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this has only one value
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$2:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.val$result.failures[])
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Result.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
this.val$result.count has only one value
this.val$result.ignoreCount has only one value
this.val$result.assumptionFailureCount has only one value
this.val$result.failures has only one value
this.val$result.failures[] contains no nulls and has only one value, of length 1
this.val$result.failures[] elements has only one value
this.val$result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.val$result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
this.val$result.runTime has only one value
this.val$result.startTime has only one value
this.val$result.serializedForm == null
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(org.junit.runner.Result.serialPersistentFields[]) == 6
size(this.currentListeners[]) == 2
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.currentListeners[org.junit.runner.Result.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Result.serialVersionUID-1] has only one value
this.val$result.failures[] elements == this.val$result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Result.serialVersionUID == size($hidden$2.failures[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
$hidden$2.count has only one value
$hidden$2.ignoreCount has only one value
$hidden$2.assumptionFailureCount has only one value
$hidden$2.failures has only one value
$hidden$2.failures[] contains no nulls and has only one value, of length 1
$hidden$2.failures[] elements has only one value
$hidden$2.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
$hidden$2.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
$hidden$2.runTime has only one value
$hidden$2.startTime has only one value
$hidden$2.serializedForm == null
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
$hidden$2.failures[] elements == $hidden$2.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT
this.val$result == orig($hidden$2)
org.junit.runner.Result.serialVersionUID == size($hidden$2.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.val$result.count == $hidden$2.count
this.val$result.ignoreCount == $hidden$2.ignoreCount
this.val$result.assumptionFailureCount == $hidden$2.assumptionFailureCount
this.val$result.failures == $hidden$2.failures
this.val$result.failures[] == $hidden$2.failures[]
this.val$result.runTime == $hidden$2.runTime
this.val$result.startTime == $hidden$2.startTime
this.val$result.serializedForm == $hidden$2.serializedForm
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.count == orig($hidden$2.count)
$hidden$2.ignoreCount == orig($hidden$2.ignoreCount)
$hidden$2.assumptionFailureCount == orig($hidden$2.assumptionFailureCount)
$hidden$2.failures == orig($hidden$2.failures)
$hidden$2.failures[] == orig($hidden$2.failures[])
$hidden$2.runTime == orig($hidden$2.runTime)
$hidden$2.startTime == orig($hidden$2.startTime)
$hidden$2.serializedForm == orig($hidden$2.serializedForm)
$hidden$2.count has only one value
$hidden$2.ignoreCount has only one value
$hidden$2.assumptionFailureCount has only one value
$hidden$2.failures has only one value
$hidden$2.failures[] contains no nulls and has only one value, of length 1
$hidden$2.failures[] elements has only one value
$hidden$2.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
$hidden$2.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
$hidden$2.runTime has only one value
$hidden$2.startTime has only one value
$hidden$2.serializedForm == null
$hidden$2.failures[] elements == $hidden$2.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$result == orig(this.val$result)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.val$result.count == orig(this.val$result.count)
this.val$result.ignoreCount == orig(this.val$result.ignoreCount)
this.val$result.assumptionFailureCount == orig(this.val$result.assumptionFailureCount)
this.val$result.failures == orig(this.val$result.failures)
this.val$result.failures[] == orig(this.val$result.failures[])
this.val$result.runTime == orig(this.val$result.runTime)
this.val$result.startTime == orig(this.val$result.startTime)
this.val$result.serializedForm == orig(this.val$result.serializedForm)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$4:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$5:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this.val$description != null
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
this.val$description.fChildren != null
this.val$description.fDisplayName != null
this.val$description.fUniqueId != null
this.val$description.fAnnotations != null
this.val$description.fTestClass has only one value
this.val$description.fTestClass != null
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners != null
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[] elements != null
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$5.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fTestClass has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$5.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fTestClass == orig($hidden$2.fTestClass)
$hidden$2.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$6:::OBJECT
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
size(this.val$failures[]) == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
size(this.val$failures[]) == size(this.currentListeners[])-1
this has only one value
this.val$failures has only one value
this.val$failures[] contains no nulls and has only one value, of length 1
this.val$failures[] elements has only one value
this.val$failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.val$failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
this.val$failures.getClass().getName() == java.util.Arrays$ArrayList.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$6.(org.junit.runner.notification.RunNotifier, java.util.List, java.util.List):::ENTER
org.junit.runner.notification.RunNotifier.this.listeners == currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == currentListeners.getClass().getName()
size(org.junit.runner.notification.RunNotifier.this.listeners[])-1 == size($hidden$3[])
size(currentListeners[])-1 == size($hidden$3[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
currentListeners has only one value
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$3 has only one value
$hidden$3[] contains no nulls and has only one value, of length 1
$hidden$3[] elements has only one value
$hidden$3[].getClass().getName() == [org.junit.runner.notification.Failure]
$hidden$3[].getClass().getName() elements == org.junit.runner.notification.Failure.class
$hidden$3.getClass().getName() == java.util.Arrays$ArrayList.class
size(currentListeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$6.(org.junit.runner.notification.RunNotifier, java.util.List, java.util.List):::EXIT
this.val$failures == orig($hidden$3)
this.val$failures[] == $hidden$3[]
this.val$failures.getClass().getName() == orig($hidden$3.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(currentListeners)
this.currentListeners[] == currentListeners[]
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(currentListeners.getClass().getName())
currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
currentListeners[] == orig(currentListeners[])
$hidden$3[] == orig($hidden$3[])
size(this.val$failures[]) == size(currentListeners[])-1
size(this.val$failures[]) == orig(size(org.junit.runner.notification.RunNotifier.this.listeners[]))-1
size(this.val$failures[]) == orig(size(currentListeners[]))-1
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$3[] contains no nulls and has only one value, of length 1
$hidden$3[] elements has only one value
$hidden$3[].getClass().getName() == [org.junit.runner.notification.Failure]
$hidden$3[].getClass().getName() elements == org.junit.runner.notification.Failure.class
===========================================================================
org.junit.runner.notification.RunNotifier$6.notifyListener(org.junit.runner.notification.RunListener):::ENTER
listener in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$6.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$failures == orig(this.val$failures)
this.val$failures[] == orig(this.val$failures[])
this.val$failures.getClass().getName() == orig(this.val$failures.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
size(this.val$failures[]) == orig(size(org.junit.runner.notification.RunNotifier.this.listeners[]))-1
size(this.val$failures[]) == orig(size(this.currentListeners[]))-1
orig(listener) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$9:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this.val$description != null
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
this.val$description.fChildren != null
this.val$description.fDisplayName != null
this.val$description.fUniqueId != null
this.val$description.fAnnotations != null
this.val$description.fTestClass has only one value
this.val$description.fTestClass != null
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners != null
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[] elements != null
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$9.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fTestClass has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$9.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fTestClass == orig($hidden$2.fTestClass)
$hidden$2.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$9.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$9.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier:::OBJECT
this.currentListeners == org.junit.runner.notification.RunNotifier.this.listeners
this.currentListeners[] == org.junit.runner.notification.RunNotifier.this.listeners[]
this.currentListeners.getClass().getName() == org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName()
this.currentListeners has only one value
this.currentListeners != null
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[] elements != null
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
size(this.currentListeners[]) == 2
this.getClass().getName() != this.currentListeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this != null
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners != null
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[] elements != null
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::EXIT
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier, java.util.List):::ENTER
org.junit.runner.notification.RunNotifier.this.listeners == currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == currentListeners.getClass().getName()
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this != null
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
currentListeners has only one value
currentListeners != null
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[] elements != null
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(currentListeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier, java.util.List):::EXIT
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(currentListeners)
this.currentListeners[] == currentListeners[]
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(currentListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
currentListeners[] == orig(currentListeners[])
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[] elements != null
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::EXIT
this.currentListeners == orig(this.currentListeners)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier:::OBJECT
this has only one value
this.listeners has only one value
this.listeners != null
this.listeners[] elements != null
this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.pleaseStop == false
size(this.listeners[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.notification.RunNotifier.RunNotifier():::EXIT
this.listeners[] == []
this.listeners[].getClass().getName() == []
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
listener has only one value
size(this.listeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
size(this.listeners[]) == 2
orig(listener) in this.listeners[]
===========================================================================
org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] == []
this.listeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
size(this.listeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure):::ENTER
org.junit.runner.notification.Failure.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.notification.Failure.serialVersionUID == size(this.listeners[])-1
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
failure has only one value
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass has only one value
failure.fThrownException has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.notification.Failure.serialVersionUID] has only one value
this.listeners[org.junit.runner.notification.Failure.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.notification.Failure.serialVersionUID == size(this.listeners[])-1
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren.getClass().getName() == orig(failure.fDescription.fChildren.getClass().getName())
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fUniqueId == orig(failure.fDescription.fUniqueId)
failure.fDescription.fUniqueId.getClass().getName() == orig(failure.fDescription.fUniqueId.getClass().getName())
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fDescription.fTestClass == orig(failure.fDescription.fTestClass)
failure.fThrownException == orig(failure.fThrownException)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass has only one value
failure.fThrownException has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.notification.Failure.serialVersionUID] has only one value
this.listeners[org.junit.runner.notification.Failure.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailures(java.util.List, java.util.List):::ENTER
this.listeners[] == listeners[]
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listeners != null
failures != null
failures[] elements has only one value
failures[] elements != null
failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
failures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure] }
size(this.listeners[]) == 2
size(failures[]) one of { 0, 1 }
this.listeners.getClass().getName() != failures.getClass().getName()
size(this.listeners[])-1 >= size(failures[])
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailures(java.util.List, java.util.List):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == listeners[]
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
listeners[] == orig(this.listeners[])
listeners[] == orig(listeners[])
failures[] == orig(failures[])
listeners[] contains no nulls and has only one value, of length 2
listeners[] elements != null
listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
failures[] elements has only one value
failures[] elements != null
failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
failures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure] }
size(this.listeners[]) == 2
this.listeners.getClass().getName() != orig(failures.getClass().getName())
size(listeners[])-1 >= orig(size(failures[]))
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Result.serialVersionUID == size(result.failures[])
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Result.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteFinished(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listener has only one value
size(this.listeners[]) == 2
listener in this.listeners[]
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[]) == orig(size(this.listeners[]))-1
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
===========================================================================
org.junit.runner.notification.RunNotifier.wrapIfNotThreadSafe(org.junit.runner.notification.RunListener):::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier.wrapIfNotThreadSafe(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
===========================================================================
org.junit.runner.notification.SynchronizedRunListener:::OBJECT
this has only one value
this.listener has only one value
this.listener != null
this.monitor has only one value
this.monitor != null
this.monitor.getClass().getName() == org.junit.runner.notification.RunNotifier.class
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.SynchronizedRunListener(org.junit.runner.notification.RunListener, java.lang.Object):::ENTER
listener has only one value
monitor has only one value
monitor.getClass().getName() == org.junit.runner.notification.RunNotifier.class
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.SynchronizedRunListener(org.junit.runner.notification.RunListener, java.lang.Object):::EXIT
this.listener == orig(listener)
this.monitor == orig(monitor)
this.monitor.getClass().getName() == orig(monitor.getClass().getName())
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFailure(org.junit.runner.notification.Failure):::ENTER
org.junit.runner.notification.Failure.serialVersionUID == org.junit.runner.Description.serialVersionUID
failure has only one value
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass has only one value
failure.fThrownException has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFailure(org.junit.runner.notification.Failure):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren.getClass().getName() == orig(failure.fDescription.fChildren.getClass().getName())
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fUniqueId == orig(failure.fDescription.fUniqueId)
failure.fDescription.fUniqueId.getClass().getName() == orig(failure.fDescription.fUniqueId.getClass().getName())
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fDescription.fTestClass == orig(failure.fDescription.fTestClass)
failure.fThrownException == orig(failure.fThrownException)
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "testMathpbx02(org.apache.commons.math.linear.EigenDecompositionImplTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass has only one value
failure.fThrownException has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFinished(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(result.failures[])
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunFinished(org.junit.runner.Result):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteFinished(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runners.ParentRunner$1:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
size(org.junit.runners.ParentRunner.this.filteredChildren[]) == 1
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass == null
org.junit.runners.ParentRunner.this.filteredChildren == null
org.junit.runners.ParentRunner.this.scheduler == null
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.testClass == null
org.junit.runners.ParentRunner.this.filteredChildren == null
org.junit.runners.ParentRunner.this.scheduler == null
===========================================================================
org.junit.runners.ParentRunner$1.finished():::ENTER
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$1.finished():::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::ENTER
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
childStatement has only one value
childStatement.getClass().getName() == org.junit.runners.ParentRunner$4.class
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$2:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(this.val$notifier.listeners[])-1 == size(org.junit.runners.ParentRunner.VALIDATORS[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$notifier has only one value
this.val$notifier.listeners has only one value
this.val$notifier.listeners[] contains no nulls and has only one value, of length 2
this.val$notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.val$notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.val$notifier.pleaseStop == false
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$2.listeners[])-1
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.listeners has only one value
$hidden$2.listeners[] contains no nulls and has only one value, of length 2
$hidden$2.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.pleaseStop == false
size($hidden$2.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::EXIT
this.val$notifier == orig($hidden$2)
this.val$notifier.listeners == $hidden$2.listeners
this.val$notifier.listeners[] == $hidden$2.listeners[]
this.val$notifier.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
this.val$notifier.pleaseStop == $hidden$2.pleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
$hidden$2.listeners == orig($hidden$2.listeners)
$hidden$2.listeners[] == orig($hidden$2.listeners[])
$hidden$2.listeners.getClass().getName() == orig($hidden$2.listeners.getClass().getName())
$hidden$2.pleaseStop == orig($hidden$2.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$2.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size($hidden$2.listeners[]))-1
$hidden$2.listeners has only one value
$hidden$2.listeners[] contains no nulls and has only one value, of length 2
$hidden$2.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.pleaseStop == false
size($hidden$2.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::EXIT
this.val$notifier == orig(this.val$notifier)
this.val$notifier.listeners == orig(this.val$notifier.listeners)
this.val$notifier.listeners[] == orig(this.val$notifier.listeners[])
this.val$notifier.listeners.getClass().getName() == orig(this.val$notifier.listeners.getClass().getName())
this.val$notifier.pleaseStop == orig(this.val$notifier.pleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.val$notifier.listeners[]))-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$3:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$statement has only one value
this.val$statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, org.junit.runners.model.Statement):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, org.junit.runners.model.Statement):::EXIT
this.val$statement == orig($hidden$2)
this.val$statement.getClass().getName() == orig($hidden$2.getClass().getName())
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$3.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$3.evaluate():::EXIT
this.val$statement == orig(this.val$statement)
this.val$statement.getClass().getName() == orig(this.val$statement.getClass().getName())
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$4:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(this.val$notifier.listeners[])-1 == size(org.junit.runners.ParentRunner.VALIDATORS[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$each has only one value
this.val$each.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
this.val$notifier has only one value
this.val$notifier.listeners has only one value
this.val$notifier.listeners[] contains no nulls and has only one value, of length 2
this.val$notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.val$notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.val$notifier.pleaseStop == false
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.listeners[]) == 2
org.junit.runners.ParentRunner.this.filteredChildren[] elements == this.val$each
this.val$each in org.junit.runners.ParentRunner.this.filteredChildren[]
this.val$each.getClass().getName() in org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$3.listeners[])-1
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
$hidden$3 has only one value
$hidden$3.listeners has only one value
$hidden$3.listeners[] contains no nulls and has only one value, of length 2
$hidden$3.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$3.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$3.pleaseStop == false
size($hidden$3.listeners[]) == 2
$hidden$2 in org.junit.runners.ParentRunner.this.filteredChildren[]
org.junit.runners.ParentRunner.this.filteredChildren[] elements == $hidden$2
$hidden$2.getClass().getName() in org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::EXIT
this.val$each == orig($hidden$2)
this.val$each.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$notifier == orig($hidden$3)
this.val$notifier.listeners == $hidden$3.listeners
this.val$notifier.listeners[] == $hidden$3.listeners[]
this.val$notifier.listeners.getClass().getName() == $hidden$3.listeners.getClass().getName()
this.val$notifier.pleaseStop == $hidden$3.pleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
$hidden$3.listeners == orig($hidden$3.listeners)
$hidden$3.listeners[] == orig($hidden$3.listeners[])
$hidden$3.listeners.getClass().getName() == orig($hidden$3.listeners.getClass().getName())
$hidden$3.pleaseStop == orig($hidden$3.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$3.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size($hidden$3.listeners[]))-1
$hidden$3.listeners has only one value
$hidden$3.listeners[] contains no nulls and has only one value, of length 2
$hidden$3.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$3.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$3.pleaseStop == false
size($hidden$3.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$4.run():::ENTER
===========================================================================
org.junit.runners.ParentRunner$4.run():::EXIT
this.val$each == orig(this.val$each)
this.val$each.getClass().getName() == orig(this.val$each.getClass().getName())
this.val$notifier == orig(this.val$notifier)
this.val$notifier.listeners == orig(this.val$notifier.listeners)
this.val$notifier.listeners[] == orig(this.val$notifier.listeners[])
this.val$notifier.listeners.getClass().getName() == orig(this.val$notifier.listeners.getClass().getName())
this.val$notifier.pleaseStop == orig(this.val$notifier.pleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.val$notifier.listeners[]))-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector:::OBJECT
this has only one value
this.entries has only one value
this.entries[] == []
this.entries[].getClass().getName() == []
this.entries.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.ClassRuleCollector():::EXIT
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.getOrderedRules():::ENTER
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.getOrderedRules():::EXIT
this.entries == orig(this.entries)
this.entries[] == return[]
this.entries.getClass().getName() == return.getClass().getName()
return[] == orig(this.entries[])
return.getClass().getName() == orig(this.entries.getClass().getName())
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS != null
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[] elements != null
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner:::OBJECT
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(this.filteredChildren[])
this has only one value
this.getClass().getName() == org.junit.runner.Computer$2.class
this.childrenLock has only one value
this.childrenLock != null
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR != null
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR != null
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations != null
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.testClass.fieldsForAnnotations != null
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[] elements != null
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler != null
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.getClass().getName() != org.junit.runners.ParentRunner.VALIDATORS.getClass().getName()
this.getClass().getName() != this.childrenLock.getClass().getName()
this.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.getClass().getName() != this.filteredChildren.getClass().getName()
this.getClass().getName() != this.scheduler.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.childrenLock.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.filteredChildren.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.scheduler.getClass().getName()
this.childrenLock.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != this.filteredChildren.getClass().getName()
this.childrenLock.getClass().getName() != this.scheduler.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.scheduler.getClass().getName()
this.filteredChildren.getClass().getName() != this.scheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::ENTER
testClass == null
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::EXIT
this.testClass.clazz == orig(testClass)
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.applyValidators(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.applyValidators(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::ENTER
this.testClass has only one value
this.filteredChildren has only one value
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT227
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT227;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return == false
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$3.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classRules():::ENTER
this.testClass has only one value
this.filteredChildren has only one value
===========================================================================
org.junit.runners.ParentRunner.classRules():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return[])
size(this.filteredChildren[])-1 == size(return[])
size(return[]) == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))-1
size(return[]) == orig(size(this.filteredChildren[]))-1
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.createTestClass(java.lang.Class):::ENTER
this.testClass == null
this.filteredChildren == null
testClass == null
===========================================================================
org.junit.runners.ParentRunner.createTestClass(java.lang.Class):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return.methodsForAnnotations.getClass().getName() == return.fieldsForAnnotations.getClass().getName()
this.testClass == null
this.filteredChildren == null
return has only one value
return.clazz == null
return.methodsForAnnotations has only one value
return.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
return.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.ParentRunner.getDescription():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getDescription():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == org.junit.runner.Description.EMPTY.fTestClass
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren[].getClass().getName() == orig(this.filteredChildren[].getClass().getName())
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
org.junit.runner.Description.serialVersionUID == size(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runner.Description.serialVersionUID == size(this.filteredChildren[])
org.junit.runner.Description.serialVersionUID == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(this.testClass.clazz)
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return.fAnnotations[])
this.testClass has only one value
this.filteredChildren has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "classes"
return.fUniqueId has only one value
org.junit.runners.ParentRunner.VALIDATORS[] elements == org.junit.runners.ParentRunner.VALIDATORS[org.junit.runner.Description.serialVersionUID-1]
this.filteredChildren[] == orig(this.filteredChildren[]) (elementwise)
this.filteredChildren[] is the reverse of orig(this.filteredChildren[])
this.filteredChildren[] elements == this.filteredChildren[org.junit.runner.Description.serialVersionUID-1]
orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1]) in this.filteredChildren[]
this.filteredChildren[] elements == orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1])
this.filteredChildren[].getClass().getName() == orig(this.filteredChildren[].getClass().getName()) (elementwise)
orig(this.filteredChildren[]) elements == this.filteredChildren[org.junit.runner.Description.serialVersionUID-1]
this.filteredChildren[org.junit.runner.Description.serialVersionUID-1] in orig(this.filteredChildren[])
orig(this.filteredChildren[]) elements == orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1])
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == return
this.filteredChildren[] == return[]
this.filteredChildren.getClass().getName() == return.getClass().getName()
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return[].getClass().getName() == orig(this.filteredChildren[].getClass().getName())
return.getClass().getName() == orig(this.filteredChildren.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(return[])
this.testClass has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
return[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return[] == orig(this.filteredChildren[]) (elementwise)
return[] is the reverse of orig(this.filteredChildren[])
return[].getClass().getName() == orig(this.filteredChildren[].getClass().getName()) (elementwise)
===========================================================================
org.junit.runners.ParentRunner.getRunnerAnnotations():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getRunnerAnnotations():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return[])
size(return[]) == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))-1
this.testClass has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == return
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == return.clazz
this.testClass.methodsForAnnotations == return.methodsForAnnotations
this.testClass.methodsForAnnotations.getClass().getName() == return.methodsForAnnotations.getClass().getName()
this.testClass.fieldsForAnnotations == return.fieldsForAnnotations
this.testClass.fieldsForAnnotations.getClass().getName() == return.methodsForAnnotations.getClass().getName()
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(this.testClass)
return.clazz == orig(this.testClass.clazz)
return.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
return.methodsForAnnotations.getClass().getName() == return.fieldsForAnnotations.getClass().getName()
return.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
return.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
return.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
return has only one value
return.clazz == null
return.methodsForAnnotations has only one value
return.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
return.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != return.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != orig(this.getClass().getName())
this.childrenLock.getClass().getName() != return.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != orig(this.getClass().getName())
this.scheduler.getClass().getName() != return.methodsForAnnotations.getClass().getName()
this.scheduler.getClass().getName() != orig(this.getClass().getName())
return.methodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
child has only one value
child.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
child in this.filteredChildren[]
this.filteredChildren[] elements == child
child.getClass().getName() in this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return == false
orig(child) in this.filteredChildren[]
this.filteredChildren[] elements == orig(child)
orig(child.getClass().getName()) in this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.validate():::ENTER
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.validate():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.validateClassRules(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.validateClassRules(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
isStatic == true
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withInterruptIsolation(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withInterruptIsolation(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$3.class
===========================================================================
org.junit.runners.RuleContainer$1:::OBJECT
this has only one value
===========================================================================
org.junit.runners.RuleContainer$1.():::EXIT
===========================================================================
org.junit.runners.Suite:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.Suite:::OBJECT
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName()
this.runners.getClass().getName() == this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(this.runners[]) == size(org.junit.runners.ParentRunner.VALIDATORS[])
this has only one value
this.runners has only one value
this.runners[] contains no nulls and has only one value, of length 1
this.runners[] elements has only one value
this.runners[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
this.runners[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
this.runners.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.childrenLock has only one value
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.runners[] == this.filteredChildren[] (elementwise)
this.runners[] is the reverse of this.filteredChildren[]
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName() (elementwise)
this.runners.getClass().getName() != org.junit.runners.ParentRunner.VALIDATORS.getClass().getName()
this.runners.getClass().getName() != this.childrenLock.getClass().getName()
this.runners.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.runners.getClass().getName() != this.scheduler.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.childrenLock.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.scheduler.getClass().getName()
this.childrenLock.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != this.scheduler.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.scheduler.getClass().getName()
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::ENTER
klass == null
runners has only one value
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
runners[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
runners.getClass().getName() == java.util.ArrayList.class
size(runners[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::EXIT
this.runners[] == runners[]
this.testClass.clazz == orig(klass)
runners[] == orig(runners[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(runners[]))
this.filteredChildren == null
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
runners[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(classes[]))
this.filteredChildren == null
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::ENTER
this.runners[] == this.filteredChildren[]
this.filteredChildren has only one value
child has only one value
child.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
child in this.runners[]
this.runners[] elements == child
child.getClass().getName() in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::EXIT
this.runners == orig(this.runners)
this.runners[] == this.filteredChildren[]
this.runners[] == orig(this.runners[])
this.runners[] == orig(this.filteredChildren[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
this.runners.getClass().getName() == orig(this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == org.junit.runner.Description.EMPTY.fTestClass
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
org.junit.runner.Description.serialVersionUID == size(this.runners[])
org.junit.runner.Description.serialVersionUID == size(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runner.Description.serialVersionUID == size(this.filteredChildren[])
org.junit.runner.Description.serialVersionUID == orig(size(this.runners[]))
org.junit.runner.Description.serialVersionUID == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))
org.junit.runner.Description.serialVersionUID == orig(size(this.filteredChildren[]))
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(this.testClass.clazz)
orig(child) == this.runners[org.junit.runner.Description.serialVersionUID-1]
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return.fAnnotations[])
this.filteredChildren has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "EigenDecompositionImpl Tests"
return.fUniqueId has only one value
orig(child) in this.runners[]
this.runners[] elements == orig(child)
this.runners[] elements == this.runners[org.junit.runner.Description.serialVersionUID-1]
orig(child.getClass().getName()) in this.runners[].getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS[] elements == org.junit.runners.ParentRunner.VALIDATORS[org.junit.runner.Description.serialVersionUID-1]
===========================================================================
org.junit.runners.Suite.getChildren():::ENTER
this.filteredChildren == null
===========================================================================
org.junit.runners.Suite.getChildren():::EXIT
this.runners == return
this.runners[] == return[]
this.runners.getClass().getName() == return.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(this.runners)
return[] == orig(this.runners[])
return.getClass().getName() == orig(this.runners.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(return[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
this.filteredChildren == null
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
return[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::ENTER
this.runners[] == this.filteredChildren[]
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.filteredChildren has only one value
runner has only one value
runner.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
runner in this.runners[]
this.runners[] elements == runner
runner.getClass().getName() in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::EXIT
this.runners == orig(this.runners)
this.runners[] == this.filteredChildren[]
this.runners[] == orig(this.runners[])
this.runners[] == orig(this.filteredChildren[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
this.runners.getClass().getName() == orig(this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
orig(runner) in this.runners[]
this.runners[] elements == orig(runner)
orig(runner.getClass().getName()) in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
this.getClass().getName() != this.parents.getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder.RunnerBuilder():::EXIT
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == orig(parent)
this.parents has only one value
return == null
===========================================================================
org.junit.runners.model.RunnerBuilder.configureRunner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
===========================================================================
org.junit.runners.model.RunnerBuilder.configureRunner(org.junit.runner.Runner):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
klass == null
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
this.parents has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
return[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.SuiteMethod]
return[].getClass().getName() elements == org.junit.internal.runners.SuiteMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT74
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return.getClass().getName() == org.junit.internal.runners.SuiteMethod.class
===========================================================================
org.junit.runners.model.Statement:::OBJECT
===========================================================================
org.junit.runners.model.Statement.Statement():::EXIT
===========================================================================
org.junit.runners.model.TestClass$FieldComparator:::OBJECT
this has only one value
===========================================================================
org.junit.runners.model.TestClass$FieldComparator.FieldComparator():::EXIT
===========================================================================
org.junit.runners.model.TestClass$MethodComparator:::OBJECT
this has only one value
===========================================================================
org.junit.runners.model.TestClass$MethodComparator.MethodComparator():::EXIT
===========================================================================
org.junit.runners.model.TestClass:::CLASS
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR != null
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR != null
===========================================================================
org.junit.runners.model.TestClass:::OBJECT
this.methodsForAnnotations.getClass().getName() == this.fieldsForAnnotations.getClass().getName()
this has only one value
this.clazz == null
this.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::ENTER
clazz == null
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::EXIT
this.clazz == orig(clazz)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::ENTER
this.clazz == test
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
test == null
annotationClass has only one value
valueClass has only one value
consumer has only one value
consumer.getClass().getName() == org.junit.runners.ParentRunner$ClassRuleCollector.class
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.clazz == orig(test)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::ENTER
this.clazz == test
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
test == null
annotationClass has only one value
valueClass has only one value
consumer has only one value
consumer.getClass().getName() == org.junit.runners.ParentRunner$ClassRuleCollector.class
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.clazz == orig(test)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
annotationClass has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class, boolean):::ENTER
map.getClass().getName() == java.util.Collections$UnmodifiableMap.class
fillIfAbsent == false
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class, boolean):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$EmptyList.class
return.getClass().getName() != orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT215
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == return
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
return == orig(this.clazz)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return == null
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::ENTER
testClass == null
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.TestClass.makeDeeplyUnmodifiable(java.util.Map):::ENTER
source.getClass().getName() == java.util.LinkedHashMap.class
===========================================================================
org.junit.runners.model.TestClass.makeDeeplyUnmodifiable(java.util.Map):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return.getClass().getName() == java.util.Collections$UnmodifiableMap.class
===========================================================================
org.junit.runners.model.TestClass.scanAnnotatedMembers(java.util.Map, java.util.Map):::ENTER
this.methodsForAnnotations == this.fieldsForAnnotations
this.methodsForAnnotations == null
methodsForAnnotations has only one value
methodsForAnnotations.getClass().getName() == java.util.LinkedHashMap.class
fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.scanAnnotatedMembers(java.util.Map, java.util.Map):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == this.fieldsForAnnotations
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations == null
===========================================================================
org.junit.validator.AnnotationValidatorFactory:::CLASS
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationValidatorFactory:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationValidatorFactory.AnnotationValidatorFactory():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator:::OBJECT
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator.AnnotatableValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator.ClassValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator.FieldValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator.MethodValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator:::CLASS
org.junit.validator.AnnotationsValidator.VALIDATORS has only one value
org.junit.validator.AnnotationsValidator.VALIDATORS[] contains no nulls and has only one value, of length 3
org.junit.validator.AnnotationsValidator.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator.ClassValidator, org.junit.validator.AnnotationsValidator.MethodValidator, org.junit.validator.AnnotationsValidator.FieldValidator]
org.junit.validator.AnnotationsValidator.VALIDATORS.getClass().getName() == java.util.Arrays$ArrayList.class
size(org.junit.validator.AnnotationsValidator.VALIDATORS[]) == 3
===========================================================================
org.junit.validator.AnnotationsValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator.AnnotationsValidator():::EXIT
Exiting Daikon.
