Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 4 times.  Unmatched entries are ignored!
Unterminated calls:
  org.junit.runner.JUnitCore.main(java.lang.String[]) : 1 invocation
  org.apache.commons.math.stat.correlation.PearsonsCorrelation.correlation(double[], double[]) : 1 invocation
  org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation(org.apache.commons.math.linear.RealMatrix) : 1 invocation
  org.apache.commons.math.stat.correlation.PearsonsCorrelation.checkSufficientData(org.apache.commons.math.linear.RealMatrix) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
com.sun.proxy.$Proxy3:::CLASS
com.sun.proxy.$Proxy3.m1 has only one value
com.sun.proxy.$Proxy3.m2 has only one value
com.sun.proxy.$Proxy3.m3 has only one value
com.sun.proxy.$Proxy3.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy3:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
return has only one value
===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message.toString == "TestCase.fName cannot be null"
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == orig(message.toString)
message.toString == "TestCase.fName cannot be null"
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
message.toString == "TestCase.fName cannot be null"
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
this.fName.toString one of { "testInsufficientData", "testPValueNearZero" }
===========================================================================
junit.framework.TestCase.TestCase():::EXIT
this.fName == null
===========================================================================
junit.framework.TestCase.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message.toString == "TestCase.fName cannot be null"
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.TestCase.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == orig(message.toString)
message.toString == "TestCase.fName cannot be null"
===========================================================================
junit.framework.TestCase.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.TestCase.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
return == 1
===========================================================================
junit.framework.TestCase.getName():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.getName():::EXIT
this.fName == return
this.fName.toString == return.toString
return == orig(this.fName)
return.toString == orig(this.fName.toString)
return != null
return.toString one of { "testInsufficientData", "testPValueNearZero" }
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fRunTests one of { 0, 1 }
result.fStop == false
size(result.fListeners[]) == 1
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fRunTests one of { 1, 2 }
result.fStop == false
size(result.fListeners[]) == 1
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::ENTER
this.fName == null
name.toString one of { "testInsufficientData", "testPValueNearZero" }
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
name.toString one of { "testInsufficientData", "testPValueNearZero" }
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
this.val$test.fName.toString one of { "testInsufficientData", "testPValueNearZero" }
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
junit.framework.TestResult.this.fRunTests one of { 1, 2 }
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
junit.framework.TestResult.this.fRunTests one of { 1, 2 }
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
$hidden$2.fName.toString one of { "testInsufficientData", "testPValueNearZero" }
size(junit.framework.TestResult.this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName == $hidden$2.fName
this.val$test.fName.toString == $hidden$2.fName.toString
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
$hidden$2.fName == orig($hidden$2.fName)
$hidden$2.fName.toString == orig($hidden$2.fName.toString)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
$hidden$2.fName.toString one of { "testInsufficientData", "testPValueNearZero" }
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName == orig(this.val$test.fName)
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
this.fListeners[].getClass().getName() one of { [], [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener] }
this.fRunTests one of { 0, 1, 2 }
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 1, 2 }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors == orig(this.fErrors)
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fRunTests one of { 1, 2 }
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 1, 2 }
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 1, 2 }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 0, 1 }
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
test.fName.toString one of { "testInsufficientData", "testPValueNearZero" }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
test.fName.toString == orig(test.fName.toString)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 1, 2 }
test.fName.toString one of { "testInsufficientData", "testPValueNearZero" }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 1, 2 }
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 1, 2 }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 0, 1 }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 0, 1 }
return == false
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 0, 1 }
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
this.fRunTests one of { 1, 2 }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestSuite:::OBJECT
this has only one value
this.fName.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
this.fTests has only one value
this.fTests != null
this.fTests[] elements != null
this.fTests[].getClass().getName() elements == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
size(this.fTests[]) one of { 0, 1, 2 }
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fName has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() one of { [], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] }
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName has only one value
this.fTests[].getClass().getName() one of { [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] }
size(this.fTests[]) one of { 1, 2 }
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this.fName has only one value
this.fName != null
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT293
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
names[] contains no nulls and has only one value, of length 2
names[].getClass().getName() == [java.lang.String, java.lang.String]
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT297
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
orig(this.fTests[]) elements has only one value
orig(this.fTests[].getClass().getName()) one of { [], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] }
orig(names[]) elements has only one value
orig(names[].getClass().getName()) one of { [], [java.lang.String] }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests[].getClass().getName() one of { [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] }
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
size(this.fTests[]) one of { 1, 2 }
orig(size(names[])) one of { 0, 1, 2 }
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class):::ENTER
this.fName == null
this.fTests[] == []
this.fTests[].getClass().getName() == []
theClass has only one value
===========================================================================
junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class):::EXIT146
===========================================================================
junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
name.toString one of { "testInsufficientData", "testPValueNearZero" }
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT73
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
name.toString == orig(name.toString)
name.toString one of { "testInsufficientData", "testPValueNearZero" }
return.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
===========================================================================
junit.framework.TestSuite.getName():::ENTER
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.getName():::EXIT
this.fName == return
this.fName.toString == return.toString
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
return == orig(this.fName)
return.toString == orig(this.fName.toString)
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
return has only one value
return.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT86
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this.fName has only one value
this.fName != null
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests])  <==>  (return == false)
(this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests])  <==>  (size(this.fTests[]) == 2)
(this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests])  ==>  (this.fTests[] contains no nulls and has only one value, of length 2)
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] })  <==>  (return == true)
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] })  <==>  (size(this.fTests[]) one of { 0, 1 })
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] })  ==>  (this.fTests[] elements has only one value)
this.fName has only one value
this.fName != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
this.fTests[] elements has only one value
this.fTests[].getClass().getName() one of { [], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] }
return == true
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
return == false
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this.fName has only one value
this.fName != null
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests])  <==>  (return == false)
(this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests])  <==>  (size(this.fTests[]) == 2)
(this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests])  ==>  (this.fTests[] contains no nulls and has only one value, of length 2)
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] })  <==>  (return == true)
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] })  <==>  (size(this.fTests[]) one of { 0, 1 })
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] })  ==>  (this.fTests[] elements has only one value)
this.fName has only one value
this.fName != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
this.fTests[] elements has only one value
this.fTests[].getClass().getName() one of { [], [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests] }
return == true
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
return == false
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
size(this.fTests[])-1 == size(result.fListeners[])
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(this.fTests[]) == 2
this.fTests[result.fRunTests] has only one value
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(this.fTests[])
result.fRunTests == orig(size(this.fTests[]))
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
size(this.fTests[])-1 == size(result.fListeners[])
size(result.fListeners[]) == orig(size(this.fTests[]))-1
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fRunTests == 2
result.fStop == false
this.fTests[result.fRunTests-1] has only one value
this.fTests[orig(result.fRunTests)] has only one value
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
size(this.fTests[])-1 == size(result.fListeners[])
size(result.fFailures[]) == size(result.fListeners[])-1
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fRunTests one of { 0, 1 }
result.fStop == false
size(this.fTests[]) == 2
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[result.fRunTests-1]
size(this.fTests[])-1 == size(result.fListeners[])
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
size(result.fListeners[]) == orig(size(this.fTests[]))-1
this.fTests[result.fRunTests-1] == this.fTests[orig(result.fRunTests)]
this.fTests[result.fRunTests-1] == orig(this.fTests[result.fRunTests])
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fRunTests one of { 1, 2 }
result.fStop == false
size(this.fTests[]) == 2
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.testAt(int):::ENTER
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
index one of { 0, 1 }
size(this.fTests[]) == 2
index <= size(this.fTests[])-1
===========================================================================
junit.framework.TestSuite.testAt(int):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
return == this.fTests[orig(index)]
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
return.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
size(this.fTests[]) == 2
return in this.fTests[]
return.getClass().getName() in this.fTests[].getClass().getName()
orig(index) <= size(this.fTests[])-1
===========================================================================
junit.framework.TestSuite.testCount():::ENTER
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.testCount():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
return == size(this.fTests[])
return == orig(size(this.fTests[]))
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
return == 2
this.fTests[return-1] has only one value
===========================================================================
junit.runner.Version.id():::EXIT
return has only one value
return.toString == "4.13.2-Daikon"
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::OBJECT
this.val$pattern.toString one of { "insufficient data: only {0} rows and {1} columns.", "invalid array dimensions. xArray has size {0}; yArray has {1} elements" }
this.val$arguments.getClass().getName() == java.lang.Object[].class
this.val$arguments[].getClass().getName() == [java.lang.Integer, java.lang.Integer]
this.val$arguments[].getClass().getName() elements == java.lang.Integer.class
size(this.val$arguments[]) == 2
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::ENTER
$hidden$1.toString one of { "insufficient data: only {0} rows and {1} columns.", "invalid array dimensions. xArray has size {0}; yArray has {1} elements" }
$hidden$2.getClass().getName() == java.lang.Object[].class
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::EXIT
this.val$pattern == orig($hidden$1)
this.val$pattern.toString == $hidden$1.toString
this.val$arguments == orig($hidden$2)
this.val$arguments.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$arguments[] == $hidden$2[]
$hidden$1.toString == orig($hidden$1.toString)
$hidden$2[] == orig($hidden$2[])
$hidden$1.toString one of { "insufficient data: only {0} rows and {1} columns.", "invalid array dimensions. xArray has size {0}; yArray has {1} elements" }
===========================================================================
org.apache.commons.math.MathRuntimeException:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "insufficient data: only {0} rows and {1} columns.", "invalid array dimensions. xArray has size {0}; yArray has {1} elements" }
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) == 2
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "insufficient data: only {0} rows and {1} columns.", "invalid array dimensions. xArray has size {0}; yArray has {1} elements" }
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::CLASS
org.apache.commons.math.distribution.AbstractContinuousDistribution.serialVersionUID == org.apache.commons.math.distribution.AbstractDistribution.serialVersionUID
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
this.solverAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl:::CLASS
org.apache.commons.math.distribution.AbstractContinuousDistribution.serialVersionUID == org.apache.commons.math.distribution.AbstractDistribution.serialVersionUID
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl:::OBJECT
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == this.solverAbsoluteAccuracy
this.degreesOfFreedom >= 0.0
this.solverAbsoluteAccuracy == 1.0E-9
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY <= this.degreesOfFreedom
this.degreesOfFreedom % org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == 0
this.degreesOfFreedom >= this.solverAbsoluteAccuracy
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double):::ENTER
degreesOfFreedom one of { 1.0, 118.0 }
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double):::EXIT
this.degreesOfFreedom == orig(degreesOfFreedom)
this.degreesOfFreedom one of { 1.0, 118.0 }
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double, double):::ENTER
degreesOfFreedom one of { 1.0, 118.0 }
inverseCumAccuracy == 1.0E-9
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double, double):::EXIT
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == orig(inverseCumAccuracy)
this.degreesOfFreedom == orig(degreesOfFreedom)
this.degreesOfFreedom one of { 1.0, 118.0 }
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double):::ENTER
this has only one value
this.degreesOfFreedom == 118.0
x == -3915.524971171073
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
this.degreesOfFreedom == 118.0
return == 7.1725247070566985E-304
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double):::ENTER
this has only one value
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % this.degreesOfFreedom == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < this.degreesOfFreedom
degreesOfFreedom % org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % degreesOfFreedom == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < degreesOfFreedom
this.degreesOfFreedom <= degreesOfFreedom
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double):::EXIT
this.degreesOfFreedom == orig(degreesOfFreedom)
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % this.degreesOfFreedom == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < this.degreesOfFreedom
this.degreesOfFreedom >= orig(this.degreesOfFreedom)
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedomInternal(double):::ENTER
newDegreesOfFreedom >= 1.0
newDegreesOfFreedom % org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % newDegreesOfFreedom == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < newDegreesOfFreedom
this.degreesOfFreedom <= newDegreesOfFreedom
this.solverAbsoluteAccuracy % newDegreesOfFreedom == 0
this.solverAbsoluteAccuracy < newDegreesOfFreedom
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedomInternal(double):::EXIT
this.degreesOfFreedom == orig(newDegreesOfFreedom)
this.solverAbsoluteAccuracy == orig(this.solverAbsoluteAccuracy)
this.degreesOfFreedom >= 1.0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % this.degreesOfFreedom == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < this.degreesOfFreedom
this.degreesOfFreedom > this.solverAbsoluteAccuracy
this.solverAbsoluteAccuracy % this.degreesOfFreedom == 0
this.degreesOfFreedom >= orig(this.degreesOfFreedom)
this.solverAbsoluteAccuracy <= orig(this.degreesOfFreedom)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::ENTER
rowDimension one of { 2, 120 }
columnDimension one of { 1, 2 }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix:::OBJECT
this.blockRows == size(this.blocks[])
this.blocks != null
this.blocks.getClass().getName() == double[][].class
this.blocks[] elements != null
this.rows one of { 2, 120 }
this.columns one of { 1, 2 }
this.blockRows one of { 1, 3 }
this.blockColumns == 1
this.lu == null
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE != this.rows
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > this.columns
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > this.blockRows
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > this.rows
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > this.columns
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > this.blockRows
this.rows >= this.columns
this.rows > this.blockRows
this.rows > this.blockColumns
this.columns >= this.blockColumns
this.columns >= size(this.blocks[])-1
this.blockRows >= this.blockColumns
this.blockColumns != size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(double[][]):::ENTER
rawData.getClass().getName() == double[][].class
size(rawData[]) one of { 2, 120 }
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(double[][]):::EXIT
this.blocks.getClass().getName() == orig(rawData.getClass().getName())
this.rows == orig(size(rawData[]))
rawData[] == orig(rawData[])
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int):::ENTER
rows == columns
rows == 2
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int):::EXIT
this.rows == this.columns
this.rows == orig(rows)
this.rows == orig(columns)
this.blockRows == this.blockColumns
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 1
this.blocks[] elements has only one value
this.rows == 2
this.blockRows == 1
this.blocks[] elements == this.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int, double[][], boolean):::ENTER
rows one of { 2, 120 }
columns one of { 1, 2 }
blockData.getClass().getName() == double[][].class
copyArray == false
size(blockData[]) one of { 1, 3 }
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int, double[][], boolean):::EXIT
this.blocks == orig(blockData)
this.blocks.getClass().getName() == orig(blockData.getClass().getName())
this.blocks[] == blockData[]
this.rows == orig(rows)
this.columns == orig(columns)
this.blockRows == orig(size(blockData[]))
blockData[] == orig(blockData[])
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockHeight(int):::ENTER
blockRow one of { 0, 1, 2 }
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > blockRow
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > blockRow
this.rows > blockRow
this.columns >= blockRow
blockRow <= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockHeight(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockRows == orig(size(this.blocks[]))
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return one of { 2, 16, 52 }
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE >= return
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > return
this.rows >= return
this.rows > orig(blockRow)
return % this.columns == 0
this.columns <= return
this.columns >= orig(blockRow)
this.blockRows < return
this.blockColumns < return
return > orig(blockRow)
orig(blockRow) <= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockWidth(int):::ENTER
this.blocks[this.blockColumns-1] == this.blocks[blockColumn]
blockColumn == 0
this.rows > blockColumn
this.columns > blockColumn
blockColumn <= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockWidth(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == return
this.blockRows == orig(this.blockRows)
this.blockRows == orig(size(this.blocks[]))
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return == orig(this.columns)
this.blocks[this.blockColumns-1] == this.blocks[orig(blockColumn)]
this.blocks[orig(this.blockColumns)-1] == this.blocks[orig(blockColumn)]
this.blocks[orig(blockColumn)] == orig(this.blocks[post(this.blockColumns)-1])
this.blocks[orig(blockColumn)] == orig(this.blocks[this.blockColumns-1])
return one of { 1, 2 }
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > return
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > return
this.rows >= return
this.rows > orig(blockColumn)
this.blockColumns <= return
return > orig(blockColumn)
return >= size(this.blocks[])-1
orig(blockColumn) <= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.createBlocksLayout(int, int):::ENTER
rows == columns
rows == 2
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.createBlocksLayout(int, int):::EXIT
return has only one value
return.getClass().getName() == double[][].class
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
size(return[]) == 1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumn(int):::ENTER
this.columns == size(this.blocks[])-1
this.blocks[this.columns] == this.blocks[this.blockRows-1]
this.blocks[this.columns-1] == this.blocks[this.blockColumns]
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 3
this.rows == 120
this.blockRows == 3
column one of { 0, 1 }
this.blocks[this.columns] has only one value
this.blocks[this.blockColumns] has only one value
this.blocks[this.blockColumns-1] has only one value
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumn(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.rows == size(return[])
this.columns == orig(this.columns)
this.columns == size(this.blocks[])-1
this.columns == orig(size(this.blocks[]))-1
this.blockRows == orig(this.blockRows)
this.blockRows == orig(size(this.blocks[]))
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
this.blocks[this.columns] == this.blocks[this.blockRows-1]
this.blocks[this.columns] == this.blocks[orig(this.blockRows)-1]
this.blocks[this.columns] == orig(this.blocks[post(this.blockRows)-1])
this.blocks[this.columns] == orig(this.blocks[this.blockRows-1])
this.blocks[this.columns-1] == this.blocks[this.blockColumns]
this.blocks[this.blockColumns] == this.blocks[orig(this.columns)-1]
this.blocks[this.blockColumns] == orig(this.blocks[post(this.columns)-1])
this.blocks[this.blockColumns] == orig(this.blocks[this.columns-1])
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 3
this.rows == 120
this.blockRows == 3
return[] one of { [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0], [1.0, 1.5, 2.3333333333333335, 3.25, 4.2, 5.166666666666667, 6.142857142857143, 7.125, 8.11111111111111, 9.1, 10.090909090909092, 11.083333333333334, 12.076923076923077, 13.071428571428571, 14.066666666666666, 15.0625, 16.058823529411764, 17.055555555555557, 18.05263157894737, 19.05, 20.047619047619047, 21.045454545454547, 22.043478260869566, 23.041666666666668, 24.04, 25.03846153846154, 26.037037037037038, 27.035714285714285, 28.03448275862069, 29.033333333333335, 30.032258064516128, 31.03125, 32.03030303030303, 33.029411764705884, 34.02857142857143, 35.02777777777778, 36.027027027027025, 37.026315789473685, 38.02564102564103, 39.025, 40.02439024390244, 41.023809523809526, 42.02325581395349, 43.02272727272727, 44.022222222222226, 45.02173913043478, 46.02127659574468, 47.020833333333336, 48.02040816326531, 49.02, 50.01960784313726, 51.01923076923077, 52.0188679245283, 53.01851851851852, 54.018181818181816, 55.017857142857146, 56.01754385964912, 57.01724137931034, 58.016949152542374, 59.016666666666666, 60.01639344262295, 61.016129032258064, 62.01587301587302, 63.015625, 64.01538461538462, 65.01515151515152, 66.01492537313433, 67.01470588235294, 68.01449275362319, 69.01428571428572, 70.01408450704226, 71.01388888888889, 72.01369863013699, 73.01351351351352, 74.01333333333334, 75.01315789473684, 76.01298701298701, 77.01282051282051, 78.0126582278481, 79.0125, 80.01234567901234, 81.01219512195122, 82.01204819277109, 83.01190476190476, 84.01176470588236, 85.01162790697674, 86.01149425287356, 87.01136363636364, 88.01123595505618, 89.0111111111111, 90.01098901098901, 91.01086956521739, 92.01075268817205, 93.01063829787235, 94.01052631578948, 95.01041666666667, 96.01030927835052, 97.01020408163265, 98.01010101010101, 99.01, 100.00990099009901, 101.00980392156863, 102.00970873786407, 103.00961538461539, 104.00952380952381, 105.00943396226415, 106.00934579439253, 107.00925925925925, 108.0091743119266, 109.00909090909092, 110.009009009009, 111.00892857142857, 112.00884955752213, 113.00877192982456, 114.00869565217391, 115.00862068965517, 116.00854700854701, 117.00847457627118, 118.00840336134453, 119.00833333333334] }
this.blocks[this.columns] has only one value
this.blocks[this.blockColumns] has only one value
this.blocks[this.blockColumns-1] has only one value
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumnDimension():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == return
this.blockRows == orig(this.blockRows)
this.blockRows == orig(size(this.blocks[]))
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return == orig(this.columns)
return one of { 1, 2 }
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getEntry(int, int):::ENTER
this.rows == this.columns
this.blockRows == this.blockColumns
this.rows == 2
this.blockRows == 1
row one of { 0, 1 }
column one of { 0, 1 }
this.blocks[] elements == this.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getEntry(int, int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == this.columns
this.rows == orig(this.rows)
this.rows == orig(this.columns)
this.blockRows == this.blockColumns
this.blockRows == orig(this.blockRows)
this.blockRows == orig(this.blockColumns)
this.blockRows == orig(size(this.blocks[]))
this.lu == orig(this.lu)
this.rows == 2
this.blockRows == 1
return one of { 1.4345049414113397E-303, 0.9999961516947906 }
this.blocks[] elements == this.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getRowDimension():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == return
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockRows == orig(size(this.blocks[]))
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return == orig(this.rows)
return one of { 2, 120 }
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.setEntry(int, int, double):::ENTER
this.rows == this.columns
this.blockRows == this.blockColumns
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 1
this.blocks[] elements has only one value
this.rows == 2
this.blockRows == 1
row one of { 0, 1 }
column one of { 0, 1 }
value == 1.0
this.blocks[] elements == this.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.setEntry(int, int, double):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == this.columns
this.rows == orig(this.rows)
this.rows == orig(this.columns)
this.blockRows == this.blockColumns
this.blockRows == orig(this.blockRows)
this.blockRows == orig(this.blockColumns)
this.blockRows == orig(size(this.blocks[]))
this.lu == orig(this.lu)
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 1
this.blocks[] elements has only one value
this.rows == 2
this.blockRows == 1
this.blocks[] elements == this.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.toBlocksLayout(double[][]):::ENTER
rawData.getClass().getName() == double[][].class
size(rawData[]) one of { 2, 120 }
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.toBlocksLayout(double[][]):::EXIT
rawData[] == orig(rawData[])
return.getClass().getName() == orig(rawData.getClass().getName())
return.getClass().getName() == double[][].class
size(return[]) one of { 1, 3 }
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::ENTER
m has only one value
m.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
column one of { 0, 1 }
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::EXIT
===========================================================================
org.apache.commons.math.special.Beta$1:::CLASS
===========================================================================
org.apache.commons.math.special.Beta$1:::OBJECT
this.val$b == 0.5
this.val$a == 59.0
===========================================================================
org.apache.commons.math.special.Beta$1.(double, double):::ENTER
$hidden$1 == 0.5
$hidden$3 == 59.0
===========================================================================
org.apache.commons.math.special.Beta$1.(double, double):::EXIT
this.val$b == orig($hidden$1)
this.val$a == orig($hidden$3)
===========================================================================
org.apache.commons.math.special.Beta$1.getA(int, double):::ENTER
n one of { 0, 1, 2 }
x == 7.696595609285595E-6
===========================================================================
org.apache.commons.math.special.Beta$1.getA(int, double):::EXIT
this.val$b == orig(this.val$b)
this.val$a == orig(this.val$a)
return == 1.0
===========================================================================
org.apache.commons.math.special.Beta$1.getB(int, double):::ENTER
n one of { 1, 2 }
x == 7.696595609285595E-6
===========================================================================
org.apache.commons.math.special.Beta$1.getB(int, double):::EXIT
this.val$b == orig(this.val$b)
this.val$a == orig(this.val$a)
return one of { -7.632457312541548E-6, -1.0514474876073217E-9 }
===========================================================================
org.apache.commons.math.special.Beta:::CLASS
===========================================================================
org.apache.commons.math.special.Beta.logBeta(double, double, double, int):::ENTER
org.apache.commons.math.special.Beta.DEFAULT_EPSILON == epsilon
a == 59.0
b == 0.5
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Beta.logBeta(double, double, double, int):::EXIT
return == -1.4642851603178428
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double):::ENTER
x == 7.696595609285595E-6
a == 59.0
b == 0.5
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double):::EXIT
return == 1.4345049414113397E-303
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int):::ENTER
org.apache.commons.math.special.Beta.DEFAULT_EPSILON == epsilon
x == 7.696595609285595E-6
a == 59.0
b == 0.5
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int):::EXIT
return == 1.4345049414113397E-303
===========================================================================
org.apache.commons.math.special.Gamma:::CLASS
org.apache.commons.math.special.Gamma.LANCZOS has only one value
org.apache.commons.math.special.Gamma.LANCZOS != null
org.apache.commons.math.special.Gamma.LANCZOS[] == [0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6]
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == 0.9189385332046727
size(org.apache.commons.math.special.Gamma.LANCZOS[]) == 15
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::ENTER
x one of { 0.5, 59.0, 59.5 }
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::EXIT
org.apache.commons.math.special.Gamma.LANCZOS == orig(org.apache.commons.math.special.Gamma.LANCZOS)
org.apache.commons.math.special.Gamma.LANCZOS[] == orig(org.apache.commons.math.special.Gamma.LANCZOS[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return one of { 0.5723649429247, 180.45629141754375, 182.4929415207863 }
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation:::OBJECT
this.correlationMatrix.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
this.nObs one of { 0, 120 }
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation():::EXIT
this.correlationMatrix == null
this.nObs == 0
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation(double[][]):::ENTER
data has only one value
data.getClass().getName() == double[][].class
data[] contains no nulls and has only one value, of length 120
size(data[]) == 120
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation(double[][]):::EXIT
this.nObs == orig(size(data[]))
data[] == orig(data[])
this.correlationMatrix has only one value
this.nObs == 120
data[] contains no nulls and has only one value, of length 120
data[this.nObs-1] has only one value
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation(org.apache.commons.math.linear.RealMatrix):::ENTER
matrix has only one value
matrix.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation(org.apache.commons.math.linear.RealMatrix):::EXIT
this.correlationMatrix.getClass().getName() == orig(matrix.getClass().getName())
this.correlationMatrix has only one value
this.nObs == 120
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.checkSufficientData(org.apache.commons.math.linear.RealMatrix):::ENTER
this has only one value
this.correlationMatrix == null
this.nObs == 0
matrix has only one value
matrix.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.checkSufficientData(org.apache.commons.math.linear.RealMatrix):::EXIT
this.correlationMatrix == orig(this.correlationMatrix)
this.nObs == orig(this.nObs)
this.correlationMatrix == null
this.nObs == 0
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.computeCorrelationMatrix(org.apache.commons.math.linear.RealMatrix):::ENTER
this has only one value
this.correlationMatrix == null
this.nObs == 120
matrix has only one value
matrix.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.computeCorrelationMatrix(org.apache.commons.math.linear.RealMatrix):::EXIT
this.correlationMatrix == orig(this.correlationMatrix)
this.nObs == orig(this.nObs)
this.correlationMatrix == null
this.nObs == 120
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.correlation(double[], double[]):::ENTER
this.nObs == size(xArray[])
this.nObs == size(yArray[])
this has only one value
this.correlationMatrix == null
this.nObs == 120
xArray has only one value
xArray[] == [1.0, 1.5, 2.3333333333333335, 3.25, 4.2, 5.166666666666667, 6.142857142857143, 7.125, 8.11111111111111, 9.1, 10.090909090909092, 11.083333333333334, 12.076923076923077, 13.071428571428571, 14.066666666666666, 15.0625, 16.058823529411764, 17.055555555555557, 18.05263157894737, 19.05, 20.047619047619047, 21.045454545454547, 22.043478260869566, 23.041666666666668, 24.04, 25.03846153846154, 26.037037037037038, 27.035714285714285, 28.03448275862069, 29.033333333333335, 30.032258064516128, 31.03125, 32.03030303030303, 33.029411764705884, 34.02857142857143, 35.02777777777778, 36.027027027027025, 37.026315789473685, 38.02564102564103, 39.025, 40.02439024390244, 41.023809523809526, 42.02325581395349, 43.02272727272727, 44.022222222222226, 45.02173913043478, 46.02127659574468, 47.020833333333336, 48.02040816326531, 49.02, 50.01960784313726, 51.01923076923077, 52.0188679245283, 53.01851851851852, 54.018181818181816, 55.017857142857146, 56.01754385964912, 57.01724137931034, 58.016949152542374, 59.016666666666666, 60.01639344262295, 61.016129032258064, 62.01587301587302, 63.015625, 64.01538461538462, 65.01515151515152, 66.01492537313433, 67.01470588235294, 68.01449275362319, 69.01428571428572, 70.01408450704226, 71.01388888888889, 72.01369863013699, 73.01351351351352, 74.01333333333334, 75.01315789473684, 76.01298701298701, 77.01282051282051, 78.0126582278481, 79.0125, 80.01234567901234, 81.01219512195122, 82.01204819277109, 83.01190476190476, 84.01176470588236, 85.01162790697674, 86.01149425287356, 87.01136363636364, 88.01123595505618, 89.0111111111111, 90.01098901098901, 91.01086956521739, 92.01075268817205, 93.01063829787235, 94.01052631578948, 95.01041666666667, 96.01030927835052, 97.01020408163265, 98.01010101010101, 99.01, 100.00990099009901, 101.00980392156863, 102.00970873786407, 103.00961538461539, 104.00952380952381, 105.00943396226415, 106.00934579439253, 107.00925925925925, 108.0091743119266, 109.00909090909092, 110.009009009009, 111.00892857142857, 112.00884955752213, 113.00877192982456, 114.00869565217391, 115.00862068965517, 116.00854700854701, 117.00847457627118, 118.00840336134453, 119.00833333333334]
yArray has only one value
yArray[] == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0]
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.correlation(double[], double[]):::EXIT
this.correlationMatrix == orig(this.correlationMatrix)
this.nObs == orig(this.nObs)
this.nObs == orig(size(xArray[]))
this.nObs == orig(size(yArray[]))
xArray[] == orig(xArray[])
yArray[] == orig(yArray[])
this.correlationMatrix == null
this.nObs == 120
xArray[] == [1.0, 1.5, 2.3333333333333335, 3.25, 4.2, 5.166666666666667, 6.142857142857143, 7.125, 8.11111111111111, 9.1, 10.090909090909092, 11.083333333333334, 12.076923076923077, 13.071428571428571, 14.066666666666666, 15.0625, 16.058823529411764, 17.055555555555557, 18.05263157894737, 19.05, 20.047619047619047, 21.045454545454547, 22.043478260869566, 23.041666666666668, 24.04, 25.03846153846154, 26.037037037037038, 27.035714285714285, 28.03448275862069, 29.033333333333335, 30.032258064516128, 31.03125, 32.03030303030303, 33.029411764705884, 34.02857142857143, 35.02777777777778, 36.027027027027025, 37.026315789473685, 38.02564102564103, 39.025, 40.02439024390244, 41.023809523809526, 42.02325581395349, 43.02272727272727, 44.022222222222226, 45.02173913043478, 46.02127659574468, 47.020833333333336, 48.02040816326531, 49.02, 50.01960784313726, 51.01923076923077, 52.0188679245283, 53.01851851851852, 54.018181818181816, 55.017857142857146, 56.01754385964912, 57.01724137931034, 58.016949152542374, 59.016666666666666, 60.01639344262295, 61.016129032258064, 62.01587301587302, 63.015625, 64.01538461538462, 65.01515151515152, 66.01492537313433, 67.01470588235294, 68.01449275362319, 69.01428571428572, 70.01408450704226, 71.01388888888889, 72.01369863013699, 73.01351351351352, 74.01333333333334, 75.01315789473684, 76.01298701298701, 77.01282051282051, 78.0126582278481, 79.0125, 80.01234567901234, 81.01219512195122, 82.01204819277109, 83.01190476190476, 84.01176470588236, 85.01162790697674, 86.01149425287356, 87.01136363636364, 88.01123595505618, 89.0111111111111, 90.01098901098901, 91.01086956521739, 92.01075268817205, 93.01063829787235, 94.01052631578948, 95.01041666666667, 96.01030927835052, 97.01020408163265, 98.01010101010101, 99.01, 100.00990099009901, 101.00980392156863, 102.00970873786407, 103.00961538461539, 104.00952380952381, 105.00943396226415, 106.00934579439253, 107.00925925925925, 108.0091743119266, 109.00909090909092, 110.009009009009, 111.00892857142857, 112.00884955752213, 113.00877192982456, 114.00869565217391, 115.00862068965517, 116.00854700854701, 117.00847457627118, 118.00840336134453, 119.00833333333334]
yArray[] == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0]
return == 0.9999961516947906
return in xArray[]
return in yArray[]
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.getCorrelationPValues():::ENTER
this has only one value
this.correlationMatrix has only one value
this.nObs == 120
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.getCorrelationPValues():::EXIT
this.correlationMatrix == orig(this.correlationMatrix)
this.correlationMatrix.getClass().getName() == return.getClass().getName()
this.nObs == orig(this.nObs)
return.getClass().getName() == orig(this.correlationMatrix.getClass().getName())
this.correlationMatrix has only one value
this.nObs == 120
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests:::OBJECT
this.longleyData[] == [60323.0, 83.0, 234289.0, 2356.0, 1590.0, 107608.0, 1947.0, 61122.0, 88.5, 259426.0, 2325.0, 1456.0, 108632.0, 1948.0, 60171.0, 88.2, 258054.0, 3682.0, 1616.0, 109773.0, 1949.0, 61187.0, 89.5, 284599.0, 3351.0, 1650.0, 110929.0, 1950.0, 63221.0, 96.2, 328975.0, 2099.0, 3099.0, 112075.0, 1951.0, 63639.0, 98.1, 346999.0, 1932.0, 3594.0, 113270.0, 1952.0, 64989.0, 99.0, 365385.0, 1870.0, 3547.0, 115094.0, 1953.0, 63761.0, 100.0, 363112.0, 3578.0, 3350.0, 116219.0, 1954.0, 66019.0, 101.2, 397469.0, 2904.0, 3048.0, 117388.0, 1955.0, 67857.0, 104.6, 419180.0, 2822.0, 2857.0, 118734.0, 1956.0, 68169.0, 108.4, 442769.0, 2936.0, 2798.0, 120445.0, 1957.0, 66513.0, 110.8, 444546.0, 4681.0, 2637.0, 121950.0, 1958.0, 68655.0, 112.6, 482704.0, 3813.0, 2552.0, 123366.0, 1959.0, 69564.0, 114.2, 502601.0, 3931.0, 2514.0, 125368.0, 1960.0, 69331.0, 115.7, 518173.0, 4806.0, 2572.0, 127852.0, 1961.0, 70551.0, 116.9, 554894.0, 4007.0, 2827.0, 130081.0, 1962.0]
this.swissData[] == [80.2, 17.0, 15.0, 12.0, 9.96, 83.1, 45.1, 6.0, 9.0, 84.84, 92.5, 39.7, 5.0, 5.0, 93.4, 85.8, 36.5, 12.0, 7.0, 33.77, 76.9, 43.5, 17.0, 15.0, 5.16, 76.1, 35.3, 9.0, 7.0, 90.57, 83.8, 70.2, 16.0, 7.0, 92.85, 92.4, 67.8, 14.0, 8.0, 97.16, 82.4, 53.3, 12.0, 7.0, 97.67, 82.9, 45.2, 16.0, 13.0, 91.38, 87.1, 64.5, 14.0, 6.0, 98.61, 64.1, 62.0, 21.0, 12.0, 8.52, 66.9, 67.5, 14.0, 7.0, 2.27, 68.9, 60.7, 19.0, 12.0, 4.43, 61.7, 69.3, 22.0, 5.0, 2.82, 68.3, 72.6, 18.0, 2.0, 24.2, 71.7, 34.0, 17.0, 8.0, 3.3, 55.7, 19.4, 26.0, 28.0, 12.11, 54.3, 15.2, 31.0, 20.0, 2.15, 65.1, 73.0, 19.0, 9.0, 2.84, 65.5, 59.8, 22.0, 10.0, 5.23, 65.0, 55.1, 14.0, 3.0, 4.52, 56.6, 50.9, 22.0, 12.0, 15.14, 57.4, 54.1, 20.0, 6.0, 4.2, 72.5, 71.2, 12.0, 1.0, 2.4, 74.2, 58.1, 14.0, 8.0, 5.23, 72.0, 63.5, 6.0, 3.0, 2.56, 60.5, 60.8, 16.0, 10.0, 7.72, 58.3, 26.8, 25.0, 19.0, 18.46, 65.4, 49.5, 15.0, 8.0, 6.1, 75.5, 85.9, 3.0, 2.0, 99.71, 69.3, 84.9, 7.0, 6.0, 99.68, 77.3, 89.7, 5.0, 2.0, 100.0, 70.5, 78.2, 12.0, 6.0, 98.96, 79.4, 64.9, 7.0, 3.0, 98.22, 65.0, 75.9, 9.0, 9.0, 99.06, 92.2, 84.6, 3.0, 3.0, 99.46, 79.3, 63.1, 13.0, 13.0, 96.83, 70.4, 38.4, 26.0, 12.0, 5.62, 65.7, 7.7, 29.0, 11.0, 13.79, 72.7, 16.7, 22.0, 13.0, 11.22, 64.4, 17.6, 35.0, 32.0, 16.92, 77.6, 37.6, 15.0, 7.0, 4.97, 67.6, 18.7, 25.0, 7.0, 8.65, 35.0, 1.2, 37.0, 53.0, 42.34, 44.7, 46.6, 16.0, 29.0, 50.43, 42.8, 27.7, 22.0, 29.0, 58.33]
this.swissData[] elements >= 1.0
this.fName.toString one of { "testInsufficientData", "testPValueNearZero" }
size(this.longleyData[]) == 112
size(this.swissData[]) == 235
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.PearsonsCorrelationTestFailingTests():::EXIT
this.fName == null
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.testInsufficientData():::ENTER
this has only one value
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testInsufficientData"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.testInsufficientData():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testInsufficientData"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.testPValueNearZero():::ENTER
this has only one value
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testPValueNearZero"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.testPValueNearZero():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testPValueNearZero"
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression:::CLASS
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
this.sumX >= 0.0
this.sumXX >= 0.0
this.sumY >= 0.0
this.sumYY >= 0.0
this.sumXY >= 0.0
this.n >= 0
org.apache.commons.math.stat.regression.SimpleRegression.serialVersionUID < this.n
this.sumX >= this.sumY
this.sumX >= this.xbar
this.sumX >= this.ybar
this.sumXX <= this.sumYY
this.sumXX <= this.sumXY
this.sumY >= this.ybar
this.sumYY >= this.sumXY
this.sumYY >= this.ybar
this.xbar >= this.ybar
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression():::EXIT
this.sumX == this.sumXX
this.sumX == this.sumY
this.sumX == this.sumYY
this.sumX == this.sumXY
this.sumX == this.xbar
this.sumX == this.ybar
this.sumX == 0.0
this.n == 0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(org.apache.commons.math.distribution.TDistribution):::ENTER
t.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(org.apache.commons.math.distribution.TDistribution):::EXIT
this.distribution == orig(t)
this.distribution.getClass().getName() == orig(t.getClass().getName())
this.sumX == this.sumXX
this.sumX == this.sumY
this.sumX == this.sumYY
this.sumX == this.sumXY
this.sumX == this.xbar
this.sumX == this.ybar
this.sumX == 0.0
this.n == 0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double, double):::ENTER
this has only one value
this.distribution has only one value
this.distribution != null
this.sumX != x
this.sumX >= y
this.sumXX != x
this.sumY != x
this.sumYY != x
this.sumXY != x
this.xbar < x
this.xbar <= y
this.ybar < x
this.ybar <= y
x >= y
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double, double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.distribution has only one value
this.distribution != null
this.sumX != this.sumXX
this.sumX > this.sumY
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > this.ybar
this.sumX > orig(this.sumX)
this.sumX != orig(this.sumXX)
this.sumX > orig(this.sumY)
this.sumX != orig(this.sumYY)
this.sumX != orig(this.sumXY)
this.sumX > orig(this.xbar)
this.sumX > orig(this.ybar)
this.sumX >= orig(x)
this.sumX > orig(y)
this.sumXX != this.xbar
this.sumXX >= orig(this.sumXX)
this.sumXX >= orig(this.sumYY)
this.sumXX >= orig(this.sumXY)
this.sumXX >= orig(this.ybar)
this.sumXX != orig(x)
this.sumY != this.xbar
this.sumY >= orig(this.sumX)
this.sumY >= orig(this.sumY)
this.sumY >= orig(this.xbar)
this.sumY >= orig(this.ybar)
this.sumY != orig(x)
this.sumY >= orig(y)
this.sumYY != this.xbar
this.sumYY >= orig(this.sumXX)
this.sumYY >= orig(this.sumY)
this.sumYY >= orig(this.sumYY)
this.sumYY >= orig(this.sumXY)
this.sumYY >= orig(this.ybar)
this.sumYY != orig(x)
this.sumXY != this.xbar
this.sumXY >= orig(this.sumXX)
this.sumXY >= orig(this.sumY)
this.sumXY >= orig(this.sumYY)
this.sumXY >= orig(this.sumXY)
this.sumXY >= orig(this.ybar)
this.sumXY != orig(x)
this.n - orig(this.n) - 1 == 0
this.xbar > this.ybar
this.xbar != orig(this.sumX)
this.xbar != orig(this.sumXX)
this.xbar != orig(this.sumY)
this.xbar != orig(this.sumYY)
this.xbar != orig(this.sumXY)
this.xbar > orig(this.xbar)
this.xbar > orig(this.ybar)
this.xbar <= orig(x)
this.xbar != orig(y)
this.ybar <= orig(this.sumX)
this.ybar >= orig(this.ybar)
this.ybar < orig(x)
2 * this.ybar - orig(y) == 0
this.ybar <= orig(y)
this.sumY - 2 * this.sumYY + 2 * orig(this.sumYY) == 0
this.sumY - 2 * this.ybar - orig(this.sumY) == 0
this.sumY - orig(this.sumY) - orig(y) == 0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getR():::ENTER
this has only one value
this.distribution has only one value
this.sumX == 7145.368868287349
this.sumXX == 143581.76336636717
this.sumY == 7140.0
this.sumYY == 143990.0
this.sumXY == 143785.1834686151
this.n == 120
this.xbar == 59.54474056906127
this.ybar == 59.5
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getR():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.distribution has only one value
this.sumX == 7145.368868287349
this.sumXX == 143581.76336636717
this.sumY == 7140.0
this.sumYY == 143990.0
this.sumXY == 143785.1834686151
this.n == 120
this.xbar == 59.54474056906127
this.ybar == 59.5
return == 0.9999961516947906
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getRSquare():::ENTER
this has only one value
this.distribution has only one value
this.sumX == 7145.368868287349
this.sumXX == 143581.76336636717
this.sumY == 7140.0
this.sumYY == 143990.0
this.sumXY == 143785.1834686151
this.n == 120
this.xbar == 59.54474056906127
this.ybar == 59.5
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getRSquare():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.distribution has only one value
this.sumX == 7145.368868287349
this.sumXX == 143581.76336636717
this.sumY == 7140.0
this.sumYY == 143990.0
this.sumXY == 143785.1834686151
this.n == 120
this.xbar == 59.54474056906127
this.ybar == 59.5
return == 0.9999923034043907
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::ENTER
this has only one value
this.distribution has only one value
this.sumX == 7145.368868287349
this.sumXX == 143581.76336636717
this.sumY == 7140.0
this.sumYY == 143990.0
this.sumXY == 143785.1834686151
this.n == 120
this.xbar == 59.54474056906127
this.ybar == 59.5
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::EXIT304
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.distribution has only one value
this.sumX == 7145.368868287349
this.sumXX == 143581.76336636717
this.sumY == 7140.0
this.sumYY == 143990.0
this.sumXY == 143785.1834686151
this.n == 120
this.xbar == 59.54474056906127
this.ybar == 59.5
return == 1.0014167544504164
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors():::ENTER
this has only one value
this.distribution has only one value
this.sumX == 7145.368868287349
this.sumXX == 143581.76336636717
this.sumY == 7140.0
this.sumYY == 143990.0
this.sumXY == 143785.1834686151
this.n == 120
this.xbar == 59.54474056906127
this.ybar == 59.5
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.distribution has only one value
this.sumX == 7145.368868287349
this.sumXX == 143581.76336636717
this.sumY == 7140.0
this.sumYY == 143990.0
this.sumXY == 143785.1834686151
this.n == 120
this.xbar == 59.54474056906127
this.ybar == 59.5
return == 1.1082328017801046
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares():::ENTER
this has only one value
this.distribution has only one value
this.sumX == 7145.368868287349
this.sumXX == 143581.76336636717
this.sumY == 7140.0
this.sumYY == 143990.0
this.sumXY == 143785.1834686151
this.n == 120
this.xbar == 59.54474056906127
this.ybar == 59.5
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares():::EXIT354
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == return
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
return == orig(this.sumYY)
this.distribution has only one value
this.sumX == 7145.368868287349
this.sumXX == 143581.76336636717
this.sumY == 7140.0
this.sumXY == 143785.1834686151
this.n == 120
this.xbar == 59.54474056906127
this.ybar == 59.5
return == 143990.0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(org.apache.commons.math.distribution.TDistribution):::ENTER
this.sumX == this.sumXX
this.sumX == this.sumY
this.sumX == this.sumYY
this.sumX == this.sumXY
this.sumX == this.xbar
this.sumX == this.ybar
this.distribution == null
this.sumX == 0.0
this.n == 0
value.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(org.apache.commons.math.distribution.TDistribution):::EXIT
this.distribution == orig(value)
this.distribution.getClass().getName() == orig(value.getClass().getName())
this.sumX == this.sumXX
this.sumX == this.sumY
this.sumX == this.sumYY
this.sumX == this.sumXY
this.sumX == this.xbar
this.sumX == this.ybar
this.sumX == orig(this.sumX)
this.sumX == orig(this.sumXX)
this.sumX == orig(this.sumY)
this.sumX == orig(this.sumYY)
this.sumX == orig(this.sumXY)
this.sumX == orig(this.xbar)
this.sumX == orig(this.ybar)
this.n == orig(this.n)
this.sumX == 0.0
this.n == 0
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::CLASS
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::OBJECT
this.getClass().getName() == org.apache.commons.math.special.Beta$1.class
===========================================================================
org.apache.commons.math.util.ContinuedFraction.ContinuedFraction():::EXIT
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::ENTER
x == 7.696595609285595E-6
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::EXIT
return == 0.9999923675426795
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String):::ENTER
className has only one value
className.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String):::EXIT
className.toString == orig(className.toString)
className.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
return has only one value
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String, java.lang.Class):::ENTER
className has only one value
className.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
callingClass has only one value
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String, java.lang.Class):::EXIT
className.toString == orig(className.toString)
className.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
return has only one value
===========================================================================
org.junit.internal.MethodSorter$1:::OBJECT
this has only one value
===========================================================================
org.junit.internal.MethodSorter$1.():::EXIT
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::ENTER
m1 != null
m2 != null
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT19
return one of { -1, 1 }
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT21
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT
===========================================================================
org.junit.internal.MethodSorter$2:::OBJECT
this has only one value
===========================================================================
org.junit.internal.MethodSorter$2.():::EXIT
===========================================================================
org.junit.internal.MethodSorter$2.compare(java.lang.reflect.Method, java.lang.reflect.Method):::ENTER
m1 != null
m2 != null
===========================================================================
org.junit.internal.MethodSorter$2.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT34
===========================================================================
org.junit.internal.MethodSorter$2.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT
===========================================================================
org.junit.internal.MethodSorter:::CLASS
org.junit.internal.MethodSorter.DEFAULT has only one value
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == org.junit.internal.MethodSorter$1.class
org.junit.internal.MethodSorter.NAME_ASCENDING has only one value
org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName() == org.junit.internal.MethodSorter$2.class
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() != org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName()
===========================================================================
org.junit.internal.MethodSorter.getDeclaredMethods(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.MethodSorter.getDeclaredMethods(java.lang.Class):::EXIT
org.junit.internal.MethodSorter.DEFAULT == orig(org.junit.internal.MethodSorter.DEFAULT)
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == orig(org.junit.internal.MethodSorter.DEFAULT.getClass().getName())
org.junit.internal.MethodSorter.NAME_ASCENDING == orig(org.junit.internal.MethodSorter.NAME_ASCENDING)
org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName() == orig(org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName())
return.getClass().getName() == java.lang.reflect.Method[].class
size(return[]) one of { 5, 49 }
===========================================================================
org.junit.internal.MethodSorter.getSorter(org.junit.FixMethodOrder):::ENTER
fixMethodOrder == null
===========================================================================
org.junit.internal.MethodSorter.getSorter(org.junit.FixMethodOrder):::EXIT68
===========================================================================
org.junit.internal.MethodSorter.getSorter(org.junit.FixMethodOrder):::EXIT
org.junit.internal.MethodSorter.DEFAULT == return
org.junit.internal.MethodSorter.DEFAULT == orig(org.junit.internal.MethodSorter.DEFAULT)
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == return.getClass().getName()
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == orig(org.junit.internal.MethodSorter.DEFAULT.getClass().getName())
org.junit.internal.MethodSorter.NAME_ASCENDING == orig(org.junit.internal.MethodSorter.NAME_ASCENDING)
org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName() == orig(org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName())
===========================================================================
org.junit.internal.RealSystem:::OBJECT
this has only one value
===========================================================================
org.junit.internal.RealSystem.RealSystem():::EXIT
===========================================================================
org.junit.internal.RealSystem.out():::ENTER
===========================================================================
org.junit.internal.RealSystem.out():::EXIT
return has only one value
===========================================================================
org.junit.internal.TextListener:::OBJECT
this has only one value
this.writer has only one value
this.writer != null
===========================================================================
org.junit.internal.TextListener.TextListener(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
org.junit.internal.TextListener.TextListener(java.io.PrintStream):::EXIT
this.writer == orig(writer)
===========================================================================
org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem):::ENTER
system has only one value
system.getClass().getName() == org.junit.internal.RealSystem.class
===========================================================================
org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem):::EXIT
===========================================================================
org.junit.internal.TextListener.elapsedTimeAsString(long):::ENTER
runTime == 256
===========================================================================
org.junit.internal.TextListener.elapsedTimeAsString(long):::EXIT
this.writer == orig(this.writer)
return has only one value
return.toString == "0.256"
===========================================================================
org.junit.internal.TextListener.getWriter():::ENTER
===========================================================================
org.junit.internal.TextListener.getWriter():::EXIT
this.writer == return
return == orig(this.writer)
return has only one value
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::EXIT62
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.printFooter(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.printFooter(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.printHeader(long):::ENTER
runTime == 256
===========================================================================
org.junit.internal.TextListener.printHeader(long):::EXIT
this.writer == orig(this.writer)
===========================================================================
org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.internal.TextListener.testStarted(org.junit.runner.Description):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder:::OBJECT
this has only one value
this.canUseSuiteMethod == true
this.parents has only one value
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder():::EXIT
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == return.suiteBuilder.parents
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
return.suiteBuilder has only one value
return.suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT39
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT63
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.builders.SuiteMethodBuilder.class
return.parents has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::CLASS
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::OBJECT
this.suiteBuilder.parents.getClass().getName() == this.parents.getClass().getName()
this has only one value
this.suiteBuilder has only one value
this.suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.suiteBuilder.parents has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::ENTER
suiteBuilder has only one value
suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::EXIT
this.suiteBuilder == orig(suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(suiteBuilder.getClass().getName())
this.suiteBuilder.parents == suiteBuilder.parents
this.parents.getClass().getName() == suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == orig(suiteBuilder.parents.getClass().getName())
suiteBuilder.parents == orig(suiteBuilder.parents)
suiteBuilder.parents has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::ENTER
currentTestClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::EXIT97
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.suiteBuilder == orig(this.suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(this.suiteBuilder.getClass().getName())
this.suiteBuilder.parents == orig(this.suiteBuilder.parents)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.suiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT90
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.suiteBuilder == orig(this.suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(this.suiteBuilder.getClass().getName())
this.suiteBuilder.parents == orig(this.suiteBuilder.parents)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.suiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.IgnoredBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder():::EXIT
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT13
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.JUnit3Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit3Builder.JUnit3Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == true
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT;condition="return == true"
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT11
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.internal.builders.JUnit4Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit4Builder.JUnit4Builder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT20
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT20;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == false
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::ENTER
each has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT13
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener:::OBJECT
this has only one value
this.notifier has only one value
this.notifier != null
this.notifier.listeners has only one value
this.notifier.listeners != null
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[] elements != null
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
size(this.notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.OldTestClassAdaptingListener(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.OldTestClassAdaptingListener(org.junit.runner.notification.RunNotifier):::EXIT
this.notifier == orig(notifier)
this.notifier.listeners == notifier.listeners
this.notifier.listeners[] == notifier.listeners[]
this.notifier.listeners.getClass().getName() == notifier.listeners.getClass().getName()
this.notifier.pleaseStop == notifier.pleaseStop
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test):::EXIT55
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.notifier.listeners[])-1
org.junit.runner.Description.serialVersionUID == orig(size(this.notifier.listeners[]))-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
return.fTestClass has only one value
this.notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
return has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test):::EXIT64
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
return.toString one of { "testInsufficientData", "testPValueNearZero" }
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner:::OBJECT
this has only one value
this.test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class):::ENTER
klass has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class):::EXIT
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test):::EXIT
this.test == orig(test)
this.test.getClass().getName() == orig(test.getClass().getName())
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier):::ENTER
this.test has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier):::EXIT
this.test == orig(this.test)
this.test.getClass().getName() == orig(this.test.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
this.test has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getAnnotations(junit.framework.TestCase):::ENTER
test.getClass().getName() == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
test.fName.toString one of { "testInsufficientData", "testPValueNearZero" }
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getAnnotations(junit.framework.TestCase):::EXIT136
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getAnnotations(junit.framework.TestCase):::EXIT
test.fName == orig(test.fName)
test.fName.toString == orig(test.fName.toString)
test.fName.toString one of { "testInsufficientData", "testPValueNearZero" }
return has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getDescription():::ENTER
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getDescription():::EXIT
this.test == orig(this.test)
this.test.getClass().getName() == orig(this.test.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
this.test has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
return.fUniqueId has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getTest():::ENTER
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getTest():::EXIT
this.test == return
this.test.getClass().getName() == return.getClass().getName()
return == orig(this.test)
return.getClass().getName() == orig(this.test.getClass().getName())
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::ENTER
test != null
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::EXIT105
return.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
return.fAnnotations has only one value
return.fTestClass has only one value
orig(test.getClass().getName()) == org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::EXIT116
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
return.fUniqueId has only one value
orig(test) has only one value
orig(test.getClass().getName()) == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::EXIT
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
return != null
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
return.fChildren != null
return.fDisplayName != null
return.fDisplayName.toString one of { "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests", "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
return.fUniqueId != null
return.fAnnotations != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
this.test has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
this.test == orig(this.test)
this.test.getClass().getName() == orig(this.test.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
this.test has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test):::ENTER
this.test == null
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test):::EXIT
this.test == orig(test)
this.test.getClass().getName() == orig(test.getClass().getName())
this.test has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier:::OBJECT
org.junit.runner.Description.serialVersionUID == size(this.notifier.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.description.fTestClass
this has only one value
this.notifier has only one value
this.notifier.listeners has only one value
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
this.description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.description.fChildren has only one value
this.description.fDisplayName has only one value
this.description.fDisplayName.toString == "classes"
this.description.fUniqueId has only one value
this.description.fAnnotations has only one value
size(this.notifier.listeners[]) == 2
this.notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(notifier.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(notifier.listeners[]) == 2
notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.notifier == orig(notifier)
this.notifier.listeners == notifier.listeners
this.notifier.listeners[] == notifier.listeners[]
this.notifier.listeners.getClass().getName() == notifier.listeners.getClass().getName()
this.notifier.pleaseStop == notifier.pleaseStop
this.description == orig(description)
org.junit.runner.Description.serialVersionUID == size(notifier.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == description.fChildren
this.description.fDisplayName == description.fDisplayName
this.description.fDisplayName.toString == description.fDisplayName.toString
this.description.fUniqueId == description.fUniqueId
this.description.fAnnotations == description.fAnnotations
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(notifier.listeners[]) == 2
notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteFinished():::ENTER
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteFinished():::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.description == orig(this.description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == orig(this.description.fChildren)
this.description.fDisplayName == orig(this.description.fDisplayName)
this.description.fDisplayName.toString == orig(this.description.fDisplayName.toString)
this.description.fUniqueId == orig(this.description.fUniqueId)
this.description.fAnnotations == orig(this.description.fAnnotations)
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteStarted():::ENTER
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteStarted():::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.description == orig(this.description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == orig(this.description.fChildren)
this.description.fDisplayName == orig(this.description.fDisplayName)
this.description.fDisplayName.toString == orig(this.description.fDisplayName.toString)
this.description.fUniqueId == orig(this.description.fUniqueId)
this.description.fAnnotations == orig(this.description.fAnnotations)
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder:::OBJECT
this.annotation != null
this.validators != null
this.validators[] elements != null
this.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.Builder(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.Builder(java.lang.Class):::EXIT
this.annotation == orig(annotation)
this.methods == false
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.build():::ENTER
size(this.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.build():::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.methods == orig(this.methods)
this.validators == return.validatorStrategies
this.validators == orig(this.validators)
this.validators[] == return.validatorStrategies[]
this.validators[] == orig(this.validators[])
this.validators.getClass().getName() == return.validatorStrategies.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
size(this.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.forMethods():::ENTER
this.methods == false
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.forMethods():::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.validators == return.validators
this.validators == orig(this.validators)
this.validators[] == return.validators[]
this.validators[] == orig(this.validators[])
this.validators.getClass().getName() == return.validators.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
return == orig(this)
this.methods == true
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.withValidator(org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator):::ENTER
validator != null
this.validators.getClass().getName() != validator.getClass().getName()
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.withValidator(org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator):::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.methods == orig(this.methods)
this.validators == return.validators
this.validators == orig(this.validators)
this.validators[] == return.validators[]
this.validators.getClass().getName() == return.validators.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
return == orig(this)
size(this.validators[])-1 == orig(size(this.validators[]))
return != null
size(this.validators[]) >= 1
orig(validator) in this.validators[]
this.validators.getClass().getName() != orig(validator.getClass().getName())
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$DeclaringClassMustBePublic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$DeclaringClassMustBePublic.DeclaringClassMustBePublic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeARule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeARule.FieldMustBeARule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeATestRule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeATestRule.FieldMustBeATestRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule.MemberMustBeNonStaticOrAlsoClassRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBePublic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBePublic.MemberMustBePublic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeStatic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeStatic.MemberMustBeStatic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeARule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeARule.MethodMustBeARule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeATestRule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeATestRule.MethodMustBeATestRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator:::CLASS
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.methods
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.methods
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[])-1 == size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[])
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == false
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 4
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule]
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == java.util.ArrayList.class
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 3
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeNonStaticOrAlsoClassRule, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeARule]
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == true
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 4
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule]
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 3
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeNonStaticOrAlsoClassRule, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeARule]
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == 4
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator:::OBJECT
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == this.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == this.validatorStrategies.getClass().getName()
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == size(this.validatorStrategies[])
this.validatorStrategies.getClass().getName() == java.util.ArrayList.class
size(this.validatorStrategies[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.RuleMemberValidator(org.junit.internal.runners.rules.RuleMemberValidator$Builder):::ENTER
builder.validators.getClass().getName() == java.util.ArrayList.class
size(builder.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.RuleMemberValidator(org.junit.internal.runners.rules.RuleMemberValidator$Builder):::EXIT
this.annotation == builder.annotation
this.annotation == orig(builder.annotation)
this.methods == builder.methods
this.methods == orig(builder.methods)
this.validatorStrategies == builder.validators
this.validatorStrategies == orig(builder.validators)
this.validatorStrategies[] == builder.validators[]
this.validatorStrategies[] == orig(builder.validators[])
this.validatorStrategies.getClass().getName() == builder.validators.getClass().getName()
this.validatorStrategies.getClass().getName() == orig(builder.validators.getClass().getName())
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.classRuleValidatorBuilder():::EXIT
return.annotation has only one value
return.methods == false
return.validators[] == []
return.validators[].getClass().getName() == []
return.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.testRuleValidatorBuilder():::EXIT
return.annotation has only one value
return.methods == false
return.validators[] == []
return.validators[].getClass().getName() == []
return.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.validate(org.junit.runners.model.TestClass, java.util.List):::ENTER
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == errors.getClass().getName()
target.methodsForAnnotations.getClass().getName() == target.fieldsForAnnotations.getClass().getName()
this.validatorStrategies[].getClass().getName() one of { [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule], [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule] }
target has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
target.clazz == null
target.methodsForAnnotations has only one value
target.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
target.fieldsForAnnotations has only one value
errors has only one value
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.validate(org.junit.runners.model.TestClass, java.util.List):::EXIT
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(this.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(this.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(errors.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[])
this.methods == orig(this.methods)
this.validatorStrategies == orig(this.validatorStrategies)
this.validatorStrategies[] == orig(this.validatorStrategies[])
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
target.clazz == orig(target.clazz)
target.methodsForAnnotations == orig(target.methodsForAnnotations)
target.methodsForAnnotations.getClass().getName() == target.fieldsForAnnotations.getClass().getName()
target.methodsForAnnotations.getClass().getName() == orig(target.methodsForAnnotations.getClass().getName())
target.methodsForAnnotations.getClass().getName() == orig(target.fieldsForAnnotations.getClass().getName())
target.fieldsForAnnotations == orig(target.fieldsForAnnotations)
errors[] == orig(errors[])
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == orig(size(this.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]))-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[]))-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(this.validatorStrategies[]))-1
this.validatorStrategies[].getClass().getName() one of { [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule], [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule] }
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
target.clazz == null
target.methodsForAnnotations has only one value
target.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
target.fieldsForAnnotations has only one value
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runner.Computer$1:::OBJECT
this.val$builder.parents.getClass().getName() == this.parents.getClass().getName()
this has only one value
this.val$builder has only one value
this.val$builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.val$builder.parents has only one value
org.junit.runner.Computer.this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::ENTER
org.junit.runner.Computer.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
$hidden$2.parents has only one value
$hidden$2.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::EXIT
this.val$builder == orig($hidden$2)
this.val$builder.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$builder.parents == $hidden$2.parents
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents.getClass().getName() == $hidden$2.parents.getClass().getName()
this.parents.getClass().getName() == orig($hidden$2.parents.getClass().getName())
$hidden$2.parents == orig($hidden$2.parents)
$hidden$2.parents has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::EXIT
this.val$builder == orig(this.val$builder)
this.val$builder.getClass().getName() == orig(this.val$builder.getClass().getName())
this.val$builder.parents == orig(this.val$builder.parents)
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.val$builder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.runner.Computer$2:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runner.Computer$2:::OBJECT
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName()
this.runners.getClass().getName() == this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(this.runners[]) == size(org.junit.runners.ParentRunner.VALIDATORS[])
this has only one value
org.junit.runner.Computer.this has only one value
this.runners has only one value
this.runners[] contains no nulls and has only one value, of length 1
this.runners[] elements has only one value
this.runners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
this.runners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
this.runners.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.childrenLock has only one value
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.runners[] == this.filteredChildren[] (elementwise)
this.runners[] is the reverse of this.filteredChildren[]
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName() (elementwise)
===========================================================================
org.junit.runner.Computer$2.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
org.junit.runner.Computer.this has only one value
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer$2.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(classes[]))
this.filteredChildren == null
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
===========================================================================
org.junit.runner.Computer$2.getName():::ENTER
===========================================================================
org.junit.runner.Computer$2.getName():::EXIT
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.runners == orig(this.runners)
this.runners[] == orig(this.runners[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
return has only one value
return.toString == "classes"
===========================================================================
org.junit.runner.Computer:::OBJECT
this has only one value
===========================================================================
org.junit.runner.Computer.Computer():::EXIT
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
testClass has only one value
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Description:::CLASS
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description:::OBJECT
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == this.fAnnotations[].getClass().getName()
this.fChildren != null
this.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
this.fDisplayName != null
this.fUniqueId != null
this.fUniqueId.getClass().getName() == java.lang.String.class
this.fAnnotations != null
this.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fAnnotations[] == []
this.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of this.fAnnotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDisplayName.toString
this.fChildren.getClass().getName() != this.fUniqueId.getClass().getName()
this.fChildren.getClass().getName() != this.fAnnotations.getClass().getName()
this.fUniqueId.getClass().getName() != this.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.io.Serializable, java.lang.annotation.Annotation[]):::ENTER
displayName != null
uniqueId != null
uniqueId.getClass().getName() == java.lang.String.class
annotations != null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] == []
uniqueId.getClass().getName() != annotations.getClass().getName()
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.io.Serializable, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
this.fDisplayName == orig(displayName)
this.fDisplayName.toString == displayName.toString
this.fUniqueId == orig(uniqueId)
this.fUniqueId.getClass().getName() == orig(uniqueId.getClass().getName())
this.fAnnotations == orig(annotations)
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
this.fAnnotations[] == annotations[]
this.fTestClass == orig(testClass)
displayName.toString == orig(displayName.toString)
annotations[] == orig(annotations[])
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString < displayName.toString
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of annotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < displayName.toString
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
displayName != null
annotations != null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] == []
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
this.fDisplayName == orig(displayName)
this.fDisplayName.toString == displayName.toString
this.fAnnotations == orig(annotations)
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
this.fAnnotations[] == annotations[]
this.fTestClass == orig(clazz)
displayName.toString == orig(displayName.toString)
annotations[] == orig(annotations[])
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString < displayName.toString
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of annotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < displayName.toString
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
this.fDisplayName.toString one of { "classes", "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests" }
description.fDisplayName.toString one of { "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests", "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fUniqueId == orig(this.fUniqueId)
this.fAnnotations == orig(this.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
this.fDisplayName.toString one of { "classes", "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests" }
description.fDisplayName.toString one of { "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests", "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
name.toString one of { "classes", "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests" }
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
name.toString == return.fDisplayName.toString
name.toString == orig(name.toString)
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fDisplayName == orig(name)
return.fAnnotations == orig(annotations)
name.toString one of { "classes", "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests" }
annotations[] == []
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String):::ENTER
clazz has only one value
name.toString one of { "testInsufficientData", "testPValueNearZero" }
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
name.toString == orig(name.toString)
return.fTestClass == orig(clazz)
name.toString one of { "testInsufficientData", "testPValueNearZero" }
return.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
return.fTestClass has only one value
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
clazz has only one value
name.toString one of { "testInsufficientData", "testPValueNearZero" }
annotations has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
name.toString == orig(name.toString)
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fAnnotations == orig(annotations)
return.fTestClass == orig(clazz)
name.toString one of { "testInsufficientData", "testPValueNearZero" }
annotations[] == []
return.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
return.fAnnotations has only one value
return.fTestClass has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
name.toString < return.fDisplayName.toString
===========================================================================
org.junit.runner.Description.formatDisplayName(java.lang.String, java.lang.String):::ENTER
name != null
name.toString one of { "testInsufficientData", "testPValueNearZero" }
className has only one value
className != null
className.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < className.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < className.toString
name.toString > className.toString
===========================================================================
org.junit.runner.Description.formatDisplayName(java.lang.String, java.lang.String):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
name.toString == orig(name.toString)
className.toString == orig(className.toString)
name.toString one of { "testInsufficientData", "testPValueNearZero" }
className.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
return != null
return.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < className.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < className.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.toString
name.toString > className.toString
name.toString < return.toString
className.toString < return.toString
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::ENTER
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
this.fDisplayName has only one value
this.fDisplayName.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
this.fUniqueId has only one value
annotationType has only one value
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::EXIT279
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fUniqueId == orig(this.fUniqueId)
this.fAnnotations == orig(this.fAnnotations)
this.fDisplayName has only one value
this.fDisplayName.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
this.fUniqueId has only one value
return == null
===========================================================================
org.junit.runner.JUnitCommandLineParseResult:::OBJECT
this.filterSpecs[] == this.parserErrors[]
this.filterSpecs.getClass().getName() == this.classes.getClass().getName()
this.filterSpecs.getClass().getName() == this.parserErrors.getClass().getName()
this has only one value
this.filterSpecs has only one value
this.filterSpecs != null
this.filterSpecs[] == []
this.filterSpecs[].getClass().getName() == []
this.filterSpecs.getClass().getName() == java.util.ArrayList.class
this.classes has only one value
this.classes != null
this.classes[] elements has only one value
this.classes[] elements != null
this.classes[].getClass().getName() elements == java.lang.Class.class
this.classes[].getClass().getName() one of { [], [java.lang.Class] }
this.parserErrors has only one value
this.parserErrors != null
size(this.classes[]) one of { 0, 1 }
size(this.filterSpecs[]) <= size(this.classes[])
size(this.filterSpecs[]) >= size(this.classes[])-1
size(this.filterSpecs[])-1 <= size(this.classes[])-1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.JUnitCommandLineParseResult():::EXIT
this.filterSpecs[] == this.classes[]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::ENTER
size(this.filterSpecs[]) == size(this.classes[])-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::EXIT131
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.classes[] == orig(this.classes[])
this.parserErrors == orig(this.parserErrors)
return == orig(request)
return.getClass().getName() == orig(request.getClass().getName())
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == orig(size(this.classes[]))-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.copyArray(java.lang.String[], int, int):::ENTER
this.filterSpecs[] == this.classes[]
from == size(this.filterSpecs[])
to == size(args[])
size(this.filterSpecs[]) == size(args[])-1
args[from] == args[to-1]
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
to == 1
args[] elements == args[from]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.copyArray(java.lang.String[], int, int):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == this.classes[]
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == return[]
args[] == orig(args[])
return.getClass().getName() == orig(args.getClass().getName())
orig(from) == size(this.filterSpecs[])
orig(from) == size(this.classes[])
orig(from) == size(this.parserErrors[])
orig(from) == size(args[])-1
orig(from) == size(return[])-1
orig(from) == orig(size(this.classes[]))
orig(from) == orig(size(this.parserErrors[]))
orig(from) == orig(size(args[]))-1
orig(to) == size(return[])
args[orig(from)] == args[orig(to)-1]
args[orig(from)] == orig(args[post(to)-1])
args[orig(from)] == return[orig(to)-1]
args[orig(from)] == orig(args[to-1])
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
return has only one value
return.getClass().getName() == java.lang.String[].class
args[] elements == args[orig(from)]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::ENTER
size(this.filterSpecs[]) == size(this.classes[])-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
computer has only one value
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::EXIT118
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.classes[] == orig(this.classes[])
this.parserErrors == orig(this.parserErrors)
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == orig(size(this.classes[]))-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parse(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parse(java.lang.String[]):::EXIT
args[] == orig(args[])
return.filterSpecs[] == return.parserErrors[]
return.filterSpecs.getClass().getName() == return.classes.getClass().getName()
return.filterSpecs.getClass().getName() == return.parserErrors.getClass().getName()
size(args[])-1 == size(return.filterSpecs[])
size(args[])-1 == size(return.parserErrors[])
size(return.classes[]) == orig(size(args[]))
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
return has only one value
return.filterSpecs has only one value
return.filterSpecs[] == []
return.filterSpecs[].getClass().getName() == []
return.filterSpecs.getClass().getName() == java.util.ArrayList.class
return.classes has only one value
return.classes[] contains no nulls and has only one value, of length 1
return.classes[] elements has only one value
return.classes[].getClass().getName() == [java.lang.Class]
return.classes[].getClass().getName() elements == java.lang.Class.class
return.parserErrors has only one value
size(return.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseArgs(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseArgs(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == orig(args[])
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
size(this.classes[]) == orig(size(args[]))
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::EXIT80
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == this.classes[]
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == return[]
args[] == orig(args[])
return.getClass().getName() == orig(args.getClass().getName())
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == size(return[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
return has only one value
return.getClass().getName() == java.lang.String[].class
size(return[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseParameters(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseParameters(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == orig(args[])
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
size(this.classes[]) == orig(size(args[]))
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore:::OBJECT
this has only one value
this.notifier has only one value
this.notifier.listeners has only one value
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
size(this.notifier.listeners[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.JUnitCore.JUnitCore():::EXIT
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
===========================================================================
org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener):::ENTER
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
size(this.notifier.listeners[])-1 == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.defaultComputer():::EXIT
return has only one value
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listener has only one value
size(this.notifier.listeners[]) == 2
listener in this.notifier.listeners[]
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
size(this.notifier.listeners[]) == orig(size(this.notifier.listeners[]))-1
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == orig(size(this.notifier.listeners[]))
size(this.notifier.listeners[])-1 == size(return.failures[])
size(return.failures[]) == orig(size(this.notifier.listeners[]))-1
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] == []
return.failures[].getClass().getName() == []
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
runner has only one value
runner.getClass().getName() == org.junit.runner.Computer$2.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == orig(size(this.notifier.listeners[]))
size(this.notifier.listeners[])-1 == size(return.failures[])
size(return.failures[]) == orig(size(this.notifier.listeners[]))-1
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] == []
return.failures[].getClass().getName() == []
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[]):::ENTER
size(this.notifier.listeners[]) == size(args[])-1
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
system has only one value
system.getClass().getName() == org.junit.internal.RealSystem.class
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[]):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
args[] == orig(args[])
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == orig(size(args[]))
size(args[])-1 == size(return.failures[])
size(args[])-1 == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] == []
return.failures[].getClass().getName() == []
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
args[] elements == args[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Request$1:::OBJECT
this has only one value
this.val$runner has only one value
this.val$runner.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::EXIT
this.val$runner == orig($hidden$1)
this.val$runner.getClass().getName() == orig($hidden$1.getClass().getName())
===========================================================================
org.junit.runner.Request$1.getRunner():::ENTER
===========================================================================
org.junit.runner.Request$1.getRunner():::EXIT
this.val$runner == return
this.val$runner.getClass().getName() == return.getClass().getName()
return == orig(this.val$runner)
return.getClass().getName() == orig(this.val$runner.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request:::OBJECT
this has only one value
this.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.Request():::EXIT
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::ENTER
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT78
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT
classes[] == orig(classes[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::EXIT
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Result$Listener:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
this has only one value
org.junit.runner.Result.this has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
org.junit.runner.Result.this.count has only one value
org.junit.runner.Result.this.ignoreCount has only one value
org.junit.runner.Result.this.assumptionFailureCount has only one value
org.junit.runner.Result.this.failures has only one value
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Result.this.failures[].getClass().getName() == []
org.junit.runner.Result.this.runTime has only one value
org.junit.runner.Result.this.startTime has only one value
org.junit.runner.Result.this.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.this has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
org.junit.runner.Result.this.count has only one value
org.junit.runner.Result.this.ignoreCount has only one value
org.junit.runner.Result.this.assumptionFailureCount has only one value
org.junit.runner.Result.this.failures has only one value
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Result.this.failures[].getClass().getName() == []
org.junit.runner.Result.this.runTime has only one value
org.junit.runner.Result.this.startTime has only one value
org.junit.runner.Result.this.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fAnnotations[]) == orig(size(org.junit.runner.Result.this.failures[]))
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this == result
org.junit.runner.Result.this.count == result.count
org.junit.runner.Result.this.ignoreCount == result.ignoreCount
org.junit.runner.Result.this.assumptionFailureCount == result.assumptionFailureCount
org.junit.runner.Result.this.failures == result.failures
org.junit.runner.Result.this.failures[] == result.failures[]
org.junit.runner.Result.this.runTime == result.runTime
org.junit.runner.Result.this.startTime == result.startTime
org.junit.runner.Result.this.serializedForm == result.serializedForm
result has only one value
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this == orig(result)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == result.count
org.junit.runner.Result.this.ignoreCount == result.ignoreCount
org.junit.runner.Result.this.assumptionFailureCount == result.assumptionFailureCount
org.junit.runner.Result.this.failures == result.failures
org.junit.runner.Result.this.failures[] == result.failures[]
org.junit.runner.Result.this.runTime == result.runTime
org.junit.runner.Result.this.startTime == result.startTime
org.junit.runner.Result.this.serializedForm == result.serializedForm
result.count == orig(org.junit.runner.Result.this.count)
result.count == orig(result.count)
result.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(org.junit.runner.Result.this.failures)
result.failures == orig(result.failures)
result.failures[] == orig(org.junit.runner.Result.this.failures[])
result.failures[] == orig(result.failures[])
result.runTime == orig(org.junit.runner.Result.this.runTime)
result.runTime == orig(result.runTime)
result.startTime == orig(org.junit.runner.Result.this.startTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
result.serializedForm == orig(result.serializedForm)
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fAnnotations[]) == orig(size(org.junit.runner.Result.this.failures[]))
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.Result:::CLASS
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields != null
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[] elements != null
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.Result:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
this has only one value
this.count has only one value
this.count != null
this.ignoreCount has only one value
this.ignoreCount != null
this.assumptionFailureCount has only one value
this.assumptionFailureCount != null
this.failures has only one value
this.failures != null
this.failures[] == []
this.failures[].getClass().getName() == []
this.runTime has only one value
this.runTime != null
this.startTime has only one value
this.startTime != null
this.serializedForm == null
===========================================================================
org.junit.runner.Result.Result():::EXIT
===========================================================================
org.junit.runner.Result.createListener():::ENTER
===========================================================================
org.junit.runner.Result.createListener():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
return has only one value
===========================================================================
org.junit.runner.Result.getFailureCount():::ENTER
===========================================================================
org.junit.runner.Result.getFailureCount():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
return == size(this.failures[])
return == orig(size(this.failures[]))
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] == org.junit.runner.Result.serialPersistentFields[return]
orig(org.junit.runner.Result.serialPersistentFields[post(org.junit.runner.Result.serialVersionUID)-1]) == org.junit.runner.Result.serialPersistentFields[return]
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result$SerializedForm.serialVersionUID-1] == org.junit.runner.Result.serialPersistentFields[return]
org.junit.runner.Result.serialPersistentFields[return] == orig(org.junit.runner.Result.serialPersistentFields[post(org.junit.runner.Result$SerializedForm.serialVersionUID)-1])
org.junit.runner.Result.serialPersistentFields[return] has only one value
===========================================================================
org.junit.runner.Result.getFailures():::ENTER
===========================================================================
org.junit.runner.Result.getFailures():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
size(this.failures[]) == size(return[])
size(return[]) == orig(size(this.failures[]))
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
===========================================================================
org.junit.runner.Result.getRunCount():::ENTER
===========================================================================
org.junit.runner.Result.getRunCount():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] == org.junit.runner.Result.serialPersistentFields[return-1]
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] == orig(org.junit.runner.Result.serialPersistentFields[post(return)-1])
return == 2
org.junit.runner.Result.serialPersistentFields[return] has only one value
===========================================================================
org.junit.runner.Result.getRunTime():::ENTER
===========================================================================
org.junit.runner.Result.getRunTime():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
return == 256
===========================================================================
org.junit.runner.Result.wasSuccessful():::ENTER
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
return == true
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
org.junit.runner.Runner:::OBJECT
===========================================================================
org.junit.runner.Runner.Runner():::EXIT
===========================================================================
org.junit.runner.notification.RunListener:::OBJECT
===========================================================================
org.junit.runner.notification.RunListener.RunListener():::EXIT
===========================================================================
org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this has only one value
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$2:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Result.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
this.val$result.count has only one value
this.val$result.ignoreCount has only one value
this.val$result.assumptionFailureCount has only one value
this.val$result.failures has only one value
this.val$result.failures[] == []
this.val$result.failures[].getClass().getName() == []
this.val$result.runTime has only one value
this.val$result.startTime has only one value
this.val$result.serializedForm == null
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(org.junit.runner.Result.serialPersistentFields[]) == 6
size(this.currentListeners[]) == 2
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.currentListeners[org.junit.runner.Result.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
$hidden$2.count has only one value
$hidden$2.ignoreCount has only one value
$hidden$2.assumptionFailureCount has only one value
$hidden$2.failures has only one value
$hidden$2.failures[] == []
$hidden$2.failures[].getClass().getName() == []
$hidden$2.runTime has only one value
$hidden$2.startTime has only one value
$hidden$2.serializedForm == null
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT
this.val$result == orig($hidden$2)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.val$result.count == $hidden$2.count
this.val$result.ignoreCount == $hidden$2.ignoreCount
this.val$result.assumptionFailureCount == $hidden$2.assumptionFailureCount
this.val$result.failures == $hidden$2.failures
this.val$result.failures[] == $hidden$2.failures[]
this.val$result.runTime == $hidden$2.runTime
this.val$result.startTime == $hidden$2.startTime
this.val$result.serializedForm == $hidden$2.serializedForm
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.count == orig($hidden$2.count)
$hidden$2.ignoreCount == orig($hidden$2.ignoreCount)
$hidden$2.assumptionFailureCount == orig($hidden$2.assumptionFailureCount)
$hidden$2.failures == orig($hidden$2.failures)
$hidden$2.failures[] == orig($hidden$2.failures[])
$hidden$2.runTime == orig($hidden$2.runTime)
$hidden$2.startTime == orig($hidden$2.startTime)
$hidden$2.serializedForm == orig($hidden$2.serializedForm)
$hidden$2.count has only one value
$hidden$2.ignoreCount has only one value
$hidden$2.assumptionFailureCount has only one value
$hidden$2.failures has only one value
$hidden$2.failures[] == []
$hidden$2.failures[].getClass().getName() == []
$hidden$2.runTime has only one value
$hidden$2.startTime has only one value
$hidden$2.serializedForm == null
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$result == orig(this.val$result)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.val$result.count == orig(this.val$result.count)
this.val$result.ignoreCount == orig(this.val$result.ignoreCount)
this.val$result.assumptionFailureCount == orig(this.val$result.assumptionFailureCount)
this.val$result.failures == orig(this.val$result.failures)
this.val$result.failures[] == orig(this.val$result.failures[])
this.val$result.runTime == orig(this.val$result.runTime)
this.val$result.startTime == orig(this.val$result.startTime)
this.val$result.serializedForm == orig(this.val$result.serializedForm)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$4:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$5:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
this.val$description.fTestClass has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$5.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
$hidden$2.fTestClass has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$5.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fTestClass == orig($hidden$2.fTestClass)
$hidden$2.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
$hidden$2.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$9:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
this.val$description.fTestClass has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$9.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
$hidden$2.fTestClass has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$9.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fTestClass == orig($hidden$2.fTestClass)
$hidden$2.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
$hidden$2.fTestClass has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$9.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$9.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier:::OBJECT
this.currentListeners == org.junit.runner.notification.RunNotifier.this.listeners
this.currentListeners[] == org.junit.runner.notification.RunNotifier.this.listeners[]
this.currentListeners.getClass().getName() == org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName()
this.currentListeners has only one value
this.currentListeners != null
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[] elements != null
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
size(this.currentListeners[]) == 2
this.getClass().getName() != this.currentListeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::EXIT
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier, java.util.List):::ENTER
org.junit.runner.notification.RunNotifier.this.listeners == currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == currentListeners.getClass().getName()
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
currentListeners has only one value
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(currentListeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier, java.util.List):::EXIT
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(currentListeners)
this.currentListeners[] == currentListeners[]
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(currentListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
currentListeners[] == orig(currentListeners[])
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::EXIT
this.currentListeners == orig(this.currentListeners)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier:::OBJECT
this has only one value
this.listeners has only one value
this.listeners != null
this.listeners[] elements != null
this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.pleaseStop == false
size(this.listeners[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.notification.RunNotifier.RunNotifier():::EXIT
this.listeners[] == []
this.listeners[].getClass().getName() == []
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
listener has only one value
size(this.listeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
size(this.listeners[]) == 2
orig(listener) in this.listeners[]
===========================================================================
org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] == []
this.listeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
size(this.listeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailures(java.util.List, java.util.List):::ENTER
this.listeners[] == listeners[]
listeners.getClass().getName() == failures.getClass().getName()
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listeners.getClass().getName() == java.util.ArrayList.class
failures[] == []
failures[].getClass().getName() == []
size(this.listeners[]) == 2
this.listeners.getClass().getName() != listeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailures(java.util.List, java.util.List):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == listeners[]
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
listeners[] == orig(this.listeners[])
listeners[] == orig(listeners[])
failures[] == orig(failures[])
listeners[] contains no nulls and has only one value, of length 2
listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
failures[] == []
failures[].getClass().getName() == []
size(this.listeners[]) == 2
this.listeners.getClass().getName() != orig(listeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.listeners[])-1
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Result.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteFinished(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listener has only one value
size(this.listeners[]) == 2
listener in this.listeners[]
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[]) == orig(size(this.listeners[]))-1
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
===========================================================================
org.junit.runner.notification.RunNotifier.wrapIfNotThreadSafe(org.junit.runner.notification.RunListener):::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier.wrapIfNotThreadSafe(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
===========================================================================
org.junit.runner.notification.SynchronizedRunListener:::OBJECT
this has only one value
this.listener has only one value
this.listener != null
this.monitor has only one value
this.monitor != null
this.monitor.getClass().getName() == org.junit.runner.notification.RunNotifier.class
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.SynchronizedRunListener(org.junit.runner.notification.RunListener, java.lang.Object):::ENTER
listener has only one value
monitor has only one value
monitor.getClass().getName() == org.junit.runner.notification.RunNotifier.class
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.SynchronizedRunListener(org.junit.runner.notification.RunListener, java.lang.Object):::EXIT
this.listener == orig(listener)
this.monitor == orig(monitor)
this.monitor.getClass().getName() == orig(monitor.getClass().getName())
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFinished(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunFinished(org.junit.runner.Result):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fDisplayName.toString one of { "testInsufficientData(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)", "testPValueNearZero(org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests)" }
description.fTestClass has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteFinished(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runners.ParentRunner$1:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
size(org.junit.runners.ParentRunner.this.filteredChildren[]) == 1
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass == null
org.junit.runners.ParentRunner.this.filteredChildren == null
org.junit.runners.ParentRunner.this.scheduler == null
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.testClass == null
org.junit.runners.ParentRunner.this.filteredChildren == null
org.junit.runners.ParentRunner.this.scheduler == null
===========================================================================
org.junit.runners.ParentRunner$1.finished():::ENTER
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$1.finished():::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::ENTER
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
childStatement has only one value
childStatement.getClass().getName() == org.junit.runners.ParentRunner$4.class
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$2:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(this.val$notifier.listeners[])-1 == size(org.junit.runners.ParentRunner.VALIDATORS[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$notifier has only one value
this.val$notifier.listeners has only one value
this.val$notifier.listeners[] contains no nulls and has only one value, of length 2
this.val$notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.val$notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.val$notifier.pleaseStop == false
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$2.listeners[])-1
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.listeners has only one value
$hidden$2.listeners[] contains no nulls and has only one value, of length 2
$hidden$2.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.pleaseStop == false
size($hidden$2.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::EXIT
this.val$notifier == orig($hidden$2)
this.val$notifier.listeners == $hidden$2.listeners
this.val$notifier.listeners[] == $hidden$2.listeners[]
this.val$notifier.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
this.val$notifier.pleaseStop == $hidden$2.pleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
$hidden$2.listeners == orig($hidden$2.listeners)
$hidden$2.listeners[] == orig($hidden$2.listeners[])
$hidden$2.listeners.getClass().getName() == orig($hidden$2.listeners.getClass().getName())
$hidden$2.pleaseStop == orig($hidden$2.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$2.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size($hidden$2.listeners[]))-1
$hidden$2.listeners has only one value
$hidden$2.listeners[] contains no nulls and has only one value, of length 2
$hidden$2.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.pleaseStop == false
size($hidden$2.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::EXIT
this.val$notifier == orig(this.val$notifier)
this.val$notifier.listeners == orig(this.val$notifier.listeners)
this.val$notifier.listeners[] == orig(this.val$notifier.listeners[])
this.val$notifier.listeners.getClass().getName() == orig(this.val$notifier.listeners.getClass().getName())
this.val$notifier.pleaseStop == orig(this.val$notifier.pleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.val$notifier.listeners[]))-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$3:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$statement has only one value
this.val$statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, org.junit.runners.model.Statement):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, org.junit.runners.model.Statement):::EXIT
this.val$statement == orig($hidden$2)
this.val$statement.getClass().getName() == orig($hidden$2.getClass().getName())
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$3.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$3.evaluate():::EXIT
this.val$statement == orig(this.val$statement)
this.val$statement.getClass().getName() == orig(this.val$statement.getClass().getName())
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$4:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(this.val$notifier.listeners[])-1 == size(org.junit.runners.ParentRunner.VALIDATORS[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$each has only one value
this.val$each.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
this.val$notifier has only one value
this.val$notifier.listeners has only one value
this.val$notifier.listeners[] contains no nulls and has only one value, of length 2
this.val$notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.val$notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.val$notifier.pleaseStop == false
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.listeners[]) == 2
org.junit.runners.ParentRunner.this.filteredChildren[] elements == this.val$each
this.val$each in org.junit.runners.ParentRunner.this.filteredChildren[]
this.val$each.getClass().getName() in org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$3.listeners[])-1
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
$hidden$3 has only one value
$hidden$3.listeners has only one value
$hidden$3.listeners[] contains no nulls and has only one value, of length 2
$hidden$3.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$3.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$3.pleaseStop == false
size($hidden$3.listeners[]) == 2
$hidden$2 in org.junit.runners.ParentRunner.this.filteredChildren[]
org.junit.runners.ParentRunner.this.filteredChildren[] elements == $hidden$2
$hidden$2.getClass().getName() in org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::EXIT
this.val$each == orig($hidden$2)
this.val$each.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$notifier == orig($hidden$3)
this.val$notifier.listeners == $hidden$3.listeners
this.val$notifier.listeners[] == $hidden$3.listeners[]
this.val$notifier.listeners.getClass().getName() == $hidden$3.listeners.getClass().getName()
this.val$notifier.pleaseStop == $hidden$3.pleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
$hidden$3.listeners == orig($hidden$3.listeners)
$hidden$3.listeners[] == orig($hidden$3.listeners[])
$hidden$3.listeners.getClass().getName() == orig($hidden$3.listeners.getClass().getName())
$hidden$3.pleaseStop == orig($hidden$3.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$3.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size($hidden$3.listeners[]))-1
$hidden$3.listeners has only one value
$hidden$3.listeners[] contains no nulls and has only one value, of length 2
$hidden$3.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$3.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$3.pleaseStop == false
size($hidden$3.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$4.run():::ENTER
===========================================================================
org.junit.runners.ParentRunner$4.run():::EXIT
this.val$each == orig(this.val$each)
this.val$each.getClass().getName() == orig(this.val$each.getClass().getName())
this.val$notifier == orig(this.val$notifier)
this.val$notifier.listeners == orig(this.val$notifier.listeners)
this.val$notifier.listeners[] == orig(this.val$notifier.listeners[])
this.val$notifier.listeners.getClass().getName() == orig(this.val$notifier.listeners.getClass().getName())
this.val$notifier.pleaseStop == orig(this.val$notifier.pleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.val$notifier.listeners[]))-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector:::OBJECT
this has only one value
this.entries has only one value
this.entries[] == []
this.entries[].getClass().getName() == []
this.entries.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.ClassRuleCollector():::EXIT
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.getOrderedRules():::ENTER
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.getOrderedRules():::EXIT
this.entries == orig(this.entries)
this.entries[] == return[]
this.entries.getClass().getName() == return.getClass().getName()
return[] == orig(this.entries[])
return.getClass().getName() == orig(this.entries.getClass().getName())
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS != null
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[] elements != null
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner:::OBJECT
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(this.filteredChildren[])
this has only one value
this.getClass().getName() == org.junit.runner.Computer$2.class
this.childrenLock has only one value
this.childrenLock != null
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR != null
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR != null
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations != null
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.testClass.fieldsForAnnotations != null
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[] elements != null
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler != null
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.getClass().getName() != org.junit.runners.ParentRunner.VALIDATORS.getClass().getName()
this.getClass().getName() != this.childrenLock.getClass().getName()
this.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.getClass().getName() != this.filteredChildren.getClass().getName()
this.getClass().getName() != this.scheduler.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.childrenLock.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.filteredChildren.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.scheduler.getClass().getName()
this.childrenLock.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != this.filteredChildren.getClass().getName()
this.childrenLock.getClass().getName() != this.scheduler.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.scheduler.getClass().getName()
this.filteredChildren.getClass().getName() != this.scheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::ENTER
testClass == null
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::EXIT
this.testClass.clazz == orig(testClass)
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.applyValidators(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.applyValidators(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::ENTER
this.testClass has only one value
this.filteredChildren has only one value
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT227
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT227;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return == false
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$3.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classRules():::ENTER
this.testClass has only one value
this.filteredChildren has only one value
===========================================================================
org.junit.runners.ParentRunner.classRules():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return[])
size(this.filteredChildren[])-1 == size(return[])
size(return[]) == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))-1
size(return[]) == orig(size(this.filteredChildren[]))-1
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.createTestClass(java.lang.Class):::ENTER
this.testClass == null
this.filteredChildren == null
testClass == null
===========================================================================
org.junit.runners.ParentRunner.createTestClass(java.lang.Class):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return.methodsForAnnotations.getClass().getName() == return.fieldsForAnnotations.getClass().getName()
this.testClass == null
this.filteredChildren == null
return has only one value
return.clazz == null
return.methodsForAnnotations has only one value
return.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
return.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.ParentRunner.getDescription():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getDescription():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == org.junit.runner.Description.EMPTY.fTestClass
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren[].getClass().getName() == orig(this.filteredChildren[].getClass().getName())
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
org.junit.runner.Description.serialVersionUID == size(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runner.Description.serialVersionUID == size(this.filteredChildren[])
org.junit.runner.Description.serialVersionUID == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(this.testClass.clazz)
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return.fAnnotations[])
this.testClass has only one value
this.filteredChildren has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "classes"
return.fUniqueId has only one value
org.junit.runners.ParentRunner.VALIDATORS[] elements == org.junit.runners.ParentRunner.VALIDATORS[org.junit.runner.Description.serialVersionUID-1]
this.filteredChildren[] == orig(this.filteredChildren[]) (elementwise)
this.filteredChildren[] is the reverse of orig(this.filteredChildren[])
this.filteredChildren[] elements == this.filteredChildren[org.junit.runner.Description.serialVersionUID-1]
orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1]) in this.filteredChildren[]
this.filteredChildren[] elements == orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1])
this.filteredChildren[].getClass().getName() == orig(this.filteredChildren[].getClass().getName()) (elementwise)
orig(this.filteredChildren[]) elements == this.filteredChildren[org.junit.runner.Description.serialVersionUID-1]
this.filteredChildren[org.junit.runner.Description.serialVersionUID-1] in orig(this.filteredChildren[])
orig(this.filteredChildren[]) elements == orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1])
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == return
this.filteredChildren[] == return[]
this.filteredChildren.getClass().getName() == return.getClass().getName()
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return[].getClass().getName() == orig(this.filteredChildren[].getClass().getName())
return.getClass().getName() == orig(this.filteredChildren.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(return[])
this.testClass has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return[] == orig(this.filteredChildren[]) (elementwise)
return[] is the reverse of orig(this.filteredChildren[])
return[].getClass().getName() == orig(this.filteredChildren[].getClass().getName()) (elementwise)
===========================================================================
org.junit.runners.ParentRunner.getRunnerAnnotations():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getRunnerAnnotations():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return[])
size(return[]) == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))-1
this.testClass has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == return
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == return.clazz
this.testClass.methodsForAnnotations == return.methodsForAnnotations
this.testClass.methodsForAnnotations.getClass().getName() == return.methodsForAnnotations.getClass().getName()
this.testClass.fieldsForAnnotations == return.fieldsForAnnotations
this.testClass.fieldsForAnnotations.getClass().getName() == return.methodsForAnnotations.getClass().getName()
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(this.testClass)
return.clazz == orig(this.testClass.clazz)
return.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
return.methodsForAnnotations.getClass().getName() == return.fieldsForAnnotations.getClass().getName()
return.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
return.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
return.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
return has only one value
return.clazz == null
return.methodsForAnnotations has only one value
return.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
return.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != return.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != orig(this.getClass().getName())
this.childrenLock.getClass().getName() != return.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != orig(this.getClass().getName())
this.scheduler.getClass().getName() != return.methodsForAnnotations.getClass().getName()
this.scheduler.getClass().getName() != orig(this.getClass().getName())
return.methodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
child has only one value
child.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
child in this.filteredChildren[]
this.filteredChildren[] elements == child
child.getClass().getName() in this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return == false
orig(child) in this.filteredChildren[]
this.filteredChildren[] elements == orig(child)
orig(child.getClass().getName()) in this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.validate():::ENTER
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.validate():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.validateClassRules(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.validateClassRules(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
isStatic == true
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withInterruptIsolation(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withInterruptIsolation(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$3.class
===========================================================================
org.junit.runners.RuleContainer$1:::OBJECT
this has only one value
===========================================================================
org.junit.runners.RuleContainer$1.():::EXIT
===========================================================================
org.junit.runners.Suite:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.Suite:::OBJECT
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName()
this.runners.getClass().getName() == this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(this.runners[]) == size(org.junit.runners.ParentRunner.VALIDATORS[])
this has only one value
this.runners has only one value
this.runners[] contains no nulls and has only one value, of length 1
this.runners[] elements has only one value
this.runners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
this.runners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
this.runners.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.childrenLock has only one value
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.runners[] == this.filteredChildren[] (elementwise)
this.runners[] is the reverse of this.filteredChildren[]
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName() (elementwise)
this.runners.getClass().getName() != org.junit.runners.ParentRunner.VALIDATORS.getClass().getName()
this.runners.getClass().getName() != this.childrenLock.getClass().getName()
this.runners.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.runners.getClass().getName() != this.scheduler.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.childrenLock.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.scheduler.getClass().getName()
this.childrenLock.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != this.scheduler.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.scheduler.getClass().getName()
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::ENTER
klass == null
runners has only one value
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
runners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
runners.getClass().getName() == java.util.ArrayList.class
size(runners[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::EXIT
this.runners[] == runners[]
this.testClass.clazz == orig(klass)
runners[] == orig(runners[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(runners[]))
this.filteredChildren == null
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
runners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(classes[]))
this.filteredChildren == null
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::ENTER
this.runners[] == this.filteredChildren[]
this.filteredChildren has only one value
child has only one value
child.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
child in this.runners[]
this.runners[] elements == child
child.getClass().getName() in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::EXIT
this.runners == orig(this.runners)
this.runners[] == this.filteredChildren[]
this.runners[] == orig(this.runners[])
this.runners[] == orig(this.filteredChildren[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
this.runners.getClass().getName() == orig(this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == org.junit.runner.Description.EMPTY.fTestClass
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
org.junit.runner.Description.serialVersionUID == size(this.runners[])
org.junit.runner.Description.serialVersionUID == size(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runner.Description.serialVersionUID == size(this.filteredChildren[])
org.junit.runner.Description.serialVersionUID == orig(size(this.runners[]))
org.junit.runner.Description.serialVersionUID == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))
org.junit.runner.Description.serialVersionUID == orig(size(this.filteredChildren[]))
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(this.testClass.clazz)
orig(child) == this.runners[org.junit.runner.Description.serialVersionUID-1]
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return.fAnnotations[])
this.filteredChildren has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.math.stat.correlation.PearsonsCorrelationTestFailingTests"
return.fUniqueId has only one value
orig(child) in this.runners[]
this.runners[] elements == orig(child)
this.runners[] elements == this.runners[org.junit.runner.Description.serialVersionUID-1]
orig(child.getClass().getName()) in this.runners[].getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS[] elements == org.junit.runners.ParentRunner.VALIDATORS[org.junit.runner.Description.serialVersionUID-1]
===========================================================================
org.junit.runners.Suite.getChildren():::ENTER
this.filteredChildren == null
===========================================================================
org.junit.runners.Suite.getChildren():::EXIT
this.runners == return
this.runners[] == return[]
this.runners.getClass().getName() == return.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(this.runners)
return[] == orig(this.runners[])
return.getClass().getName() == orig(this.runners.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(return[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
this.filteredChildren == null
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::ENTER
this.runners[] == this.filteredChildren[]
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.filteredChildren has only one value
runner has only one value
runner.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
runner in this.runners[]
this.runners[] elements == runner
runner.getClass().getName() in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::EXIT
this.runners == orig(this.runners)
this.runners[] == this.filteredChildren[]
this.runners[] == orig(this.runners[])
this.runners[] == orig(this.filteredChildren[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
this.runners.getClass().getName() == orig(this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
orig(runner) in this.runners[]
this.runners[] elements == orig(runner)
orig(runner.getClass().getName()) in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
this.getClass().getName() != this.parents.getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder.RunnerBuilder():::EXIT
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == orig(parent)
this.parents has only one value
return == null
===========================================================================
org.junit.runners.model.RunnerBuilder.configureRunner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.runners.model.RunnerBuilder.configureRunner(org.junit.runner.Runner):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
klass == null
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
this.parents has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT74
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.runners.model.Statement:::OBJECT
===========================================================================
org.junit.runners.model.Statement.Statement():::EXIT
===========================================================================
org.junit.runners.model.TestClass$FieldComparator:::OBJECT
this has only one value
===========================================================================
org.junit.runners.model.TestClass$FieldComparator.FieldComparator():::EXIT
===========================================================================
org.junit.runners.model.TestClass$MethodComparator:::OBJECT
this has only one value
===========================================================================
org.junit.runners.model.TestClass$MethodComparator.MethodComparator():::EXIT
===========================================================================
org.junit.runners.model.TestClass:::CLASS
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR != null
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR != null
===========================================================================
org.junit.runners.model.TestClass:::OBJECT
this.methodsForAnnotations.getClass().getName() == this.fieldsForAnnotations.getClass().getName()
this has only one value
this.clazz == null
this.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::ENTER
clazz == null
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::EXIT
this.clazz == orig(clazz)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::ENTER
this.clazz == test
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
test == null
annotationClass has only one value
valueClass has only one value
consumer has only one value
consumer.getClass().getName() == org.junit.runners.ParentRunner$ClassRuleCollector.class
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.clazz == orig(test)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::ENTER
this.clazz == test
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
test == null
annotationClass has only one value
valueClass has only one value
consumer has only one value
consumer.getClass().getName() == org.junit.runners.ParentRunner$ClassRuleCollector.class
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.clazz == orig(test)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
annotationClass has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class, boolean):::ENTER
map.getClass().getName() == java.util.Collections$UnmodifiableMap.class
fillIfAbsent == false
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class, boolean):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$EmptyList.class
return.getClass().getName() != orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT215
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == return
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
return == orig(this.clazz)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return == null
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::ENTER
testClass == null
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.TestClass.makeDeeplyUnmodifiable(java.util.Map):::ENTER
source.getClass().getName() == java.util.LinkedHashMap.class
===========================================================================
org.junit.runners.model.TestClass.makeDeeplyUnmodifiable(java.util.Map):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return.getClass().getName() == java.util.Collections$UnmodifiableMap.class
===========================================================================
org.junit.runners.model.TestClass.scanAnnotatedMembers(java.util.Map, java.util.Map):::ENTER
this.methodsForAnnotations == this.fieldsForAnnotations
this.methodsForAnnotations == null
methodsForAnnotations has only one value
methodsForAnnotations.getClass().getName() == java.util.LinkedHashMap.class
fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.scanAnnotatedMembers(java.util.Map, java.util.Map):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == this.fieldsForAnnotations
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations == null
===========================================================================
org.junit.validator.AnnotationValidatorFactory:::CLASS
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationValidatorFactory:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationValidatorFactory.AnnotationValidatorFactory():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator:::OBJECT
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator.AnnotatableValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator.ClassValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator.FieldValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator.MethodValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator:::CLASS
org.junit.validator.AnnotationsValidator.VALIDATORS has only one value
org.junit.validator.AnnotationsValidator.VALIDATORS[] contains no nulls and has only one value, of length 3
org.junit.validator.AnnotationsValidator.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator.ClassValidator, org.junit.validator.AnnotationsValidator.MethodValidator, org.junit.validator.AnnotationsValidator.FieldValidator]
org.junit.validator.AnnotationsValidator.VALIDATORS.getClass().getName() == java.util.Arrays$ArrayList.class
size(org.junit.validator.AnnotationsValidator.VALIDATORS[]) == 3
===========================================================================
org.junit.validator.AnnotationsValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator.AnnotationsValidator():::EXIT
Exiting Daikon.
Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 6 times.  Unmatched entries are ignored!
Unterminated calls:
  org.junit.runner.JUnitCore.main(java.lang.String[]) : 1 invocation
  org.apache.commons.math.stat.correlation.SpearmansCorrelation.correlation(double[], double[]) : 1 invocation
  org.apache.commons.math.stat.correlation.SpearmansCorrelation.SpearmansCorrelation(org.apache.commons.math.linear.RealMatrix) : 1 invocation
  org.apache.commons.math.stat.correlation.SpearmansCorrelation.SpearmansCorrelation(org.apache.commons.math.linear.RealMatrix, org.apache.commons.math.stat.ranking.RankingAlgorithm) : 1 invocation
  org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation(org.apache.commons.math.linear.RealMatrix) : 1 invocation
  org.apache.commons.math.stat.correlation.PearsonsCorrelation.checkSufficientData(org.apache.commons.math.linear.RealMatrix) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
com.sun.proxy.$Proxy3:::CLASS
com.sun.proxy.$Proxy3.m1 has only one value
com.sun.proxy.$Proxy3.m2 has only one value
com.sun.proxy.$Proxy3.m3 has only one value
com.sun.proxy.$Proxy3.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy3:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
return has only one value
===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(double, double, double):::ENTER
expected == actual
expected == 0.9708985250610559
delta == 4.9E-324
===========================================================================
junit.framework.Assert.assertEquals(double, double, double):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, double, double, double):::ENTER
expected == actual
message == null
expected == 0.9708985250610559
delta == 4.9E-324
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, double, double, double):::EXIT119
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, double, double, double):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message != null
object != null
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
===========================================================================
junit.framework.TestCase.TestCase():::EXIT
this.fName == null
===========================================================================
junit.framework.TestCase.assertEquals(double, double, double):::ENTER
expected == actual
expected == 0.9708985250610559
delta == 4.9E-324
===========================================================================
junit.framework.TestCase.assertEquals(double, double, double):::EXIT
===========================================================================
junit.framework.TestCase.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message.toString == "TestCase.fName cannot be null"
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.TestCase.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == orig(message.toString)
message.toString == "TestCase.fName cannot be null"
===========================================================================
junit.framework.TestCase.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.TestCase.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
return == 1
===========================================================================
junit.framework.TestCase.getName():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.getName():::EXIT
this.fName == return
this.fName.toString == return.toString
return == orig(this.fName)
return.toString == orig(this.fName.toString)
return != null
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::ENTER
this.fName == null
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test != null
this.val$test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
this.val$test.fName != null
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures != null
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors != null
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners != null
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName == $hidden$2.fName
this.val$test.fName.toString == $hidden$2.fName.toString
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
$hidden$2.fName == orig($hidden$2.fName)
$hidden$2.fName.toString == orig($hidden$2.fName.toString)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName == orig(this.val$test.fName)
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
this.fListeners[].getClass().getName() one of { [], [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors == orig(this.fErrors)
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fRunTests >= size(return[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
test.fName.toString == orig(test.fName.toString)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
return == false
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestSuite:::OBJECT
this has only one value
this.fName.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
this.fTests has only one value
this.fTests != null
this.fTests[] elements != null
this.fTests[].getClass().getName() elements == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
size(this.fTests[]) == 8
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fName has only one value
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName has only one value
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this.fName has only one value
this.fName != null
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT287
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[].getClass().getName() one of { [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests], [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests] }
names[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.fTests[]) one of { 3, 6 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT293
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT297
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class):::ENTER
this.fName == null
this.fTests[] == []
this.fTests[].getClass().getName() == []
theClass has only one value
===========================================================================
junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class):::EXIT146
===========================================================================
junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
size(this.fTests[]) == 8
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT73
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
name.toString == orig(name.toString)
return.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
===========================================================================
junit.framework.TestSuite.getName():::ENTER
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
size(this.fTests[]) == 8
===========================================================================
junit.framework.TestSuite.getName():::EXIT
this.fName == return
this.fName.toString == return.toString
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
return == orig(this.fName)
return.toString == orig(this.fName.toString)
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
return has only one value
return.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
size(this.fTests[]) == 8
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT86
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this.fName has only one value
this.fName != null
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName has only one value
this.fName != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this.fName has only one value
this.fName != null
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName has only one value
this.fName != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(this.fTests[]) == 8
size(result.fListeners[]) == 1
this.fTests[result.fRunTests] has only one value
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(this.fTests[])
result.fRunTests == orig(size(this.fTests[]))
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fRunTests == 8
result.fStop == false
size(result.fListeners[]) == 1
this.fTests[result.fRunTests-1] has only one value
this.fTests[orig(result.fRunTests)] has only one value
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
size(result.fFailures[]) == size(result.fListeners[])-1
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(this.fTests[]) == 8
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[result.fRunTests-1]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[result.fRunTests-1] == this.fTests[orig(result.fRunTests)]
this.fTests[result.fRunTests-1] == orig(this.fTests[result.fRunTests])
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener]
result.fListeners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.OldTestClassAdaptingListener.class
result.fStop == false
size(this.fTests[]) == 8
size(result.fListeners[]) == 1
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests <= size(this.fTests[])
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestSuite.testAt(int):::ENTER
this.fName has only one value
this.fName != null
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
index >= 0
size(this.fTests[]) == 8
index <= size(this.fTests[])-1
===========================================================================
junit.framework.TestSuite.testAt(int):::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
return == this.fTests[orig(index)]
this.fName has only one value
this.fName != null
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
return != null
return.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
size(this.fTests[]) == 8
return in this.fTests[]
return.getClass().getName() in this.fTests[].getClass().getName()
orig(index) <= size(this.fTests[])-1
===========================================================================
junit.framework.TestSuite.testCount():::ENTER
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
size(this.fTests[]) == 8
===========================================================================
junit.framework.TestSuite.testCount():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
return == size(this.fTests[])
return == orig(size(this.fTests[]))
this.fName has only one value
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
return == 8
this.fTests[return-1] has only one value
===========================================================================
junit.runner.Version.id():::EXIT
return has only one value
return.toString == "4.13.2-Daikon"
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::OBJECT
this.val$pattern.toString one of { "insufficient data: only {0} rows and {1} columns.", "invalid array dimensions. xArray has size {0}; yArray has {1} elements" }
this.val$arguments.getClass().getName() == java.lang.Object[].class
this.val$arguments[].getClass().getName() == [java.lang.Integer, java.lang.Integer]
this.val$arguments[].getClass().getName() elements == java.lang.Integer.class
size(this.val$arguments[]) == 2
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::ENTER
$hidden$1.toString one of { "insufficient data: only {0} rows and {1} columns.", "invalid array dimensions. xArray has size {0}; yArray has {1} elements" }
$hidden$2.getClass().getName() == java.lang.Object[].class
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::EXIT
this.val$pattern == orig($hidden$1)
this.val$pattern.toString == $hidden$1.toString
this.val$arguments == orig($hidden$2)
this.val$arguments.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$arguments[] == $hidden$2[]
$hidden$1.toString == orig($hidden$1.toString)
$hidden$2[] == orig($hidden$2[])
$hidden$1.toString one of { "insufficient data: only {0} rows and {1} columns.", "invalid array dimensions. xArray has size {0}; yArray has {1} elements" }
===========================================================================
org.apache.commons.math.MathRuntimeException:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "insufficient data: only {0} rows and {1} columns.", "invalid array dimensions. xArray has size {0}; yArray has {1} elements" }
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) == 2
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "insufficient data: only {0} rows and {1} columns.", "invalid array dimensions. xArray has size {0}; yArray has {1} elements" }
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, org.apache.commons.math.linear.RealMatrix, org.apache.commons.math.linear.RealMatrix, double):::ENTER
expected.getClass().getName() == observed.getClass().getName()
msg.toString one of { "Correlation matrix", "correlation matrix", "correlation p values" }
expected.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
tolerance one of { 4.9E-324, 1.0E-14 }
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, org.apache.commons.math.linear.RealMatrix, org.apache.commons.math.linear.RealMatrix, double):::EXIT
msg.toString == orig(msg.toString)
msg.toString one of { "Correlation matrix", "correlation matrix", "correlation p values" }
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::CLASS
org.apache.commons.math.distribution.AbstractContinuousDistribution.serialVersionUID == org.apache.commons.math.distribution.AbstractDistribution.serialVersionUID
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
this.solverAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl:::CLASS
org.apache.commons.math.distribution.AbstractContinuousDistribution.serialVersionUID == org.apache.commons.math.distribution.AbstractDistribution.serialVersionUID
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl:::OBJECT
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == this.solverAbsoluteAccuracy
this.degreesOfFreedom >= 0.0
this.solverAbsoluteAccuracy == 1.0E-9
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY <= this.degreesOfFreedom
this.degreesOfFreedom % org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == 0
this.degreesOfFreedom >= this.solverAbsoluteAccuracy
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double):::ENTER
degreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double):::EXIT
this.degreesOfFreedom == orig(degreesOfFreedom)
this.degreesOfFreedom >= 1.0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < this.degreesOfFreedom
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double, double):::ENTER
degreesOfFreedom >= 1.0
inverseCumAccuracy == 1.0E-9
degreesOfFreedom > inverseCumAccuracy
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double, double):::EXIT
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == orig(inverseCumAccuracy)
this.degreesOfFreedom == orig(degreesOfFreedom)
this.degreesOfFreedom >= 1.0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < this.degreesOfFreedom
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double):::ENTER
this.degreesOfFreedom one of { 14.0, 45.0, 118.0 }
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < this.degreesOfFreedom
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % x == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY > x
x % org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == 0
this.degreesOfFreedom > x
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
this.degreesOfFreedom one of { 14.0, 45.0, 118.0 }
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < this.degreesOfFreedom
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY != return
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % return == 0
return % org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == 0
this.degreesOfFreedom > return
this.degreesOfFreedom > orig(x)
return > orig(x)
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double):::ENTER
this.degreesOfFreedom >= 1.0
degreesOfFreedom >= 1.0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % this.degreesOfFreedom == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < this.degreesOfFreedom
degreesOfFreedom % org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % degreesOfFreedom == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < degreesOfFreedom
this.degreesOfFreedom <= degreesOfFreedom
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double):::EXIT
this.degreesOfFreedom == orig(degreesOfFreedom)
this.degreesOfFreedom >= 1.0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % this.degreesOfFreedom == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < this.degreesOfFreedom
this.degreesOfFreedom >= orig(this.degreesOfFreedom)
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedomInternal(double):::ENTER
newDegreesOfFreedom >= 1.0
newDegreesOfFreedom % org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % newDegreesOfFreedom == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < newDegreesOfFreedom
this.degreesOfFreedom <= newDegreesOfFreedom
this.solverAbsoluteAccuracy % newDegreesOfFreedom == 0
this.solverAbsoluteAccuracy < newDegreesOfFreedom
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedomInternal(double):::EXIT
this.degreesOfFreedom == orig(newDegreesOfFreedom)
this.solverAbsoluteAccuracy == orig(this.solverAbsoluteAccuracy)
this.degreesOfFreedom >= 1.0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY % this.degreesOfFreedom == 0
org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY < this.degreesOfFreedom
this.degreesOfFreedom > this.solverAbsoluteAccuracy
this.solverAbsoluteAccuracy % this.degreesOfFreedom == 0
this.degreesOfFreedom >= orig(this.degreesOfFreedom)
this.solverAbsoluteAccuracy <= orig(this.degreesOfFreedom)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::ENTER
rowDimension >= 2
rowDimension >= columnDimension
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix:::OBJECT
this.blockRows == size(this.blocks[])
this.blocks != null
this.blocks.getClass().getName() == double[][].class
this.blocks[] elements != null
this.blockRows one of { 1, 3 }
this.blockColumns == 1
this.lu == null
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE != this.rows
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > this.columns
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > this.blockRows
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > this.rows
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > this.columns
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > this.blockRows
this.rows >= this.columns
this.rows % this.blockRows == 0
this.rows > this.blockRows
this.rows > this.blockColumns
this.columns >= this.blockColumns
size(this.blocks[])-1 % this.columns == 0
this.columns >= size(this.blocks[])-1
this.blockRows >= this.blockColumns
this.blockColumns != size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(double[][]):::ENTER
rawData.getClass().getName() == double[][].class
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(double[][]):::EXIT
this.blocks.getClass().getName() == orig(rawData.getClass().getName())
this.rows == orig(size(rawData[]))
rawData[] == orig(rawData[])
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE != size(rawData[])-1
this.blockRows <= size(rawData[])-1
this.blockColumns <= size(rawData[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int):::ENTER
rows one of { 2, 5, 7 }
rows % columns == 0
rows >= columns
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int):::EXIT
this.rows == orig(rows)
this.columns == orig(columns)
this.blockRows == this.blockColumns
this.rows one of { 2, 5, 7 }
this.blockRows == 1
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > this.rows
this.blocks[] elements == this.blocks[this.blockRows-1]
this.rows % this.columns == 0
this.columns >= this.blockRows
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int, double[][], boolean):::ENTER
blockData.getClass().getName() == double[][].class
copyArray == false
size(blockData[]) one of { 1, 3 }
rows >= columns
rows % size(blockData[]) == 0
rows > size(blockData[])
columns >= size(blockData[])-1
size(blockData[])-1 % columns == 0
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int, double[][], boolean):::EXIT
this.blocks == orig(blockData)
this.blocks.getClass().getName() == orig(blockData.getClass().getName())
this.blocks[] == blockData[]
this.rows == orig(rows)
this.columns == orig(columns)
this.blockRows == orig(size(blockData[]))
blockData[] == orig(blockData[])
size(blockData[])-1 % this.columns == 0
this.columns >= size(blockData[])-1
this.blockColumns != size(blockData[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockHeight(int):::ENTER
blockRow one of { 0, 1, 2 }
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > blockRow
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > blockRow
this.rows > blockRow
this.columns >= blockRow
blockRow <= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockHeight(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockRows == orig(size(this.blocks[]))
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE >= return
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > return
this.rows >= return
this.rows > orig(blockRow)
this.columns <= return
this.columns >= orig(blockRow)
this.blockRows < return
this.blockColumns < return
return > orig(blockRow)
orig(blockRow) <= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockWidth(int):::ENTER
this.blocks[this.blockColumns-1] == this.blocks[blockColumn]
blockColumn == 0
this.rows > blockColumn
this.columns > blockColumn
blockColumn <= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockWidth(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == return
this.blockRows == orig(this.blockRows)
this.blockRows == orig(size(this.blocks[]))
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return == orig(this.columns)
this.blocks[this.blockColumns-1] == this.blocks[orig(blockColumn)]
this.blocks[orig(this.blockColumns)-1] == this.blocks[orig(blockColumn)]
this.blocks[orig(blockColumn)] == orig(this.blocks[post(this.blockColumns)-1])
this.blocks[orig(blockColumn)] == orig(this.blocks[this.blockColumns-1])
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > return
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > return
this.rows >= return
this.rows > orig(blockColumn)
this.blockColumns <= return
return > orig(blockColumn)
return >= size(this.blocks[])-1
size(this.blocks[])-1 % return == 0
orig(blockColumn) <= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.copy():::ENTER
this.columns == this.blockRows
this.columns == this.blockColumns
this.columns == size(this.blocks[])
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 1
this.blocks[] elements has only one value
this.rows == 2
this.columns == 1
this.blocks[] elements == this.blocks[this.columns-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.copy():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == return.blocks.getClass().getName()
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == return.rows
this.rows == orig(this.rows)
this.columns == this.blockRows
this.columns == this.blockColumns
this.columns == return.columns
this.columns == return.blockRows
this.columns == return.blockColumns
this.columns == orig(this.columns)
this.columns == orig(this.blockRows)
this.columns == orig(this.blockColumns)
this.columns == size(this.blocks[])
this.columns == size(return.blocks[])
this.columns == orig(size(this.blocks[]))
this.lu == return.lu
this.lu == orig(this.lu)
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 1
this.blocks[] elements has only one value
this.rows == 2
this.columns == 1
return has only one value
return.blocks has only one value
return.blocks[] contains no nulls and has only one value, of length 1
return.blocks[] elements has only one value
this.blocks[] elements == this.blocks[this.columns-1]
return.blocks[] elements == return.blocks[this.columns-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.createBlocksLayout(int, int):::ENTER
rows one of { 2, 5, 7 }
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > rows
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > columns
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > rows
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > columns
rows % columns == 0
rows >= columns
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.createBlocksLayout(int, int):::EXIT
return != null
return.getClass().getName() == double[][].class
return[] elements != null
size(return[]) == 1
orig(rows) > size(return[])
orig(columns) >= size(return[])
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumn(int):::ENTER
column >= 0
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > column
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > column
this.rows > this.columns
this.rows > column
this.columns > column
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumn(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.rows == size(return[])
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockRows == orig(size(this.blocks[]))
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return != null
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE != size(return[])-1
this.columns > orig(column)
this.columns <= size(return[])-1
this.blockRows <= size(return[])-1
this.blockColumns <= size(return[])-1
orig(column) < size(return[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumnDimension():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == return
this.blockRows == orig(this.blockRows)
this.blockRows == orig(size(this.blocks[]))
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return == orig(this.columns)
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > return
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > return
this.rows >= return
this.blockColumns <= return
return >= size(this.blocks[])-1
size(this.blocks[])-1 % return == 0
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getData():::ENTER
this.blockRows == this.blockColumns
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 1
this.blocks[] elements has only one value
this.rows == 16
this.columns == 7
this.blockRows == 1
this.blocks[] elements == this.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getData():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == return.getClass().getName()
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.rows == size(return[])
this.columns == orig(this.columns)
this.blockRows == this.blockColumns
this.blockRows == orig(this.blockRows)
this.blockRows == orig(this.blockColumns)
this.blockRows == orig(size(this.blocks[]))
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 1
this.blocks[] elements has only one value
this.rows == 16
this.columns == 7
this.blockRows == 1
return has only one value
return.getClass().getName() == double[][].class
return[] contains no nulls and has only one value, of length 16
return[this.rows-1] has only one value
return[this.columns] has only one value
return[this.columns-1] has only one value
return[this.blockRows] has only one value
return[this.blockRows-1] has only one value
this.blocks[] elements == this.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getEntry(int, int):::ENTER
this.rows == this.columns
this.blockRows == this.blockColumns
this.rows one of { 2, 5, 7 }
this.blockRows == 1
row >= 0
column >= 0
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > this.rows
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > row
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > column
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > row
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > column
this.blocks[] elements == this.blocks[this.blockRows-1]
this.rows > row
this.rows > column
row != column
row >= size(this.blocks[])-1
column >= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getEntry(int, int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == this.columns
this.rows == orig(this.rows)
this.rows == orig(this.columns)
this.blockRows == this.blockColumns
this.blockRows == orig(this.blockRows)
this.blockRows == orig(this.blockColumns)
this.blockRows == orig(size(this.blocks[]))
this.lu == orig(this.lu)
this.rows one of { 2, 5, 7 }
this.blockRows == 1
return != 0
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > this.rows
this.blocks[] elements == this.blocks[this.blockRows-1]
this.rows > orig(row)
this.rows > orig(column)
orig(row) >= size(this.blocks[])-1
orig(column) >= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getNorm():::ENTER
this.rows == this.columns
this.blockRows == this.blockColumns
this.rows one of { 5, 7 }
this.blockRows == 1
this.blocks[] elements == this.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getNorm():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == this.columns
this.rows == orig(this.rows)
this.rows == orig(this.columns)
this.blockRows == this.blockColumns
this.blockRows == orig(this.blockRows)
this.blockRows == orig(this.blockColumns)
this.blockRows == orig(size(this.blocks[]))
this.lu == orig(this.lu)
this.rows one of { 5, 7 }
this.blockRows == 1
this.blocks[] elements == this.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getRowDimension():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == return
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockRows == orig(size(this.blocks[]))
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return == orig(this.rows)
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE != return
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > return
this.columns <= return
return % this.blockRows == 0
this.blockRows < return
this.blockColumns < return
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.setColumn(int, double[]):::ENTER
this.rows == size(array[])
this.columns == this.blockRows
this.columns == this.blockColumns
this.columns == size(this.blocks[])
this.columns == size(array[])-1
column == size(this.blocks[])-1
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 1
this.blocks[] elements has only one value
this.rows == 2
array has only one value
array[] == [1.0, 2.0]
array[] elements one of { 1.0, 2.0 }
this.blocks[] elements == this.blocks[this.columns-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.setColumn(int, double[]):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.rows == orig(size(array[]))
this.columns == this.blockRows
this.columns == this.blockColumns
this.columns == orig(this.columns)
this.columns == orig(this.blockRows)
this.columns == orig(this.blockColumns)
this.columns == size(this.blocks[])
this.columns == size(array[])-1
this.columns == orig(size(this.blocks[]))
this.columns == orig(size(array[]))-1
this.lu == orig(this.lu)
array[] == orig(array[])
orig(column) == size(this.blocks[])-1
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 1
this.blocks[] elements has only one value
this.rows == 2
array[] == [1.0, 2.0]
array[] elements one of { 1.0, 2.0 }
this.blocks[] elements == this.blocks[orig(column)]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.setEntry(int, int, double):::ENTER
this.rows == this.columns
this.blockRows == this.blockColumns
this.rows one of { 2, 5, 7 }
this.blockRows == 1
row >= 0
column >= 0
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > this.rows
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > row
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > column
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > row
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > column
this.blocks[] elements == this.blocks[this.blockRows-1]
this.rows > row
this.rows > column
row >= size(this.blocks[])-1
column >= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.setEntry(int, int, double):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == this.columns
this.rows == orig(this.rows)
this.rows == orig(this.columns)
this.blockRows == this.blockColumns
this.blockRows == orig(this.blockRows)
this.blockRows == orig(this.blockColumns)
this.blockRows == orig(size(this.blocks[]))
this.lu == orig(this.lu)
this.rows one of { 2, 5, 7 }
this.blockRows == 1
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > this.rows
this.blocks[] elements == this.blocks[this.blockRows-1]
this.rows > orig(row)
this.rows > orig(column)
orig(row) >= size(this.blocks[])-1
orig(column) >= size(this.blocks[])-1
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.subtract(org.apache.commons.math.linear.BlockRealMatrix):::ENTER
this.blocks.getClass().getName() == m.blocks.getClass().getName()
this.rows == this.columns
this.rows == m.rows
this.rows == m.columns
this.blockRows == this.blockColumns
this.blockRows == m.blockRows
this.blockRows == m.blockColumns
this.blockRows == size(m.blocks[])
this.lu == m.lu
this.rows one of { 5, 7 }
this.blockRows == 1
this.blocks[] elements == this.blocks[this.blockRows-1]
m.blocks[] elements == m.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.subtract(org.apache.commons.math.linear.BlockRealMatrix):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == m.blocks.getClass().getName()
this.blocks.getClass().getName() == return.blocks.getClass().getName()
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks.getClass().getName() == orig(m.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == this.columns
this.rows == m.rows
this.rows == m.columns
this.rows == return.rows
this.rows == return.columns
this.rows == orig(this.rows)
this.rows == orig(this.columns)
this.rows == orig(m.rows)
this.rows == orig(m.columns)
this.blockRows == this.blockColumns
this.blockRows == m.blockRows
this.blockRows == m.blockColumns
this.blockRows == return.blockRows
this.blockRows == return.blockColumns
this.blockRows == orig(this.blockRows)
this.blockRows == orig(this.blockColumns)
this.blockRows == orig(m.blockRows)
this.blockRows == orig(m.blockColumns)
this.blockRows == size(m.blocks[])
this.blockRows == size(return.blocks[])
this.blockRows == orig(size(this.blocks[]))
this.blockRows == orig(size(m.blocks[]))
this.lu == m.lu
this.lu == return.lu
this.lu == orig(this.lu)
this.lu == orig(m.lu)
m.blocks == orig(m.blocks)
m.blocks[] == orig(m.blocks[])
this.rows one of { 5, 7 }
this.blockRows == 1
this.blocks[] elements == this.blocks[this.blockRows-1]
m.blocks[] elements == m.blocks[this.blockRows-1]
return.blocks[] elements == return.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.subtract(org.apache.commons.math.linear.RealMatrix):::ENTER
this.rows == this.columns
this.blockRows == this.blockColumns
this.rows one of { 5, 7 }
this.blockRows == 1
m.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
this.blocks[] elements == this.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.subtract(org.apache.commons.math.linear.RealMatrix):::EXIT390
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.subtract(org.apache.commons.math.linear.RealMatrix):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == return.blocks.getClass().getName()
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == this.columns
this.rows == return.rows
this.rows == return.columns
this.rows == orig(this.rows)
this.rows == orig(this.columns)
this.blockRows == this.blockColumns
this.blockRows == return.blockRows
this.blockRows == return.blockColumns
this.blockRows == orig(this.blockRows)
this.blockRows == orig(this.blockColumns)
this.blockRows == size(return.blocks[])
this.blockRows == orig(size(this.blocks[]))
this.lu == return.lu
this.lu == orig(this.lu)
this.rows one of { 5, 7 }
this.blockRows == 1
this.blocks[] elements == this.blocks[this.blockRows-1]
return.blocks[] elements == return.blocks[this.blockRows-1]
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.toBlocksLayout(double[][]):::ENTER
rawData.getClass().getName() == double[][].class
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE != size(rawData[])
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE != size(rawData[])-1
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > size(rawData[])
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.toBlocksLayout(double[][]):::EXIT
rawData[] == orig(rawData[])
return.getClass().getName() == orig(rawData.getClass().getName())
return.getClass().getName() == double[][].class
size(return[]) one of { 1, 3 }
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE != size(rawData[])-1
org.apache.commons.math.linear.BlockRealMatrix.BLOCK_SIZE > size(return[])
org.apache.commons.math.linear.BlockRealMatrix.serialVersionUID > size(return[])
size(rawData[])-1 >= size(return[])
orig(size(rawData[])) % size(return[]) == 0
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::ENTER
m != null
m.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
column >= 0
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkSubtractionCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::ENTER
left.getClass().getName() == right.getClass().getName()
left.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkSubtractionCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::EXIT
===========================================================================
org.apache.commons.math.special.Beta$1:::CLASS
===========================================================================
org.apache.commons.math.special.Beta$1:::OBJECT
this.val$b one of { 0.5, 7.0, 22.5 }
this.val$b != this.val$a
this.val$b > org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON
this.val$a > org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON
===========================================================================
org.apache.commons.math.special.Beta$1.(double, double):::ENTER
$hidden$1 one of { 0.5, 7.0, 22.5 }
$hidden$3 >= 0.5
$hidden$1 != $hidden$3
===========================================================================
org.apache.commons.math.special.Beta$1.(double, double):::EXIT
this.val$b == orig($hidden$1)
this.val$a == orig($hidden$3)
===========================================================================
org.apache.commons.math.special.Beta$1.getA(int, double):::ENTER
n >= 0
this.val$b != x
this.val$a > x
org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON < x
x % org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON == 0
===========================================================================
org.apache.commons.math.special.Beta$1.getA(int, double):::EXIT
this.val$b == orig(this.val$b)
this.val$a == orig(this.val$a)
return == 1.0
this.val$b != return
this.val$b != orig(x)
this.val$a != return
this.val$a > orig(x)
return > orig(x)
===========================================================================
org.apache.commons.math.special.Beta$1.getB(int, double):::ENTER
n >= 1
this.val$b != x
this.val$a > x
org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON < x
x % org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON == 0
===========================================================================
org.apache.commons.math.special.Beta$1.getB(int, double):::EXIT
this.val$b == orig(this.val$b)
this.val$a == orig(this.val$a)
return != 0
this.val$b > return
this.val$b != orig(x)
this.val$a > return
this.val$a > orig(x)
org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON != return
return % org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON == 0
return != orig(x)
===========================================================================
org.apache.commons.math.special.Beta:::CLASS
===========================================================================
org.apache.commons.math.special.Beta.logBeta(double, double, double, int):::ENTER
org.apache.commons.math.special.Beta.DEFAULT_EPSILON == epsilon
a >= 0.5
b one of { 0.5, 7.0, 22.5 }
maxIterations == 2147483647
org.apache.commons.math.special.Beta.DEFAULT_EPSILON < a
org.apache.commons.math.special.Beta.DEFAULT_EPSILON < b
a != b
===========================================================================
org.apache.commons.math.special.Beta.logBeta(double, double, double, int):::EXIT
return one of { -1.4642851603178428, -0.9788376131017458, -0.38274808182393105 }
org.apache.commons.math.special.Beta.DEFAULT_EPSILON > return
return < orig(a)
return < orig(b)
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double):::ENTER
a one of { 7.0, 22.5, 59.0 }
b == 0.5
org.apache.commons.math.special.Beta.DEFAULT_EPSILON % x == 0
org.apache.commons.math.special.Beta.DEFAULT_EPSILON < x
x % org.apache.commons.math.special.Beta.DEFAULT_EPSILON == 0
org.apache.commons.math.special.Beta.DEFAULT_EPSILON < a
x < a
x != b
a > b
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double):::EXIT
org.apache.commons.math.special.Beta.DEFAULT_EPSILON != return
org.apache.commons.math.special.Beta.DEFAULT_EPSILON % return == 0
return % org.apache.commons.math.special.Beta.DEFAULT_EPSILON == 0
return < orig(x)
return < orig(a)
return != orig(b)
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int):::ENTER
org.apache.commons.math.special.Beta.DEFAULT_EPSILON == epsilon
a >= 0.5
b one of { 0.5, 7.0, 22.5 }
maxIterations == 2147483647
org.apache.commons.math.special.Beta.DEFAULT_EPSILON % x == 0
org.apache.commons.math.special.Beta.DEFAULT_EPSILON < x
x % org.apache.commons.math.special.Beta.DEFAULT_EPSILON == 0
org.apache.commons.math.special.Beta.DEFAULT_EPSILON < a
org.apache.commons.math.special.Beta.DEFAULT_EPSILON < b
x < a
x != b
a != b
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int):::EXIT
org.apache.commons.math.special.Beta.DEFAULT_EPSILON != return
org.apache.commons.math.special.Beta.DEFAULT_EPSILON % return == 0
return % org.apache.commons.math.special.Beta.DEFAULT_EPSILON == 0
return != orig(x)
return != orig(a)
return != orig(b)
===========================================================================
org.apache.commons.math.special.Gamma:::CLASS
org.apache.commons.math.special.Gamma.LANCZOS has only one value
org.apache.commons.math.special.Gamma.LANCZOS != null
org.apache.commons.math.special.Gamma.LANCZOS[] == [0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6]
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == 0.9189385332046727
size(org.apache.commons.math.special.Gamma.LANCZOS[]) == 15
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::ENTER
x >= 0.5
org.apache.commons.math.special.Gamma.GAMMA != x
org.apache.commons.math.special.Gamma.DEFAULT_EPSILON % x == 0
org.apache.commons.math.special.Gamma.DEFAULT_EPSILON < x
x % org.apache.commons.math.special.Gamma.DEFAULT_EPSILON == 0
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI != x
org.apache.commons.math.special.Gamma.C_LIMIT != x
org.apache.commons.math.special.Gamma.S_LIMIT < x
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::EXIT
org.apache.commons.math.special.Gamma.LANCZOS == orig(org.apache.commons.math.special.Gamma.LANCZOS)
org.apache.commons.math.special.Gamma.LANCZOS[] == orig(org.apache.commons.math.special.Gamma.LANCZOS[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return >= 0.5723649429247
org.apache.commons.math.special.Gamma.GAMMA != return
org.apache.commons.math.special.Gamma.DEFAULT_EPSILON % return == 0
org.apache.commons.math.special.Gamma.DEFAULT_EPSILON < return
return % org.apache.commons.math.special.Gamma.DEFAULT_EPSILON == 0
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI != return
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI != orig(x)
org.apache.commons.math.special.Gamma.C_LIMIT != return
org.apache.commons.math.special.Gamma.S_LIMIT < return
return != orig(x)
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation:::OBJECT
this.correlationMatrix.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
this.nObs >= 0
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation():::EXIT
this.correlationMatrix == null
this.nObs == 0
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation(double[][]):::ENTER
data has only one value
data.getClass().getName() == double[][].class
data[] contains no nulls and has only one value, of length 120
size(data[]) == 120
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation(double[][]):::EXIT
this.nObs == orig(size(data[]))
data[] == orig(data[])
this.correlationMatrix has only one value
this.nObs == 120
data[] contains no nulls and has only one value, of length 120
data[this.nObs-1] has only one value
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation(org.apache.commons.math.linear.RealMatrix):::ENTER
matrix.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation(org.apache.commons.math.linear.RealMatrix):::EXIT
this.correlationMatrix.getClass().getName() == orig(matrix.getClass().getName())
this.nObs one of { 16, 47, 120 }
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.checkSufficientData(org.apache.commons.math.linear.RealMatrix):::ENTER
this.correlationMatrix == null
this.nObs == 0
matrix.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.checkSufficientData(org.apache.commons.math.linear.RealMatrix):::EXIT
this.correlationMatrix == orig(this.correlationMatrix)
this.nObs == orig(this.nObs)
this.correlationMatrix == null
this.nObs == 0
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.computeCorrelationMatrix(double[][]):::ENTER
this has only one value
this.correlationMatrix == null
this.nObs == 0
data has only one value
data.getClass().getName() == double[][].class
data[] contains no nulls and has only one value, of length 16
size(data[]) == 16
data[this.nObs] has only one value
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.computeCorrelationMatrix(double[][]):::EXIT
this.correlationMatrix == orig(this.correlationMatrix)
this.nObs == orig(this.nObs)
data[] == orig(data[])
this.correlationMatrix == null
this.nObs == 0
data[] contains no nulls and has only one value, of length 16
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
data[this.nObs] has only one value
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.computeCorrelationMatrix(org.apache.commons.math.linear.RealMatrix):::ENTER
this.correlationMatrix == null
matrix.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.computeCorrelationMatrix(org.apache.commons.math.linear.RealMatrix):::EXIT
this.correlationMatrix == orig(this.correlationMatrix)
this.nObs == orig(this.nObs)
return.getClass().getName() == orig(matrix.getClass().getName())
this.correlationMatrix == null
return.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.correlation(double[], double[]):::ENTER
size(xArray[]) == size(yArray[])
this.correlationMatrix == null
xArray != null
xArray[] elements >= 1.0
yArray != null
this.nObs % size(xArray[]) == 0
this.nObs <= size(xArray[])
this.nObs != size(xArray[])-1
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.correlation(double[], double[]):::EXIT
this.correlationMatrix == orig(this.correlationMatrix)
this.nObs == orig(this.nObs)
xArray[] == orig(xArray[])
yArray[] == orig(yArray[])
this.correlationMatrix == null
xArray[] elements >= 1.0
return != 0
this.nObs != size(xArray[])-1
this.nObs % orig(size(xArray[])) == 0
this.nObs <= orig(size(xArray[]))
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.getCorrelationMatrix():::ENTER
this.nObs one of { 16, 47 }
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.getCorrelationMatrix():::EXIT
this.correlationMatrix == return
this.correlationMatrix.getClass().getName() == return.getClass().getName()
this.nObs == orig(this.nObs)
return == orig(this.correlationMatrix)
return.getClass().getName() == orig(this.correlationMatrix.getClass().getName())
this.nObs one of { 16, 47 }
return.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.getCorrelationPValues():::ENTER
this.nObs one of { 16, 47, 120 }
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelation.getCorrelationPValues():::EXIT
this.correlationMatrix == orig(this.correlationMatrix)
this.correlationMatrix.getClass().getName() == return.getClass().getName()
this.nObs == orig(this.nObs)
return.getClass().getName() == orig(this.correlationMatrix.getClass().getName())
this.nObs one of { 16, 47, 120 }
return.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest:::OBJECT
this.longleyData != null
this.longleyData[] == [60323.0, 83.0, 234289.0, 2356.0, 1590.0, 107608.0, 1947.0, 61122.0, 88.5, 259426.0, 2325.0, 1456.0, 108632.0, 1948.0, 60171.0, 88.2, 258054.0, 3682.0, 1616.0, 109773.0, 1949.0, 61187.0, 89.5, 284599.0, 3351.0, 1650.0, 110929.0, 1950.0, 63221.0, 96.2, 328975.0, 2099.0, 3099.0, 112075.0, 1951.0, 63639.0, 98.1, 346999.0, 1932.0, 3594.0, 113270.0, 1952.0, 64989.0, 99.0, 365385.0, 1870.0, 3547.0, 115094.0, 1953.0, 63761.0, 100.0, 363112.0, 3578.0, 3350.0, 116219.0, 1954.0, 66019.0, 101.2, 397469.0, 2904.0, 3048.0, 117388.0, 1955.0, 67857.0, 104.6, 419180.0, 2822.0, 2857.0, 118734.0, 1956.0, 68169.0, 108.4, 442769.0, 2936.0, 2798.0, 120445.0, 1957.0, 66513.0, 110.8, 444546.0, 4681.0, 2637.0, 121950.0, 1958.0, 68655.0, 112.6, 482704.0, 3813.0, 2552.0, 123366.0, 1959.0, 69564.0, 114.2, 502601.0, 3931.0, 2514.0, 125368.0, 1960.0, 69331.0, 115.7, 518173.0, 4806.0, 2572.0, 127852.0, 1961.0, 70551.0, 116.9, 554894.0, 4007.0, 2827.0, 130081.0, 1962.0]
this.swissData != null
this.swissData[] == [80.2, 17.0, 15.0, 12.0, 9.96, 83.1, 45.1, 6.0, 9.0, 84.84, 92.5, 39.7, 5.0, 5.0, 93.4, 85.8, 36.5, 12.0, 7.0, 33.77, 76.9, 43.5, 17.0, 15.0, 5.16, 76.1, 35.3, 9.0, 7.0, 90.57, 83.8, 70.2, 16.0, 7.0, 92.85, 92.4, 67.8, 14.0, 8.0, 97.16, 82.4, 53.3, 12.0, 7.0, 97.67, 82.9, 45.2, 16.0, 13.0, 91.38, 87.1, 64.5, 14.0, 6.0, 98.61, 64.1, 62.0, 21.0, 12.0, 8.52, 66.9, 67.5, 14.0, 7.0, 2.27, 68.9, 60.7, 19.0, 12.0, 4.43, 61.7, 69.3, 22.0, 5.0, 2.82, 68.3, 72.6, 18.0, 2.0, 24.2, 71.7, 34.0, 17.0, 8.0, 3.3, 55.7, 19.4, 26.0, 28.0, 12.11, 54.3, 15.2, 31.0, 20.0, 2.15, 65.1, 73.0, 19.0, 9.0, 2.84, 65.5, 59.8, 22.0, 10.0, 5.23, 65.0, 55.1, 14.0, 3.0, 4.52, 56.6, 50.9, 22.0, 12.0, 15.14, 57.4, 54.1, 20.0, 6.0, 4.2, 72.5, 71.2, 12.0, 1.0, 2.4, 74.2, 58.1, 14.0, 8.0, 5.23, 72.0, 63.5, 6.0, 3.0, 2.56, 60.5, 60.8, 16.0, 10.0, 7.72, 58.3, 26.8, 25.0, 19.0, 18.46, 65.4, 49.5, 15.0, 8.0, 6.1, 75.5, 85.9, 3.0, 2.0, 99.71, 69.3, 84.9, 7.0, 6.0, 99.68, 77.3, 89.7, 5.0, 2.0, 100.0, 70.5, 78.2, 12.0, 6.0, 98.96, 79.4, 64.9, 7.0, 3.0, 98.22, 65.0, 75.9, 9.0, 9.0, 99.06, 92.2, 84.6, 3.0, 3.0, 99.46, 79.3, 63.1, 13.0, 13.0, 96.83, 70.4, 38.4, 26.0, 12.0, 5.62, 65.7, 7.7, 29.0, 11.0, 13.79, 72.7, 16.7, 22.0, 13.0, 11.22, 64.4, 17.6, 35.0, 32.0, 16.92, 77.6, 37.6, 15.0, 7.0, 4.97, 67.6, 18.7, 25.0, 7.0, 8.65, 35.0, 1.2, 37.0, 53.0, 42.34, 44.7, 46.6, 16.0, 29.0, 50.43, 42.8, 27.7, 22.0, 29.0, 58.33]
this.swissData[] elements >= 1.0
size(this.longleyData[]) == 112
size(this.swissData[]) == 235
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.PearsonsCorrelationTest():::EXIT
this.fName == null
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.createLowerTriangularRealMatrix(double[], int):::ENTER
this.fName.toString one of { "testLongly", "testSwissFertility" }
data[] one of { [4.38904690369668E-10, 8.36353208910623E-12, 7.8159700933611E-14, 0.0472894097790304, 0.01030636128354301, 0.01316878049026582, 0.0749178049642416, 0.06971758330341182, 0.0830166169296545, 0.510948586323452, 3.693245043123738E-9, 4.327782576751815E-11, 1.167954621905665E-13, 0.00331028281967516, 0.1652293725106684, 3.95834476307755E-10, 1.114663916723657E-13, 1.332267629550188E-15, 0.00466039138541463, 0.1078477071581498, 7.771561172376096E-15], [0.01491720061472623, 9.45043734069043E-7, 9.95151527133974E-8, 3.658616965962355E-7, 1.304590105694471E-6, 4.811397236181847E-8, 0.001028523190118147, 0.005204433539191644, 2.588307925380906E-5, 0.301807756132683] }
dimension one of { 5, 7 }
size(data[]) one of { 10, 21 }
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.createLowerTriangularRealMatrix(double[], int):::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
data[] == orig(data[])
this.fName.toString one of { "testLongly", "testSwissFertility" }
data[] one of { [4.38904690369668E-10, 8.36353208910623E-12, 7.8159700933611E-14, 0.0472894097790304, 0.01030636128354301, 0.01316878049026582, 0.0749178049642416, 0.06971758330341182, 0.0830166169296545, 0.510948586323452, 3.693245043123738E-9, 4.327782576751815E-11, 1.167954621905665E-13, 0.00331028281967516, 0.1652293725106684, 3.95834476307755E-10, 1.114663916723657E-13, 1.332267629550188E-15, 0.00466039138541463, 0.1078477071581498, 7.771561172376096E-15], [0.01491720061472623, 9.45043734069043E-7, 9.95151527133974E-8, 3.658616965962355E-7, 1.304590105694471E-6, 4.811397236181847E-8, 0.001028523190118147, 0.005204433539191644, 2.588307925380906E-5, 0.301807756132683] }
return.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.createRealMatrix(double[], int, int):::ENTER
this.fName.toString one of { "testConsistency", "testLongly", "testSwissFertility" }
nCols one of { 5, 7 }
size(data[]) % nRows == 0
size(data[]) % nCols == 0
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.createRealMatrix(double[], int, int):::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
data[] == orig(data[])
this.fName.toString one of { "testConsistency", "testLongly", "testSwissFertility" }
return.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.fillUpper(org.apache.commons.math.linear.RealMatrix, double):::ENTER
this.fName.toString one of { "testLongly", "testSwissFertility" }
matrix.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
diagonalValue == 0.0
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.fillUpper(org.apache.commons.math.linear.RealMatrix, double):::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.fName.toString one of { "testLongly", "testSwissFertility" }
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testConsistency():::ENTER
this has only one value
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testConsistency"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testConsistency():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testConsistency"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testConstant():::ENTER
this has only one value
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testConstant"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testConstant():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testConstant"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testLongly():::ENTER
this has only one value
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testLongly"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testLongly():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testLongly"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero():::ENTER
this has only one value
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testPValueNearZero"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testPValueNearZero"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testSwissFertility():::ENTER
this has only one value
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testSwissFertility"
===========================================================================
org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testSwissFertility():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testSwissFertility"
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansCorrelation:::OBJECT
this.data.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
this.rankingAlgorithm.getClass().getName() == org.apache.commons.math.stat.ranking.NaturalRanking.class
this.rankCorrelation == null
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansCorrelation.SpearmansCorrelation():::EXIT
this.data == null
this.rankingAlgorithm has only one value
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansCorrelation.rankTransform(org.apache.commons.math.linear.RealMatrix):::ENTER
this.data == matrix
this.data.getClass().getName() == matrix.getClass().getName()
this has only one value
this.data has only one value
this.rankingAlgorithm has only one value
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansCorrelation.rankTransform(org.apache.commons.math.linear.RealMatrix):::EXIT
this.data == orig(this.data)
this.data == orig(matrix)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data.getClass().getName() == orig(matrix.getClass().getName())
this.rankingAlgorithm == orig(this.rankingAlgorithm)
this.rankingAlgorithm.getClass().getName() == orig(this.rankingAlgorithm.getClass().getName())
this.rankCorrelation == orig(this.rankCorrelation)
this.data has only one value
this.rankingAlgorithm has only one value
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests:::OBJECT
this.longleyData != null
this.longleyData[] == [60323.0, 83.0, 234289.0, 2356.0, 1590.0, 107608.0, 1947.0, 61122.0, 88.5, 259426.0, 2325.0, 1456.0, 108632.0, 1948.0, 60171.0, 88.2, 258054.0, 3682.0, 1616.0, 109773.0, 1949.0, 61187.0, 89.5, 284599.0, 3351.0, 1650.0, 110929.0, 1950.0, 63221.0, 96.2, 328975.0, 2099.0, 3099.0, 112075.0, 1951.0, 63639.0, 98.1, 346999.0, 1932.0, 3594.0, 113270.0, 1952.0, 64989.0, 99.0, 365385.0, 1870.0, 3547.0, 115094.0, 1953.0, 63761.0, 100.0, 363112.0, 3578.0, 3350.0, 116219.0, 1954.0, 66019.0, 101.2, 397469.0, 2904.0, 3048.0, 117388.0, 1955.0, 67857.0, 104.6, 419180.0, 2822.0, 2857.0, 118734.0, 1956.0, 68169.0, 108.4, 442769.0, 2936.0, 2798.0, 120445.0, 1957.0, 66513.0, 110.8, 444546.0, 4681.0, 2637.0, 121950.0, 1958.0, 68655.0, 112.6, 482704.0, 3813.0, 2552.0, 123366.0, 1959.0, 69564.0, 114.2, 502601.0, 3931.0, 2514.0, 125368.0, 1960.0, 69331.0, 115.7, 518173.0, 4806.0, 2572.0, 127852.0, 1961.0, 70551.0, 116.9, 554894.0, 4007.0, 2827.0, 130081.0, 1962.0]
this.swissData != null
this.swissData[] == [80.2, 17.0, 15.0, 12.0, 9.96, 83.1, 45.1, 6.0, 9.0, 84.84, 92.5, 39.7, 5.0, 5.0, 93.4, 85.8, 36.5, 12.0, 7.0, 33.77, 76.9, 43.5, 17.0, 15.0, 5.16, 76.1, 35.3, 9.0, 7.0, 90.57, 83.8, 70.2, 16.0, 7.0, 92.85, 92.4, 67.8, 14.0, 8.0, 97.16, 82.4, 53.3, 12.0, 7.0, 97.67, 82.9, 45.2, 16.0, 13.0, 91.38, 87.1, 64.5, 14.0, 6.0, 98.61, 64.1, 62.0, 21.0, 12.0, 8.52, 66.9, 67.5, 14.0, 7.0, 2.27, 68.9, 60.7, 19.0, 12.0, 4.43, 61.7, 69.3, 22.0, 5.0, 2.82, 68.3, 72.6, 18.0, 2.0, 24.2, 71.7, 34.0, 17.0, 8.0, 3.3, 55.7, 19.4, 26.0, 28.0, 12.11, 54.3, 15.2, 31.0, 20.0, 2.15, 65.1, 73.0, 19.0, 9.0, 2.84, 65.5, 59.8, 22.0, 10.0, 5.23, 65.0, 55.1, 14.0, 3.0, 4.52, 56.6, 50.9, 22.0, 12.0, 15.14, 57.4, 54.1, 20.0, 6.0, 4.2, 72.5, 71.2, 12.0, 1.0, 2.4, 74.2, 58.1, 14.0, 8.0, 5.23, 72.0, 63.5, 6.0, 3.0, 2.56, 60.5, 60.8, 16.0, 10.0, 7.72, 58.3, 26.8, 25.0, 19.0, 18.46, 65.4, 49.5, 15.0, 8.0, 6.1, 75.5, 85.9, 3.0, 2.0, 99.71, 69.3, 84.9, 7.0, 6.0, 99.68, 77.3, 89.7, 5.0, 2.0, 100.0, 70.5, 78.2, 12.0, 6.0, 98.96, 79.4, 64.9, 7.0, 3.0, 98.22, 65.0, 75.9, 9.0, 9.0, 99.06, 92.2, 84.6, 3.0, 3.0, 99.46, 79.3, 63.1, 13.0, 13.0, 96.83, 70.4, 38.4, 26.0, 12.0, 5.62, 65.7, 7.7, 29.0, 11.0, 13.79, 72.7, 16.7, 22.0, 13.0, 11.22, 64.4, 17.6, 35.0, 32.0, 16.92, 77.6, 37.6, 15.0, 7.0, 4.97, 67.6, 18.7, 25.0, 7.0, 8.65, 35.0, 1.2, 37.0, 53.0, 42.34, 44.7, 46.6, 16.0, 29.0, 50.43, 42.8, 27.7, 22.0, 29.0, 58.33]
this.swissData[] elements >= 1.0
size(this.longleyData[]) == 112
size(this.swissData[]) == 235
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.SpearmansRankCorrelationTestFailingTests():::EXIT
this.fName == null
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.setUp():::ENTER
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.setUp():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.tearDown():::ENTER
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.tearDown():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.testCovarianceConsistency():::ENTER
this has only one value
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testCovarianceConsistency"
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.testCovarianceConsistency():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testCovarianceConsistency"
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.testInsufficientData():::ENTER
this has only one value
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testInsufficientData"
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.testInsufficientData():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testInsufficientData"
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.testStdErrorConsistency():::ENTER
this has only one value
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testStdErrorConsistency"
===========================================================================
org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.testStdErrorConsistency():::EXIT
this.longleyData == orig(this.longleyData)
this.longleyData[] == orig(this.longleyData[])
this.swissData == orig(this.swissData)
this.swissData[] == orig(this.swissData[])
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
this.longleyData has only one value
this.swissData has only one value
this.fName has only one value
this.fName.toString == "testStdErrorConsistency"
===========================================================================
org.apache.commons.math.stat.ranking.NaNStrategy:::CLASS
org.apache.commons.math.stat.ranking.NaNStrategy.MINIMAL has only one value
org.apache.commons.math.stat.ranking.NaNStrategy.MAXIMAL has only one value
org.apache.commons.math.stat.ranking.NaNStrategy.REMOVED has only one value
org.apache.commons.math.stat.ranking.NaNStrategy.FIXED has only one value
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES has only one value
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES.getClass().getName() == org.apache.commons.math.stat.ranking.NaNStrategy[].class
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[].getClass().getName() == [org.apache.commons.math.stat.ranking.NaNStrategy, org.apache.commons.math.stat.ranking.NaNStrategy, org.apache.commons.math.stat.ranking.NaNStrategy, org.apache.commons.math.stat.ranking.NaNStrategy]
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[].getClass().getName() elements == org.apache.commons.math.stat.ranking.NaNStrategy.class
size(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]) == 4
org.apache.commons.math.stat.ranking.NaNStrategy.MINIMAL in org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.NaNStrategy.MAXIMAL in org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.NaNStrategy.REMOVED in org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.NaNStrategy.FIXED in org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]
===========================================================================
org.apache.commons.math.stat.ranking.NaNStrategy:::OBJECT
===========================================================================
org.apache.commons.math.stat.ranking.NaNStrategy.NaNStrategy(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math.stat.ranking.NaNStrategy.NaNStrategy(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math.stat.ranking.NaNStrategy.values():::ENTER
===========================================================================
org.apache.commons.math.stat.ranking.NaNStrategy.values():::EXIT
org.apache.commons.math.stat.ranking.NaNStrategy.MINIMAL == orig(org.apache.commons.math.stat.ranking.NaNStrategy.MINIMAL)
org.apache.commons.math.stat.ranking.NaNStrategy.MAXIMAL == orig(org.apache.commons.math.stat.ranking.NaNStrategy.MAXIMAL)
org.apache.commons.math.stat.ranking.NaNStrategy.REMOVED == orig(org.apache.commons.math.stat.ranking.NaNStrategy.REMOVED)
org.apache.commons.math.stat.ranking.NaNStrategy.FIXED == orig(org.apache.commons.math.stat.ranking.NaNStrategy.FIXED)
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES == orig(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES)
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES.getClass().getName() == return.getClass().getName()
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES.getClass().getName() == orig(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES.getClass().getName())
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[] == return[]
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[] == orig(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[])
return has only one value
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair:::OBJECT
this.value one of { 0.0, 1.0 }
this.position one of { 0, 1 }
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair.IntDoublePair(double, int):::ENTER
value one of { 0.0, 1.0 }
position one of { 0, 1 }
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair.IntDoublePair(double, int):::EXIT
this.value == orig(value)
this.position == orig(position)
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair.compareTo(org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair):::ENTER
this has only one value
this.value == 1.0
this.position == 1
other has only one value
other.value == 0.0
other.position == 0
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair.compareTo(org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair):::EXIT
this.value == orig(this.value)
this.position == return
other.value == orig(other.value)
other.position == orig(other.position)
return == orig(this.position)
this.value == 1.0
other.value == 0.0
other.position == 0
return == 1
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair.getPosition():::ENTER
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair.getPosition():::EXIT
this.value == orig(this.value)
this.position == return
return == orig(this.position)
return one of { 0, 1 }
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair.getValue():::ENTER
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair.getValue():::EXIT
this.value == return
this.position == orig(this.position)
return == orig(this.value)
return one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking:::CLASS
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY == org.apache.commons.math.stat.ranking.NaNStrategy.MAXIMAL
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY == org.apache.commons.math.stat.ranking.TiesStrategy.AVERAGE
size(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]) == size(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[])-1
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY has only one value
org.apache.commons.math.stat.ranking.NaNStrategy.MINIMAL has only one value
org.apache.commons.math.stat.ranking.NaNStrategy.REMOVED has only one value
org.apache.commons.math.stat.ranking.NaNStrategy.FIXED has only one value
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES has only one value
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES.getClass().getName() == org.apache.commons.math.stat.ranking.NaNStrategy[].class
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[].getClass().getName() == [org.apache.commons.math.stat.ranking.NaNStrategy, org.apache.commons.math.stat.ranking.NaNStrategy, org.apache.commons.math.stat.ranking.NaNStrategy, org.apache.commons.math.stat.ranking.NaNStrategy]
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[].getClass().getName() elements == org.apache.commons.math.stat.ranking.NaNStrategy.class
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.SEQUENTIAL has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.MINIMUM has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.MAXIMUM has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.RANDOM has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES.getClass().getName() == org.apache.commons.math.stat.ranking.TiesStrategy[].class
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[].getClass().getName() == [org.apache.commons.math.stat.ranking.TiesStrategy, org.apache.commons.math.stat.ranking.TiesStrategy, org.apache.commons.math.stat.ranking.TiesStrategy, org.apache.commons.math.stat.ranking.TiesStrategy, org.apache.commons.math.stat.ranking.TiesStrategy]
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[].getClass().getName() elements == org.apache.commons.math.stat.ranking.TiesStrategy.class
size(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]) == 5
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY in org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.NaNStrategy.MINIMAL in org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.NaNStrategy.REMOVED in org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.NaNStrategy.FIXED in org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY in org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.TiesStrategy.SEQUENTIAL in org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.TiesStrategy.MINIMUM in org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.TiesStrategy.MAXIMUM in org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.TiesStrategy.RANDOM in org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking:::OBJECT
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY == this.nanStrategy
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY == this.tiesStrategy
this.randomData == null
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking.NaturalRanking():::EXIT
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking.rank(double[]):::ENTER
this has only one value
data has only one value
data[] == [0.0, 1.0]
data[] elements one of { 0.0, 1.0 }
size(data[]) == 2
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking.rank(double[]):::EXIT
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY == orig(org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY)
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY == orig(org.apache.commons.math.stat.ranking.NaNStrategy.MAXIMAL)
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY == orig(this.nanStrategy)
org.apache.commons.math.stat.ranking.NaNStrategy.MINIMAL == orig(org.apache.commons.math.stat.ranking.NaNStrategy.MINIMAL)
org.apache.commons.math.stat.ranking.NaNStrategy.REMOVED == orig(org.apache.commons.math.stat.ranking.NaNStrategy.REMOVED)
org.apache.commons.math.stat.ranking.NaNStrategy.FIXED == orig(org.apache.commons.math.stat.ranking.NaNStrategy.FIXED)
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES == orig(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES)
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES.getClass().getName() == orig(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES.getClass().getName())
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[] == orig(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[])
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY == orig(org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY)
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY == orig(org.apache.commons.math.stat.ranking.TiesStrategy.AVERAGE)
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY == orig(this.tiesStrategy)
org.apache.commons.math.stat.ranking.TiesStrategy.SEQUENTIAL == orig(org.apache.commons.math.stat.ranking.TiesStrategy.SEQUENTIAL)
org.apache.commons.math.stat.ranking.TiesStrategy.MINIMUM == orig(org.apache.commons.math.stat.ranking.TiesStrategy.MINIMUM)
org.apache.commons.math.stat.ranking.TiesStrategy.MAXIMUM == orig(org.apache.commons.math.stat.ranking.TiesStrategy.MAXIMUM)
org.apache.commons.math.stat.ranking.TiesStrategy.RANDOM == orig(org.apache.commons.math.stat.ranking.TiesStrategy.RANDOM)
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES == orig(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES)
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES.getClass().getName() == orig(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES.getClass().getName())
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[] == orig(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[])
this.randomData == orig(this.randomData)
data[] == orig(data[])
size(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]) == orig(size(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]))-1
size(return[]) == orig(size(data[]))
data[] == [0.0, 1.0]
data[] elements one of { 0.0, 1.0 }
return has only one value
return[] == [1.0, 2.0]
return[] elements one of { 1.0, 2.0 }
size(return[]) == 2
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking.recodeNaNs(org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair[], double):::ENTER
this has only one value
ranks has only one value
ranks.getClass().getName() == org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair[].class
ranks[] contains no nulls and has only one value, of length 2
ranks[].value == [0.0, 1.0]
ranks[].value elements one of { 0.0, 1.0 }
ranks[].position == [0, 1]
ranks[].position elements one of { 0, 1 }
value == Infinity
size(ranks[]) == 2
size(ranks[])-1 in ranks[].position
===========================================================================
org.apache.commons.math.stat.ranking.NaturalRanking.recodeNaNs(org.apache.commons.math.stat.ranking.NaturalRanking$IntDoublePair[], double):::EXIT
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY == orig(org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY)
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY == orig(org.apache.commons.math.stat.ranking.NaNStrategy.MAXIMAL)
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_NAN_STRATEGY == orig(this.nanStrategy)
org.apache.commons.math.stat.ranking.NaNStrategy.MINIMAL == orig(org.apache.commons.math.stat.ranking.NaNStrategy.MINIMAL)
org.apache.commons.math.stat.ranking.NaNStrategy.REMOVED == orig(org.apache.commons.math.stat.ranking.NaNStrategy.REMOVED)
org.apache.commons.math.stat.ranking.NaNStrategy.FIXED == orig(org.apache.commons.math.stat.ranking.NaNStrategy.FIXED)
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES == orig(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES)
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES.getClass().getName() == orig(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES.getClass().getName())
org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[] == orig(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[])
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY == orig(org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY)
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY == orig(org.apache.commons.math.stat.ranking.TiesStrategy.AVERAGE)
org.apache.commons.math.stat.ranking.NaturalRanking.DEFAULT_TIES_STRATEGY == orig(this.tiesStrategy)
org.apache.commons.math.stat.ranking.TiesStrategy.SEQUENTIAL == orig(org.apache.commons.math.stat.ranking.TiesStrategy.SEQUENTIAL)
org.apache.commons.math.stat.ranking.TiesStrategy.MINIMUM == orig(org.apache.commons.math.stat.ranking.TiesStrategy.MINIMUM)
org.apache.commons.math.stat.ranking.TiesStrategy.MAXIMUM == orig(org.apache.commons.math.stat.ranking.TiesStrategy.MAXIMUM)
org.apache.commons.math.stat.ranking.TiesStrategy.RANDOM == orig(org.apache.commons.math.stat.ranking.TiesStrategy.RANDOM)
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES == orig(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES)
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES.getClass().getName() == orig(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES.getClass().getName())
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[] == orig(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[])
this.randomData == orig(this.randomData)
ranks[] == orig(ranks[])
ranks[].value == orig(ranks[].value)
ranks[].position == orig(ranks[].position)
size(org.apache.commons.math.stat.ranking.NaNStrategy.$VALUES[]) == orig(size(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]))-1
ranks[] contains no nulls and has only one value, of length 2
ranks[].value == [0.0, 1.0]
ranks[].value elements one of { 0.0, 1.0 }
ranks[].position == [0, 1]
ranks[].position elements one of { 0, 1 }
size(ranks[])-1 in ranks[].position
===========================================================================
org.apache.commons.math.stat.ranking.TiesStrategy:::CLASS
org.apache.commons.math.stat.ranking.TiesStrategy.SEQUENTIAL has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.MINIMUM has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.MAXIMUM has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.AVERAGE has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.RANDOM has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES has only one value
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES.getClass().getName() == org.apache.commons.math.stat.ranking.TiesStrategy[].class
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[].getClass().getName() == [org.apache.commons.math.stat.ranking.TiesStrategy, org.apache.commons.math.stat.ranking.TiesStrategy, org.apache.commons.math.stat.ranking.TiesStrategy, org.apache.commons.math.stat.ranking.TiesStrategy, org.apache.commons.math.stat.ranking.TiesStrategy]
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[].getClass().getName() elements == org.apache.commons.math.stat.ranking.TiesStrategy.class
size(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]) == 5
org.apache.commons.math.stat.ranking.TiesStrategy.SEQUENTIAL in org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.TiesStrategy.MINIMUM in org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.TiesStrategy.MAXIMUM in org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.TiesStrategy.AVERAGE in org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]
org.apache.commons.math.stat.ranking.TiesStrategy.RANDOM in org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[]
===========================================================================
org.apache.commons.math.stat.ranking.TiesStrategy:::OBJECT
===========================================================================
org.apache.commons.math.stat.ranking.TiesStrategy.TiesStrategy(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math.stat.ranking.TiesStrategy.TiesStrategy(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math.stat.ranking.TiesStrategy.values():::ENTER
===========================================================================
org.apache.commons.math.stat.ranking.TiesStrategy.values():::EXIT
org.apache.commons.math.stat.ranking.TiesStrategy.SEQUENTIAL == orig(org.apache.commons.math.stat.ranking.TiesStrategy.SEQUENTIAL)
org.apache.commons.math.stat.ranking.TiesStrategy.MINIMUM == orig(org.apache.commons.math.stat.ranking.TiesStrategy.MINIMUM)
org.apache.commons.math.stat.ranking.TiesStrategy.MAXIMUM == orig(org.apache.commons.math.stat.ranking.TiesStrategy.MAXIMUM)
org.apache.commons.math.stat.ranking.TiesStrategy.AVERAGE == orig(org.apache.commons.math.stat.ranking.TiesStrategy.AVERAGE)
org.apache.commons.math.stat.ranking.TiesStrategy.RANDOM == orig(org.apache.commons.math.stat.ranking.TiesStrategy.RANDOM)
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES == orig(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES)
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES.getClass().getName() == return.getClass().getName()
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES.getClass().getName() == orig(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES.getClass().getName())
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[] == return[]
org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[] == orig(org.apache.commons.math.stat.ranking.TiesStrategy.$VALUES[])
return has only one value
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression:::CLASS
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
this.sumX >= 0.0
this.sumXX >= 0.0
this.sumY >= 0.0
this.sumYY >= 0.0
this.n >= 0
this.xbar >= 0.0
this.ybar >= 0.0
org.apache.commons.math.stat.regression.SimpleRegression.serialVersionUID < this.n
this.sumX >= this.xbar
this.sumY >= this.ybar
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression():::EXIT
this.sumX == this.sumXX
this.sumX == this.sumY
this.sumX == this.sumYY
this.sumX == this.sumXY
this.sumX == this.xbar
this.sumX == this.ybar
this.distribution != null
this.sumX == 0.0
this.n == 0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(org.apache.commons.math.distribution.TDistribution):::ENTER
t != null
t.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(org.apache.commons.math.distribution.TDistribution):::EXIT
this.distribution == orig(t)
this.distribution.getClass().getName() == orig(t.getClass().getName())
this.sumX == this.sumXX
this.sumX == this.sumY
this.sumX == this.sumYY
this.sumX == this.sumXY
this.sumX == this.xbar
this.sumX == this.ybar
this.distribution != null
this.sumX == 0.0
this.n == 0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double, double):::ENTER
this.distribution != null
x >= 1.0
this.sumXX != x
this.sumYY != x
this.sumXY != x
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double, double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.distribution != null
this.n >= 1
this.xbar >= 1.0
this.sumX != this.sumXX
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > orig(this.sumX)
this.sumX != orig(this.sumXX)
this.sumX != orig(this.sumYY)
this.sumX != orig(this.sumXY)
this.sumX > orig(this.xbar)
this.sumX != orig(this.ybar)
this.sumX >= orig(x)
this.sumXX != this.xbar
this.sumXX >= orig(this.sumXX)
this.sumXX != orig(x)
this.sumY >= orig(this.sumY)
this.sumY >= orig(this.ybar)
this.sumY >= orig(y)
this.sumYY != this.xbar
this.sumYY >= orig(this.sumYY)
this.sumYY != orig(x)
this.sumXY != this.xbar
this.sumXY != orig(x)
this.n - orig(this.n) - 1 == 0
this.xbar != orig(this.sumXX)
this.xbar != orig(this.sumYY)
this.xbar != orig(this.sumXY)
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getR():::ENTER
this.distribution != null
this.sumX != this.sumXX
this.sumX != this.sumY
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > this.xbar
this.sumX != this.ybar
this.sumXX != this.sumY
this.sumXX != this.sumYY
this.sumXX != this.xbar
this.sumXX != this.ybar
this.sumY != this.sumYY
this.sumY != this.sumXY
this.sumY != this.xbar
this.sumY > this.ybar
this.sumYY != this.sumXY
this.sumYY != this.xbar
this.sumYY > this.ybar
this.sumXY != this.xbar
this.sumXY != this.ybar
this.xbar != this.ybar
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getR():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.distribution != null
return != 0
this.sumX != this.sumXX
this.sumX != this.sumY
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > this.xbar
this.sumX != this.ybar
this.sumX != return
this.sumXX != this.sumY
this.sumXX != this.sumYY
this.sumXX != this.xbar
this.sumXX != this.ybar
this.sumXX != return
this.sumY != this.sumYY
this.sumY != this.sumXY
this.sumY != this.xbar
this.sumY > this.ybar
this.sumY != return
this.sumYY != this.sumXY
this.sumYY != this.xbar
this.sumYY > this.ybar
this.sumYY != return
this.sumXY != this.xbar
this.sumXY != this.ybar
this.sumXY != return
this.xbar != this.ybar
this.xbar != return
this.ybar != return
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getRSquare():::ENTER
this.distribution != null
this.sumX != this.sumXX
this.sumX != this.sumY
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > this.xbar
this.sumX != this.ybar
this.sumXX != this.sumY
this.sumXX != this.sumYY
this.sumXX != this.xbar
this.sumXX != this.ybar
this.sumY != this.sumYY
this.sumY != this.sumXY
this.sumY != this.xbar
this.sumY > this.ybar
this.sumYY != this.sumXY
this.sumYY != this.xbar
this.sumYY > this.ybar
this.sumXY != this.xbar
this.sumXY != this.ybar
this.xbar != this.ybar
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getRSquare():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.distribution != null
this.sumX != this.sumXX
this.sumX != this.sumY
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > this.xbar
this.sumX != this.ybar
this.sumX != return
this.sumXX != this.sumY
this.sumXX != this.sumYY
this.sumXX != this.xbar
this.sumXX != this.ybar
this.sumXX != return
this.sumY != this.sumYY
this.sumY != this.sumXY
this.sumY != this.xbar
this.sumY > this.ybar
this.sumY != return
this.sumYY != this.sumXY
this.sumYY != this.xbar
this.sumYY > this.ybar
this.sumYY != return
this.sumXY != this.xbar
this.sumXY != this.ybar
this.sumXY != return
this.xbar != this.ybar
this.xbar != return
this.ybar != return
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::ENTER
this.distribution != null
this.sumX != this.sumXX
this.sumX != this.sumY
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > this.xbar
this.sumX != this.ybar
this.sumXX != this.sumY
this.sumXX != this.sumYY
this.sumXX != this.xbar
this.sumXX != this.ybar
this.sumY != this.sumYY
this.sumY != this.sumXY
this.sumY != this.xbar
this.sumY > this.ybar
this.sumYY != this.sumXY
this.sumYY != this.xbar
this.sumYY > this.ybar
this.sumXY != this.xbar
this.sumXY != this.ybar
this.xbar != this.ybar
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::EXIT302
this.sumXX == this.sumXY
this.sumXX == orig(this.sumXY)
this.distribution has only one value
this.sumX == 4.0
this.sumXX == 0.0
this.sumY == 10.0
this.sumYY == 5.0
this.n == 4
this.xbar == 1.0
this.ybar == 2.5
return == Double.NaN
orig(this) has only one value
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::EXIT304
this.n one of { 16, 47, 120 }
this.sumX > return
this.sumXX != this.sumXY
this.sumY < this.sumYY
this.sumY > return
this.sumYY > return
this.ybar > return
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.distribution != null
this.sumX != this.sumXX
this.sumX != this.sumY
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > this.xbar
this.sumX != this.ybar
this.sumX != return
this.sumXX != this.sumY
this.sumXX != this.sumYY
this.sumXX != this.xbar
this.sumXX != this.ybar
this.sumXX != return
this.sumY != this.sumYY
this.sumY != this.sumXY
this.sumY != this.xbar
this.sumY > this.ybar
this.sumY != return
this.sumYY != this.sumXY
this.sumYY != this.xbar
this.sumYY > this.ybar
this.sumYY != return
this.sumXY != this.xbar
this.sumXY != this.ybar
this.sumXY != return
this.xbar != this.ybar
this.xbar != return
this.ybar != return
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors():::ENTER
this.distribution != null
this.sumX != this.sumXX
this.sumX != this.sumY
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > this.xbar
this.sumX != this.ybar
this.sumXX != this.sumY
this.sumXX != this.sumYY
this.sumXX != this.xbar
this.sumXX != this.ybar
this.sumY != this.sumYY
this.sumY != this.sumXY
this.sumY != this.xbar
this.sumY > this.ybar
this.sumYY != this.sumXY
this.sumYY != this.xbar
this.sumYY > this.ybar
this.sumXY != this.xbar
this.sumXY != this.ybar
this.xbar != this.ybar
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.distribution != null
this.sumX != this.sumXX
this.sumX != this.sumY
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > this.xbar
this.sumX != this.ybar
this.sumX != return
this.sumXX != this.sumY
this.sumXX != this.sumYY
this.sumXX != this.xbar
this.sumXX != this.ybar
this.sumXX != return
this.sumY != this.sumYY
this.sumY != this.sumXY
this.sumY != this.xbar
this.sumY > this.ybar
this.sumY != return
this.sumYY != this.sumXY
this.sumYY != this.xbar
this.sumYY > this.ybar
this.sumYY != return
this.sumXY != this.xbar
this.sumXY != this.ybar
this.sumXY != return
this.xbar != this.ybar
this.xbar != return
this.ybar != return
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares():::ENTER
this.distribution != null
this.sumX != this.sumXX
this.sumX != this.sumY
this.sumX != this.sumYY
this.sumX != this.sumXY
this.sumX > this.xbar
this.sumX != this.ybar
this.sumXX != this.sumY
this.sumXX != this.sumYY
this.sumXX != this.xbar
this.sumXX != this.ybar
this.sumY != this.sumYY
this.sumY != this.sumXY
this.sumY != this.xbar
this.sumY > this.ybar
this.sumYY != this.sumXY
this.sumYY != this.xbar
this.sumYY > this.ybar
this.sumXY != this.xbar
this.sumXY != this.ybar
this.xbar != this.ybar
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares():::EXIT354
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getTotalSumSquares():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == return
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
return == orig(this.sumYY)
this.distribution != null
this.sumX != this.sumXX
this.sumX != this.sumY
this.sumX != this.sumXY
this.sumX > this.xbar
this.sumX != this.ybar
this.sumX != return
this.sumXX != this.sumY
this.sumXX != this.xbar
this.sumXX != this.ybar
this.sumXX != return
this.sumY != this.sumXY
this.sumY != this.xbar
this.sumY > this.ybar
this.sumY != return
this.sumXY != this.xbar
this.sumXY != this.ybar
this.sumXY != return
this.xbar != this.ybar
this.xbar != return
this.ybar < return
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(org.apache.commons.math.distribution.TDistribution):::ENTER
this.sumX == this.sumXX
this.sumX == this.sumY
this.sumX == this.sumYY
this.sumX == this.sumXY
this.sumX == this.xbar
this.sumX == this.ybar
this.distribution == null
this.sumX == 0.0
this.n == 0
value != null
value.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(org.apache.commons.math.distribution.TDistribution):::EXIT
this.distribution == orig(value)
this.distribution.getClass().getName() == orig(value.getClass().getName())
this.sumX == this.sumXX
this.sumX == this.sumY
this.sumX == this.sumYY
this.sumX == this.sumXY
this.sumX == this.xbar
this.sumX == this.ybar
this.sumX == orig(this.sumX)
this.sumX == orig(this.sumXX)
this.sumX == orig(this.sumY)
this.sumX == orig(this.sumYY)
this.sumX == orig(this.sumXY)
this.sumX == orig(this.xbar)
this.sumX == orig(this.ybar)
this.n == orig(this.n)
this.distribution != null
this.sumX == 0.0
this.n == 0
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::CLASS
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::OBJECT
this.getClass().getName() == org.apache.commons.math.special.Beta$1.class
===========================================================================
org.apache.commons.math.util.ContinuedFraction.ContinuedFraction():::EXIT
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::ENTER
epsilon == 1.0E-14
maxIterations == 2147483647
org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON < x
x % org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON == 0
epsilon % x == 0
x % epsilon == 0
x > epsilon
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::EXIT
org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON < return
return % org.apache.commons.math.util.ContinuedFraction.DEFAULT_EPSILON == 0
return != orig(x)
orig(epsilon) % return == 0
return % orig(epsilon) == 0
return > orig(epsilon)
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String):::ENTER
className has only one value
className.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String):::EXIT
className.toString == orig(className.toString)
className.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
return has only one value
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String, java.lang.Class):::ENTER
className has only one value
className.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
callingClass has only one value
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String, java.lang.Class):::EXIT
className.toString == orig(className.toString)
className.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
return has only one value
===========================================================================
org.junit.internal.MethodSorter$1:::OBJECT
this has only one value
===========================================================================
org.junit.internal.MethodSorter$1.():::EXIT
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::ENTER
m1 != null
m2 != null
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT19
return one of { -1, 1 }
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT21
===========================================================================
org.junit.internal.MethodSorter$1.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT
return != 0
===========================================================================
org.junit.internal.MethodSorter$2:::OBJECT
this has only one value
===========================================================================
org.junit.internal.MethodSorter$2.():::EXIT
===========================================================================
org.junit.internal.MethodSorter$2.compare(java.lang.reflect.Method, java.lang.reflect.Method):::ENTER
m1 != null
m2 != null
===========================================================================
org.junit.internal.MethodSorter$2.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT34
===========================================================================
org.junit.internal.MethodSorter$2.compare(java.lang.reflect.Method, java.lang.reflect.Method):::EXIT
===========================================================================
org.junit.internal.MethodSorter:::CLASS
org.junit.internal.MethodSorter.DEFAULT has only one value
org.junit.internal.MethodSorter.DEFAULT != null
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == org.junit.internal.MethodSorter$1.class
org.junit.internal.MethodSorter.NAME_ASCENDING has only one value
org.junit.internal.MethodSorter.NAME_ASCENDING != null
org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName() == org.junit.internal.MethodSorter$2.class
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() != org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName()
===========================================================================
org.junit.internal.MethodSorter.getDeclaredMethods(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.MethodSorter.getDeclaredMethods(java.lang.Class):::EXIT
org.junit.internal.MethodSorter.DEFAULT == orig(org.junit.internal.MethodSorter.DEFAULT)
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == orig(org.junit.internal.MethodSorter.DEFAULT.getClass().getName())
org.junit.internal.MethodSorter.NAME_ASCENDING == orig(org.junit.internal.MethodSorter.NAME_ASCENDING)
org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName() == orig(org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName())
return.getClass().getName() == java.lang.reflect.Method[].class
size(return[]) one of { 5, 11, 49 }
===========================================================================
org.junit.internal.MethodSorter.getSorter(org.junit.FixMethodOrder):::ENTER
fixMethodOrder == null
===========================================================================
org.junit.internal.MethodSorter.getSorter(org.junit.FixMethodOrder):::EXIT68
===========================================================================
org.junit.internal.MethodSorter.getSorter(org.junit.FixMethodOrder):::EXIT
org.junit.internal.MethodSorter.DEFAULT == return
org.junit.internal.MethodSorter.DEFAULT == orig(org.junit.internal.MethodSorter.DEFAULT)
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == return.getClass().getName()
org.junit.internal.MethodSorter.DEFAULT.getClass().getName() == orig(org.junit.internal.MethodSorter.DEFAULT.getClass().getName())
org.junit.internal.MethodSorter.NAME_ASCENDING == orig(org.junit.internal.MethodSorter.NAME_ASCENDING)
org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName() == orig(org.junit.internal.MethodSorter.NAME_ASCENDING.getClass().getName())
===========================================================================
org.junit.internal.RealSystem:::OBJECT
this has only one value
===========================================================================
org.junit.internal.RealSystem.RealSystem():::EXIT
===========================================================================
org.junit.internal.RealSystem.out():::ENTER
===========================================================================
org.junit.internal.RealSystem.out():::EXIT
return has only one value
===========================================================================
org.junit.internal.TextListener:::OBJECT
this has only one value
this.writer has only one value
this.writer != null
===========================================================================
org.junit.internal.TextListener.TextListener(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
org.junit.internal.TextListener.TextListener(java.io.PrintStream):::EXIT
this.writer == orig(writer)
===========================================================================
org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem):::ENTER
system has only one value
system.getClass().getName() == org.junit.internal.RealSystem.class
===========================================================================
org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem):::EXIT
===========================================================================
org.junit.internal.TextListener.elapsedTimeAsString(long):::ENTER
runTime == 473
===========================================================================
org.junit.internal.TextListener.elapsedTimeAsString(long):::EXIT
this.writer == orig(this.writer)
return has only one value
return.toString == "0.473"
===========================================================================
org.junit.internal.TextListener.getWriter():::ENTER
===========================================================================
org.junit.internal.TextListener.getWriter():::EXIT
this.writer == return
return == orig(this.writer)
return has only one value
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::EXIT62
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.printFooter(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.printFooter(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.printHeader(long):::ENTER
runTime == 473
===========================================================================
org.junit.internal.TextListener.printHeader(long):::EXIT
this.writer == orig(this.writer)
===========================================================================
org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.TextListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.internal.TextListener.testStarted(org.junit.runner.Description):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder:::OBJECT
this has only one value
this.canUseSuiteMethod == true
this.parents has only one value
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder():::EXIT
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == return.suiteBuilder.parents
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
return.suiteBuilder has only one value
return.suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT39
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT63
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.builders.SuiteMethodBuilder.class
return.parents has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::CLASS
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::OBJECT
this.suiteBuilder.parents.getClass().getName() == this.parents.getClass().getName()
this has only one value
this.suiteBuilder has only one value
this.suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.suiteBuilder.parents has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::ENTER
suiteBuilder has only one value
suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::EXIT
this.suiteBuilder == orig(suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(suiteBuilder.getClass().getName())
this.suiteBuilder.parents == suiteBuilder.parents
this.parents.getClass().getName() == suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == orig(suiteBuilder.parents.getClass().getName())
suiteBuilder.parents == orig(suiteBuilder.parents)
suiteBuilder.parents has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::ENTER
currentTestClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::EXIT97
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.suiteBuilder == orig(this.suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(this.suiteBuilder.getClass().getName())
this.suiteBuilder.parents == orig(this.suiteBuilder.parents)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.suiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT90
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.suiteBuilder == orig(this.suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(this.suiteBuilder.getClass().getName())
this.suiteBuilder.parents == orig(this.suiteBuilder.parents)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.suiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.IgnoredBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder():::EXIT
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT13
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.JUnit3Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit3Builder.JUnit3Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == true
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT;condition="return == true"
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT11
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.internal.builders.JUnit4Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit4Builder.JUnit4Builder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT20
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT20;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == false
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::ENTER
each has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT13
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener:::OBJECT
this has only one value
this.notifier has only one value
this.notifier != null
this.notifier.listeners has only one value
this.notifier.listeners != null
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[] elements != null
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
size(this.notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.OldTestClassAdaptingListener(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.OldTestClassAdaptingListener(org.junit.runner.notification.RunNotifier):::EXIT
this.notifier == orig(notifier)
this.notifier.listeners == notifier.listeners
this.notifier.listeners[] == notifier.listeners[]
this.notifier.listeners.getClass().getName() == notifier.listeners.getClass().getName()
this.notifier.pleaseStop == notifier.pleaseStop
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
this.notifier.listeners.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test):::EXIT55
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.notifier.listeners[])-1
org.junit.runner.Description.serialVersionUID == orig(size(this.notifier.listeners[]))-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
return != null
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
return.fChildren != null
return.fDisplayName != null
return.fUniqueId != null
return.fAnnotations != null
return.fTestClass has only one value
return.fTestClass != null
this.notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
this.notifier.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
this.notifier.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
this.notifier.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.notifier.listeners.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
this.notifier.listeners.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.notifier.listeners.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
this.notifier.listeners.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
return has only one value
return != null
this.notifier.listeners.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
this.notifier.listeners.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test):::EXIT64
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
return != null
this.notifier.listeners.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
this.notifier.listeners.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.notifier.listeners.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner:::OBJECT
this has only one value
this.test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class):::ENTER
klass has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class):::EXIT
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test):::EXIT
this.test == orig(test)
this.test.getClass().getName() == orig(test.getClass().getName())
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier):::ENTER
this.test has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier):::EXIT
this.test == orig(this.test)
this.test.getClass().getName() == orig(this.test.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
this.test has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getAnnotations(junit.framework.TestCase):::ENTER
test != null
test.getClass().getName() == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
test.fName != null
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getAnnotations(junit.framework.TestCase):::EXIT136
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getAnnotations(junit.framework.TestCase):::EXIT
test.fName == orig(test.fName)
test.fName.toString == orig(test.fName.toString)
test.fName != null
return has only one value
return != null
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getDescription():::ENTER
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getDescription():::EXIT
this.test == orig(this.test)
this.test.getClass().getName() == orig(this.test.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
this.test has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
return.fUniqueId has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getTest():::ENTER
this.test has only one value
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.getTest():::EXIT
this.test == return
this.test.getClass().getName() == return.getClass().getName()
return == orig(this.test)
return.getClass().getName() == orig(this.test.getClass().getName())
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::ENTER
test != null
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::EXIT105
return.fAnnotations has only one value
return.fTestClass has only one value
return.fTestClass != null
orig(test.getClass().getName()) == org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::EXIT116
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
return.fUniqueId has only one value
orig(test) has only one value
orig(test.getClass().getName()) == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test):::EXIT
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
return != null
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
return.fChildren != null
return.fDisplayName != null
return.fUniqueId != null
return.fAnnotations != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
this.test has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
this.test == orig(this.test)
this.test.getClass().getName() == orig(this.test.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
this.test has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test):::ENTER
this.test == null
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test):::EXIT
this.test == orig(test)
this.test.getClass().getName() == orig(test.getClass().getName())
this.test has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier:::OBJECT
org.junit.runner.Description.serialVersionUID == size(this.notifier.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.description.fTestClass
this has only one value
this.notifier has only one value
this.notifier.listeners has only one value
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
this.description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.description.fChildren has only one value
this.description.fDisplayName has only one value
this.description.fDisplayName.toString == "classes"
this.description.fUniqueId has only one value
this.description.fAnnotations has only one value
size(this.notifier.listeners[]) == 2
this.notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(notifier.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(notifier.listeners[]) == 2
notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.notifier == orig(notifier)
this.notifier.listeners == notifier.listeners
this.notifier.listeners[] == notifier.listeners[]
this.notifier.listeners.getClass().getName() == notifier.listeners.getClass().getName()
this.notifier.pleaseStop == notifier.pleaseStop
this.description == orig(description)
org.junit.runner.Description.serialVersionUID == size(notifier.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == description.fChildren
this.description.fDisplayName == description.fDisplayName
this.description.fDisplayName.toString == description.fDisplayName.toString
this.description.fUniqueId == description.fUniqueId
this.description.fAnnotations == description.fAnnotations
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(notifier.listeners[]) == 2
notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteFinished():::ENTER
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteFinished():::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.description == orig(this.description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == orig(this.description.fChildren)
this.description.fDisplayName == orig(this.description.fDisplayName)
this.description.fDisplayName.toString == orig(this.description.fDisplayName.toString)
this.description.fUniqueId == orig(this.description.fUniqueId)
this.description.fAnnotations == orig(this.description.fAnnotations)
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteStarted():::ENTER
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteStarted():::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.description == orig(this.description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == orig(this.description.fChildren)
this.description.fDisplayName == orig(this.description.fDisplayName)
this.description.fDisplayName.toString == orig(this.description.fDisplayName.toString)
this.description.fUniqueId == orig(this.description.fUniqueId)
this.description.fAnnotations == orig(this.description.fAnnotations)
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder:::OBJECT
this.annotation != null
this.validators != null
this.validators[] elements != null
this.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.Builder(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.Builder(java.lang.Class):::EXIT
this.annotation == orig(annotation)
this.methods == false
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.build():::ENTER
size(this.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.build():::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.methods == orig(this.methods)
this.validators == return.validatorStrategies
this.validators == orig(this.validators)
this.validators[] == return.validatorStrategies[]
this.validators[] == orig(this.validators[])
this.validators.getClass().getName() == return.validatorStrategies.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
size(this.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.forMethods():::ENTER
this.methods == false
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.forMethods():::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.validators == return.validators
this.validators == orig(this.validators)
this.validators[] == return.validators[]
this.validators[] == orig(this.validators[])
this.validators.getClass().getName() == return.validators.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
return == orig(this)
this.methods == true
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.withValidator(org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator):::ENTER
validator != null
this.validators.getClass().getName() != validator.getClass().getName()
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.withValidator(org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator):::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.methods == orig(this.methods)
this.validators == return.validators
this.validators == orig(this.validators)
this.validators[] == return.validators[]
this.validators.getClass().getName() == return.validators.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
return == orig(this)
size(this.validators[])-1 == orig(size(this.validators[]))
return != null
size(this.validators[]) >= 1
orig(validator) in this.validators[]
this.validators.getClass().getName() != orig(validator.getClass().getName())
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$DeclaringClassMustBePublic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$DeclaringClassMustBePublic.DeclaringClassMustBePublic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeARule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeARule.FieldMustBeARule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeATestRule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeATestRule.FieldMustBeATestRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule.MemberMustBeNonStaticOrAlsoClassRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBePublic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBePublic.MemberMustBePublic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeStatic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeStatic.MemberMustBeStatic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeARule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeARule.MethodMustBeARule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeATestRule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeATestRule.MethodMustBeATestRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator:::CLASS
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.methods
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.methods
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[])-1 == size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[])
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == false
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 4
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule]
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == java.util.ArrayList.class
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 3
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeNonStaticOrAlsoClassRule, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeARule]
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == true
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 4
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule]
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 3
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeNonStaticOrAlsoClassRule, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeARule]
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == 4
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator:::OBJECT
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == this.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == this.validatorStrategies.getClass().getName()
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == size(this.validatorStrategies[])
this.validatorStrategies.getClass().getName() == java.util.ArrayList.class
size(this.validatorStrategies[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.RuleMemberValidator(org.junit.internal.runners.rules.RuleMemberValidator$Builder):::ENTER
builder.validators.getClass().getName() == java.util.ArrayList.class
size(builder.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.RuleMemberValidator(org.junit.internal.runners.rules.RuleMemberValidator$Builder):::EXIT
this.annotation == builder.annotation
this.annotation == orig(builder.annotation)
this.methods == builder.methods
this.methods == orig(builder.methods)
this.validatorStrategies == builder.validators
this.validatorStrategies == orig(builder.validators)
this.validatorStrategies[] == builder.validators[]
this.validatorStrategies[] == orig(builder.validators[])
this.validatorStrategies.getClass().getName() == builder.validators.getClass().getName()
this.validatorStrategies.getClass().getName() == orig(builder.validators.getClass().getName())
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.classRuleValidatorBuilder():::EXIT
return.annotation has only one value
return.methods == false
return.validators[] == []
return.validators[].getClass().getName() == []
return.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.testRuleValidatorBuilder():::EXIT
return.annotation has only one value
return.methods == false
return.validators[] == []
return.validators[].getClass().getName() == []
return.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.validate(org.junit.runners.model.TestClass, java.util.List):::ENTER
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == errors.getClass().getName()
target.methodsForAnnotations.getClass().getName() == target.fieldsForAnnotations.getClass().getName()
this.validatorStrategies[].getClass().getName() one of { [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule], [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule] }
target has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
target.clazz == null
target.methodsForAnnotations has only one value
target.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
target.fieldsForAnnotations has only one value
errors has only one value
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.validate(org.junit.runners.model.TestClass, java.util.List):::EXIT
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(this.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(this.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(errors.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[])
this.methods == orig(this.methods)
this.validatorStrategies == orig(this.validatorStrategies)
this.validatorStrategies[] == orig(this.validatorStrategies[])
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
target.clazz == orig(target.clazz)
target.methodsForAnnotations == orig(target.methodsForAnnotations)
target.methodsForAnnotations.getClass().getName() == target.fieldsForAnnotations.getClass().getName()
target.methodsForAnnotations.getClass().getName() == orig(target.methodsForAnnotations.getClass().getName())
target.methodsForAnnotations.getClass().getName() == orig(target.fieldsForAnnotations.getClass().getName())
target.fieldsForAnnotations == orig(target.fieldsForAnnotations)
errors[] == orig(errors[])
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == orig(size(this.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]))-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[]))-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(this.validatorStrategies[]))-1
this.validatorStrategies[].getClass().getName() one of { [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule], [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule] }
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
target.clazz == null
target.methodsForAnnotations has only one value
target.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
target.fieldsForAnnotations has only one value
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runner.Computer$1:::OBJECT
this.val$builder.parents.getClass().getName() == this.parents.getClass().getName()
this has only one value
this.val$builder has only one value
this.val$builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.val$builder.parents has only one value
org.junit.runner.Computer.this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::ENTER
org.junit.runner.Computer.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
$hidden$2.parents has only one value
$hidden$2.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::EXIT
this.val$builder == orig($hidden$2)
this.val$builder.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$builder.parents == $hidden$2.parents
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents.getClass().getName() == $hidden$2.parents.getClass().getName()
this.parents.getClass().getName() == orig($hidden$2.parents.getClass().getName())
$hidden$2.parents == orig($hidden$2.parents)
$hidden$2.parents has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::EXIT
this.val$builder == orig(this.val$builder)
this.val$builder.getClass().getName() == orig(this.val$builder.getClass().getName())
this.val$builder.parents == orig(this.val$builder.parents)
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.val$builder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.runner.Computer$2:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runner.Computer$2:::OBJECT
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName()
this.runners.getClass().getName() == this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(this.runners[]) == size(org.junit.runners.ParentRunner.VALIDATORS[])
this has only one value
org.junit.runner.Computer.this has only one value
this.runners has only one value
this.runners[] contains no nulls and has only one value, of length 1
this.runners[] elements has only one value
this.runners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
this.runners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
this.runners.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.childrenLock has only one value
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.runners[] == this.filteredChildren[] (elementwise)
this.runners[] is the reverse of this.filteredChildren[]
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName() (elementwise)
===========================================================================
org.junit.runner.Computer$2.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
org.junit.runner.Computer.this has only one value
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer$2.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(classes[]))
this.filteredChildren == null
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
===========================================================================
org.junit.runner.Computer$2.getName():::ENTER
===========================================================================
org.junit.runner.Computer$2.getName():::EXIT
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.runners == orig(this.runners)
this.runners[] == orig(this.runners[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
return has only one value
return.toString == "classes"
===========================================================================
org.junit.runner.Computer:::OBJECT
this has only one value
===========================================================================
org.junit.runner.Computer.Computer():::EXIT
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
testClass has only one value
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
return has only one value
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Description:::CLASS
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description:::OBJECT
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == this.fAnnotations[].getClass().getName()
this.fChildren != null
this.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
this.fDisplayName != null
this.fUniqueId != null
this.fUniqueId.getClass().getName() == java.lang.String.class
this.fAnnotations != null
this.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fAnnotations[] == []
this.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of this.fAnnotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDisplayName.toString
this.fChildren.getClass().getName() != this.fUniqueId.getClass().getName()
this.fChildren.getClass().getName() != this.fAnnotations.getClass().getName()
this.fUniqueId.getClass().getName() != this.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.io.Serializable, java.lang.annotation.Annotation[]):::ENTER
displayName != null
uniqueId != null
uniqueId.getClass().getName() == java.lang.String.class
annotations != null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] == []
uniqueId.getClass().getName() != annotations.getClass().getName()
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.io.Serializable, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
this.fDisplayName == orig(displayName)
this.fDisplayName.toString == displayName.toString
this.fUniqueId == orig(uniqueId)
this.fUniqueId.getClass().getName() == orig(uniqueId.getClass().getName())
this.fAnnotations == orig(annotations)
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
this.fAnnotations[] == annotations[]
this.fTestClass == orig(testClass)
displayName.toString == orig(displayName.toString)
annotations[] == orig(annotations[])
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString < displayName.toString
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of annotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < displayName.toString
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
displayName != null
annotations != null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] == []
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
this.fDisplayName == orig(displayName)
this.fDisplayName.toString == displayName.toString
this.fAnnotations == orig(annotations)
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
this.fAnnotations[] == annotations[]
this.fTestClass == orig(clazz)
displayName.toString == orig(displayName.toString)
annotations[] == orig(annotations[])
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString < displayName.toString
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of annotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < displayName.toString
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
this.fDisplayName.toString one of { "classes", "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests" }
description != null
description.fChildren != null
description.fDisplayName != null
description.fUniqueId != null
description.fAnnotations != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fUniqueId == orig(this.fUniqueId)
this.fAnnotations == orig(this.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
this.fDisplayName.toString one of { "classes", "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests" }
description.fChildren != null
description.fDisplayName != null
description.fUniqueId != null
description.fAnnotations != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
name.toString one of { "classes", "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests" }
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
name.toString == return.fDisplayName.toString
name.toString == orig(name.toString)
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fDisplayName == orig(name)
return.fAnnotations == orig(annotations)
name.toString one of { "classes", "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests" }
annotations[] == []
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String):::ENTER
clazz has only one value
clazz != null
name != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
name.toString == orig(name.toString)
return.fTestClass == orig(clazz)
return != null
return.fChildren != null
return.fDisplayName != null
return.fUniqueId != null
return.fAnnotations != null
return.fTestClass has only one value
return.fTestClass != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
name.toString < return.fDisplayName.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
clazz has only one value
clazz != null
name != null
annotations has only one value
annotations != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
name.toString == orig(name.toString)
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fAnnotations == orig(annotations)
return.fTestClass == orig(clazz)
annotations[] == []
return != null
return.fChildren != null
return.fDisplayName != null
return.fUniqueId != null
return.fAnnotations has only one value
return.fAnnotations != null
return.fTestClass has only one value
return.fTestClass != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
name.toString < return.fDisplayName.toString
===========================================================================
org.junit.runner.Description.formatDisplayName(java.lang.String, java.lang.String):::ENTER
name != null
className has only one value
className != null
className.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < className.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < className.toString
name.toString > className.toString
===========================================================================
org.junit.runner.Description.formatDisplayName(java.lang.String, java.lang.String):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
name.toString == orig(name.toString)
className.toString == orig(className.toString)
className.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
return != null
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < className.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < className.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.toString
name.toString > className.toString
name.toString < return.toString
className.toString < return.toString
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::ENTER
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
this.fDisplayName has only one value
this.fDisplayName.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
this.fUniqueId has only one value
annotationType has only one value
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::EXIT279
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fUniqueId == orig(this.fUniqueId)
this.fAnnotations == orig(this.fAnnotations)
this.fDisplayName has only one value
this.fDisplayName.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
this.fUniqueId has only one value
return == null
===========================================================================
org.junit.runner.JUnitCommandLineParseResult:::OBJECT
this.filterSpecs[] == this.parserErrors[]
this.filterSpecs.getClass().getName() == this.classes.getClass().getName()
this.filterSpecs.getClass().getName() == this.parserErrors.getClass().getName()
this has only one value
this.filterSpecs has only one value
this.filterSpecs != null
this.filterSpecs[] == []
this.filterSpecs[].getClass().getName() == []
this.filterSpecs.getClass().getName() == java.util.ArrayList.class
this.classes has only one value
this.classes != null
this.classes[] elements has only one value
this.classes[] elements != null
this.classes[].getClass().getName() elements == java.lang.Class.class
this.classes[].getClass().getName() one of { [], [java.lang.Class] }
this.parserErrors has only one value
this.parserErrors != null
size(this.classes[]) one of { 0, 1 }
size(this.filterSpecs[]) <= size(this.classes[])
size(this.filterSpecs[]) >= size(this.classes[])-1
size(this.filterSpecs[])-1 <= size(this.classes[])-1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.JUnitCommandLineParseResult():::EXIT
this.filterSpecs[] == this.classes[]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::ENTER
size(this.filterSpecs[]) == size(this.classes[])-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::EXIT131
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.classes[] == orig(this.classes[])
this.parserErrors == orig(this.parserErrors)
return == orig(request)
return.getClass().getName() == orig(request.getClass().getName())
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == orig(size(this.classes[]))-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.copyArray(java.lang.String[], int, int):::ENTER
this.filterSpecs[] == this.classes[]
from == size(this.filterSpecs[])
to == size(args[])
size(this.filterSpecs[]) == size(args[])-1
args[from] == args[to-1]
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
to == 1
args[] elements == args[from]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.copyArray(java.lang.String[], int, int):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == this.classes[]
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == return[]
args[] == orig(args[])
return.getClass().getName() == orig(args.getClass().getName())
orig(from) == size(this.filterSpecs[])
orig(from) == size(this.classes[])
orig(from) == size(this.parserErrors[])
orig(from) == size(args[])-1
orig(from) == size(return[])-1
orig(from) == orig(size(this.classes[]))
orig(from) == orig(size(this.parserErrors[]))
orig(from) == orig(size(args[]))-1
orig(to) == size(return[])
args[orig(from)] == args[orig(to)-1]
args[orig(from)] == orig(args[post(to)-1])
args[orig(from)] == return[orig(to)-1]
args[orig(from)] == orig(args[to-1])
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
return has only one value
return.getClass().getName() == java.lang.String[].class
args[] elements == args[orig(from)]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::ENTER
size(this.filterSpecs[]) == size(this.classes[])-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
computer has only one value
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::EXIT118
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.classes[] == orig(this.classes[])
this.parserErrors == orig(this.parserErrors)
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == orig(size(this.classes[]))-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parse(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parse(java.lang.String[]):::EXIT
args[] == orig(args[])
return.filterSpecs[] == return.parserErrors[]
return.filterSpecs.getClass().getName() == return.classes.getClass().getName()
return.filterSpecs.getClass().getName() == return.parserErrors.getClass().getName()
size(args[])-1 == size(return.filterSpecs[])
size(args[])-1 == size(return.parserErrors[])
size(return.classes[]) == orig(size(args[]))
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
return has only one value
return.filterSpecs has only one value
return.filterSpecs[] == []
return.filterSpecs[].getClass().getName() == []
return.filterSpecs.getClass().getName() == java.util.ArrayList.class
return.classes has only one value
return.classes[] contains no nulls and has only one value, of length 1
return.classes[] elements has only one value
return.classes[].getClass().getName() == [java.lang.Class]
return.classes[].getClass().getName() elements == java.lang.Class.class
return.parserErrors has only one value
size(return.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseArgs(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseArgs(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == orig(args[])
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
size(this.classes[]) == orig(size(args[]))
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::EXIT80
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == this.classes[]
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == return[]
args[] == orig(args[])
return.getClass().getName() == orig(args.getClass().getName())
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == size(return[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
return has only one value
return.getClass().getName() == java.lang.String[].class
size(return[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseParameters(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseParameters(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == orig(args[])
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
size(this.classes[]) == orig(size(args[]))
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore:::OBJECT
this has only one value
this.notifier has only one value
this.notifier.listeners has only one value
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
size(this.notifier.listeners[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.JUnitCore.JUnitCore():::EXIT
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
===========================================================================
org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener):::ENTER
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
size(this.notifier.listeners[])-1 == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.defaultComputer():::EXIT
return has only one value
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listener has only one value
size(this.notifier.listeners[]) == 2
listener in this.notifier.listeners[]
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
size(this.notifier.listeners[]) == orig(size(this.notifier.listeners[]))-1
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == orig(size(this.notifier.listeners[]))
size(this.notifier.listeners[])-1 == size(return.failures[])
size(return.failures[]) == orig(size(this.notifier.listeners[]))-1
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] == []
return.failures[].getClass().getName() == []
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
runner has only one value
runner.getClass().getName() == org.junit.runner.Computer$2.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == orig(size(this.notifier.listeners[]))
size(this.notifier.listeners[])-1 == size(return.failures[])
size(return.failures[]) == orig(size(this.notifier.listeners[]))-1
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] == []
return.failures[].getClass().getName() == []
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[]):::ENTER
size(this.notifier.listeners[]) == size(args[])-1
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
system has only one value
system.getClass().getName() == org.junit.internal.RealSystem.class
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[]):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
args[] == orig(args[])
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == orig(size(args[]))
size(args[])-1 == size(return.failures[])
size(args[])-1 == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] == []
return.failures[].getClass().getName() == []
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
args[] elements == args[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Request$1:::OBJECT
this has only one value
this.val$runner has only one value
this.val$runner.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::EXIT
this.val$runner == orig($hidden$1)
this.val$runner.getClass().getName() == orig($hidden$1.getClass().getName())
===========================================================================
org.junit.runner.Request$1.getRunner():::ENTER
===========================================================================
org.junit.runner.Request$1.getRunner():::EXIT
this.val$runner == return
this.val$runner.getClass().getName() == return.getClass().getName()
return == orig(this.val$runner)
return.getClass().getName() == orig(this.val$runner.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request:::OBJECT
this has only one value
this.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.Request():::EXIT
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::ENTER
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT78
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT
classes[] == orig(classes[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::EXIT
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Result$Listener:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
this has only one value
org.junit.runner.Result.this has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields != null
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[] elements != null
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
org.junit.runner.Result.this.count has only one value
org.junit.runner.Result.this.count != null
org.junit.runner.Result.this.ignoreCount has only one value
org.junit.runner.Result.this.ignoreCount != null
org.junit.runner.Result.this.assumptionFailureCount has only one value
org.junit.runner.Result.this.assumptionFailureCount != null
org.junit.runner.Result.this.failures has only one value
org.junit.runner.Result.this.failures != null
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Result.this.failures[].getClass().getName() == []
org.junit.runner.Result.this.runTime has only one value
org.junit.runner.Result.this.runTime != null
org.junit.runner.Result.this.startTime has only one value
org.junit.runner.Result.this.startTime != null
org.junit.runner.Result.this.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.this has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
org.junit.runner.Result.this.count has only one value
org.junit.runner.Result.this.ignoreCount has only one value
org.junit.runner.Result.this.assumptionFailureCount has only one value
org.junit.runner.Result.this.failures has only one value
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Result.this.failures[].getClass().getName() == []
org.junit.runner.Result.this.runTime has only one value
org.junit.runner.Result.this.startTime has only one value
org.junit.runner.Result.this.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
org.junit.runner.Result.serialPersistentFields.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Result.serialPersistentFields.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fAnnotations[]) == orig(size(org.junit.runner.Result.this.failures[]))
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
org.junit.runner.Result.serialPersistentFields.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Result.serialPersistentFields.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this == result
org.junit.runner.Result.this.count == result.count
org.junit.runner.Result.this.ignoreCount == result.ignoreCount
org.junit.runner.Result.this.assumptionFailureCount == result.assumptionFailureCount
org.junit.runner.Result.this.failures == result.failures
org.junit.runner.Result.this.failures[] == result.failures[]
org.junit.runner.Result.this.runTime == result.runTime
org.junit.runner.Result.this.startTime == result.startTime
org.junit.runner.Result.this.serializedForm == result.serializedForm
result has only one value
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this == orig(result)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == result.count
org.junit.runner.Result.this.ignoreCount == result.ignoreCount
org.junit.runner.Result.this.assumptionFailureCount == result.assumptionFailureCount
org.junit.runner.Result.this.failures == result.failures
org.junit.runner.Result.this.failures[] == result.failures[]
org.junit.runner.Result.this.runTime == result.runTime
org.junit.runner.Result.this.startTime == result.startTime
org.junit.runner.Result.this.serializedForm == result.serializedForm
result.count == orig(org.junit.runner.Result.this.count)
result.count == orig(result.count)
result.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(org.junit.runner.Result.this.failures)
result.failures == orig(result.failures)
result.failures[] == orig(org.junit.runner.Result.this.failures[])
result.failures[] == orig(result.failures[])
result.runTime == orig(org.junit.runner.Result.this.runTime)
result.runTime == orig(result.runTime)
result.startTime == orig(org.junit.runner.Result.this.startTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
result.serializedForm == orig(result.serializedForm)
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fAnnotations[]) == orig(size(org.junit.runner.Result.this.failures[]))
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.Result:::CLASS
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields != null
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[] elements != null
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.Result:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
this has only one value
this.count has only one value
this.count != null
this.ignoreCount has only one value
this.ignoreCount != null
this.assumptionFailureCount has only one value
this.assumptionFailureCount != null
this.failures has only one value
this.failures != null
this.failures[] == []
this.failures[].getClass().getName() == []
this.runTime has only one value
this.runTime != null
this.startTime has only one value
this.startTime != null
this.serializedForm == null
===========================================================================
org.junit.runner.Result.Result():::EXIT
===========================================================================
org.junit.runner.Result.createListener():::ENTER
===========================================================================
org.junit.runner.Result.createListener():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
return has only one value
===========================================================================
org.junit.runner.Result.getFailureCount():::ENTER
===========================================================================
org.junit.runner.Result.getFailureCount():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
return == size(this.failures[])
return == orig(size(this.failures[]))
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] == org.junit.runner.Result.serialPersistentFields[return]
orig(org.junit.runner.Result.serialPersistentFields[post(org.junit.runner.Result.serialVersionUID)-1]) == org.junit.runner.Result.serialPersistentFields[return]
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result$SerializedForm.serialVersionUID-1] == org.junit.runner.Result.serialPersistentFields[return]
org.junit.runner.Result.serialPersistentFields[return] == orig(org.junit.runner.Result.serialPersistentFields[post(org.junit.runner.Result$SerializedForm.serialVersionUID)-1])
org.junit.runner.Result.serialPersistentFields[return] has only one value
===========================================================================
org.junit.runner.Result.getFailures():::ENTER
===========================================================================
org.junit.runner.Result.getFailures():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
size(this.failures[]) == size(return[])
size(return[]) == orig(size(this.failures[]))
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
===========================================================================
org.junit.runner.Result.getRunCount():::ENTER
===========================================================================
org.junit.runner.Result.getRunCount():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
return == 8
===========================================================================
org.junit.runner.Result.getRunTime():::ENTER
===========================================================================
org.junit.runner.Result.getRunTime():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
return == 473
===========================================================================
org.junit.runner.Result.wasSuccessful():::ENTER
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
return == true
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
org.junit.runner.Runner:::OBJECT
===========================================================================
org.junit.runner.Runner.Runner():::EXIT
===========================================================================
org.junit.runner.notification.RunListener:::OBJECT
===========================================================================
org.junit.runner.notification.RunListener.RunListener():::EXIT
===========================================================================
org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this has only one value
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunListener.testSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$2:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Result.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
this.val$result.count has only one value
this.val$result.ignoreCount has only one value
this.val$result.assumptionFailureCount has only one value
this.val$result.failures has only one value
this.val$result.failures[] == []
this.val$result.failures[].getClass().getName() == []
this.val$result.runTime has only one value
this.val$result.startTime has only one value
this.val$result.serializedForm == null
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(org.junit.runner.Result.serialPersistentFields[]) == 6
size(this.currentListeners[]) == 2
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.currentListeners[org.junit.runner.Result.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
$hidden$2.count has only one value
$hidden$2.ignoreCount has only one value
$hidden$2.assumptionFailureCount has only one value
$hidden$2.failures has only one value
$hidden$2.failures[] == []
$hidden$2.failures[].getClass().getName() == []
$hidden$2.runTime has only one value
$hidden$2.startTime has only one value
$hidden$2.serializedForm == null
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT
this.val$result == orig($hidden$2)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.val$result.count == $hidden$2.count
this.val$result.ignoreCount == $hidden$2.ignoreCount
this.val$result.assumptionFailureCount == $hidden$2.assumptionFailureCount
this.val$result.failures == $hidden$2.failures
this.val$result.failures[] == $hidden$2.failures[]
this.val$result.runTime == $hidden$2.runTime
this.val$result.startTime == $hidden$2.startTime
this.val$result.serializedForm == $hidden$2.serializedForm
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.count == orig($hidden$2.count)
$hidden$2.ignoreCount == orig($hidden$2.ignoreCount)
$hidden$2.assumptionFailureCount == orig($hidden$2.assumptionFailureCount)
$hidden$2.failures == orig($hidden$2.failures)
$hidden$2.failures[] == orig($hidden$2.failures[])
$hidden$2.runTime == orig($hidden$2.runTime)
$hidden$2.startTime == orig($hidden$2.startTime)
$hidden$2.serializedForm == orig($hidden$2.serializedForm)
$hidden$2.count has only one value
$hidden$2.ignoreCount has only one value
$hidden$2.assumptionFailureCount has only one value
$hidden$2.failures has only one value
$hidden$2.failures[] == []
$hidden$2.failures[].getClass().getName() == []
$hidden$2.runTime has only one value
$hidden$2.startTime has only one value
$hidden$2.serializedForm == null
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$result == orig(this.val$result)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.val$result.count == orig(this.val$result.count)
this.val$result.ignoreCount == orig(this.val$result.ignoreCount)
this.val$result.assumptionFailureCount == orig(this.val$result.assumptionFailureCount)
this.val$result.failures == orig(this.val$result.failures)
this.val$result.failures[] == orig(this.val$result.failures[])
this.val$result.runTime == orig(this.val$result.runTime)
this.val$result.startTime == orig(this.val$result.startTime)
this.val$result.serializedForm == orig(this.val$result.serializedForm)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$4:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$5:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this.val$description != null
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
this.val$description.fChildren != null
this.val$description.fDisplayName != null
this.val$description.fUniqueId != null
this.val$description.fAnnotations != null
this.val$description.fTestClass has only one value
this.val$description.fTestClass != null
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners != null
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[] elements != null
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$5.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fTestClass has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$5.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fTestClass == orig($hidden$2.fTestClass)
$hidden$2.fTestClass has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each != null
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$9:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this.val$description != null
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
this.val$description.fChildren != null
this.val$description.fDisplayName != null
this.val$description.fUniqueId != null
this.val$description.fAnnotations != null
this.val$description.fTestClass has only one value
this.val$description.fTestClass != null
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners != null
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[] elements != null
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.currentListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$9.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fTestClass has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$9.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fTestClass == orig($hidden$2.fTestClass)
$hidden$2.fTestClass has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$9.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each != null
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$9.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier:::OBJECT
this.currentListeners == org.junit.runner.notification.RunNotifier.this.listeners
this.currentListeners[] == org.junit.runner.notification.RunNotifier.this.listeners[]
this.currentListeners.getClass().getName() == org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName()
this.currentListeners has only one value
this.currentListeners != null
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[] elements != null
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
size(this.currentListeners[]) == 2
this.getClass().getName() != this.currentListeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this != null
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners != null
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[] elements != null
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::EXIT
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier, java.util.List):::ENTER
org.junit.runner.notification.RunNotifier.this.listeners == currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == currentListeners.getClass().getName()
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this != null
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
currentListeners has only one value
currentListeners != null
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[] elements != null
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(currentListeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier, java.util.List):::EXIT
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(currentListeners)
this.currentListeners[] == currentListeners[]
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(currentListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
currentListeners[] == orig(currentListeners[])
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[] elements != null
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::EXIT
this.currentListeners == orig(this.currentListeners)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier:::OBJECT
this has only one value
this.listeners has only one value
this.listeners != null
this.listeners[] elements != null
this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.pleaseStop == false
size(this.listeners[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.notification.RunNotifier.RunNotifier():::EXIT
this.listeners[] == []
this.listeners[].getClass().getName() == []
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
listener has only one value
size(this.listeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
size(this.listeners[]) == 2
orig(listener) in this.listeners[]
===========================================================================
org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] == []
this.listeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
size(this.listeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailures(java.util.List, java.util.List):::ENTER
this.listeners[] == listeners[]
listeners.getClass().getName() == failures.getClass().getName()
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listeners != null
listeners.getClass().getName() == java.util.ArrayList.class
failures != null
failures[] == []
failures[].getClass().getName() == []
size(this.listeners[]) == 2
this.listeners.getClass().getName() != listeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailures(java.util.List, java.util.List):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == listeners[]
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
listeners[] == orig(this.listeners[])
listeners[] == orig(listeners[])
failures[] == orig(failures[])
listeners[] contains no nulls and has only one value, of length 2
listeners[] elements != null
listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
failures[] == []
failures[].getClass().getName() == []
size(this.listeners[]) == 2
this.listeners.getClass().getName() != orig(listeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.listeners[])-1
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Result.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
this.listeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteFinished(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listener has only one value
size(this.listeners[]) == 2
listener in this.listeners[]
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[]) == orig(size(this.listeners[]))-1
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
===========================================================================
org.junit.runner.notification.RunNotifier.wrapIfNotThreadSafe(org.junit.runner.notification.RunListener):::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier.wrapIfNotThreadSafe(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
===========================================================================
org.junit.runner.notification.SynchronizedRunListener:::OBJECT
this has only one value
this.listener has only one value
this.listener != null
this.monitor has only one value
this.monitor != null
this.monitor.getClass().getName() == org.junit.runner.notification.RunNotifier.class
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.SynchronizedRunListener(org.junit.runner.notification.RunListener, java.lang.Object):::ENTER
listener has only one value
monitor has only one value
monitor.getClass().getName() == org.junit.runner.notification.RunNotifier.class
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.SynchronizedRunListener(org.junit.runner.notification.RunListener, java.lang.Object):::EXIT
this.listener == orig(listener)
this.monitor == orig(monitor)
this.monitor.getClass().getName() == orig(monitor.getClass().getName())
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFinished(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunFinished(org.junit.runner.Result):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] == []
result.failures[].getClass().getName() == []
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fTestClass has only one value
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fChildren.getClass().getName()
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
this.monitor.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteFinished(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runners.ParentRunner$1:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
size(org.junit.runners.ParentRunner.this.filteredChildren[]) == 1
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass == null
org.junit.runners.ParentRunner.this.filteredChildren == null
org.junit.runners.ParentRunner.this.scheduler == null
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.testClass == null
org.junit.runners.ParentRunner.this.filteredChildren == null
org.junit.runners.ParentRunner.this.scheduler == null
===========================================================================
org.junit.runners.ParentRunner$1.finished():::ENTER
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$1.finished():::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::ENTER
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
childStatement has only one value
childStatement.getClass().getName() == org.junit.runners.ParentRunner$4.class
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$2:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(this.val$notifier.listeners[])-1 == size(org.junit.runners.ParentRunner.VALIDATORS[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$notifier has only one value
this.val$notifier.listeners has only one value
this.val$notifier.listeners[] contains no nulls and has only one value, of length 2
this.val$notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.val$notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.val$notifier.pleaseStop == false
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$2.listeners[])-1
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.listeners has only one value
$hidden$2.listeners[] contains no nulls and has only one value, of length 2
$hidden$2.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.pleaseStop == false
size($hidden$2.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::EXIT
this.val$notifier == orig($hidden$2)
this.val$notifier.listeners == $hidden$2.listeners
this.val$notifier.listeners[] == $hidden$2.listeners[]
this.val$notifier.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
this.val$notifier.pleaseStop == $hidden$2.pleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
$hidden$2.listeners == orig($hidden$2.listeners)
$hidden$2.listeners[] == orig($hidden$2.listeners[])
$hidden$2.listeners.getClass().getName() == orig($hidden$2.listeners.getClass().getName())
$hidden$2.pleaseStop == orig($hidden$2.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$2.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size($hidden$2.listeners[]))-1
$hidden$2.listeners has only one value
$hidden$2.listeners[] contains no nulls and has only one value, of length 2
$hidden$2.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.pleaseStop == false
size($hidden$2.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::EXIT
this.val$notifier == orig(this.val$notifier)
this.val$notifier.listeners == orig(this.val$notifier.listeners)
this.val$notifier.listeners[] == orig(this.val$notifier.listeners[])
this.val$notifier.listeners.getClass().getName() == orig(this.val$notifier.listeners.getClass().getName())
this.val$notifier.pleaseStop == orig(this.val$notifier.pleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.val$notifier.listeners[]))-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$3:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$statement has only one value
this.val$statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, org.junit.runners.model.Statement):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, org.junit.runners.model.Statement):::EXIT
this.val$statement == orig($hidden$2)
this.val$statement.getClass().getName() == orig($hidden$2.getClass().getName())
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$3.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$3.evaluate():::EXIT
this.val$statement == orig(this.val$statement)
this.val$statement.getClass().getName() == orig(this.val$statement.getClass().getName())
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$4:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(this.val$notifier.listeners[])-1 == size(org.junit.runners.ParentRunner.VALIDATORS[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$each has only one value
this.val$each.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
this.val$notifier has only one value
this.val$notifier.listeners has only one value
this.val$notifier.listeners[] contains no nulls and has only one value, of length 2
this.val$notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.val$notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.val$notifier.pleaseStop == false
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.listeners[]) == 2
org.junit.runners.ParentRunner.this.filteredChildren[] elements == this.val$each
this.val$each in org.junit.runners.ParentRunner.this.filteredChildren[]
this.val$each.getClass().getName() in org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$3.listeners[])-1
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
$hidden$3 has only one value
$hidden$3.listeners has only one value
$hidden$3.listeners[] contains no nulls and has only one value, of length 2
$hidden$3.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$3.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$3.pleaseStop == false
size($hidden$3.listeners[]) == 2
$hidden$2 in org.junit.runners.ParentRunner.this.filteredChildren[]
org.junit.runners.ParentRunner.this.filteredChildren[] elements == $hidden$2
$hidden$2.getClass().getName() in org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::EXIT
this.val$each == orig($hidden$2)
this.val$each.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$notifier == orig($hidden$3)
this.val$notifier.listeners == $hidden$3.listeners
this.val$notifier.listeners[] == $hidden$3.listeners[]
this.val$notifier.listeners.getClass().getName() == $hidden$3.listeners.getClass().getName()
this.val$notifier.pleaseStop == $hidden$3.pleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
$hidden$3.listeners == orig($hidden$3.listeners)
$hidden$3.listeners[] == orig($hidden$3.listeners[])
$hidden$3.listeners.getClass().getName() == orig($hidden$3.listeners.getClass().getName())
$hidden$3.pleaseStop == orig($hidden$3.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$3.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size($hidden$3.listeners[]))-1
$hidden$3.listeners has only one value
$hidden$3.listeners[] contains no nulls and has only one value, of length 2
$hidden$3.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$3.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$3.pleaseStop == false
size($hidden$3.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$4.run():::ENTER
===========================================================================
org.junit.runners.ParentRunner$4.run():::EXIT
this.val$each == orig(this.val$each)
this.val$each.getClass().getName() == orig(this.val$each.getClass().getName())
this.val$notifier == orig(this.val$notifier)
this.val$notifier.listeners == orig(this.val$notifier.listeners)
this.val$notifier.listeners[] == orig(this.val$notifier.listeners[])
this.val$notifier.listeners.getClass().getName() == orig(this.val$notifier.listeners.getClass().getName())
this.val$notifier.pleaseStop == orig(this.val$notifier.pleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.val$notifier.listeners[]))-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector:::OBJECT
this has only one value
this.entries has only one value
this.entries[] == []
this.entries[].getClass().getName() == []
this.entries.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.ClassRuleCollector():::EXIT
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.getOrderedRules():::ENTER
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.getOrderedRules():::EXIT
this.entries == orig(this.entries)
this.entries[] == return[]
this.entries.getClass().getName() == return.getClass().getName()
return[] == orig(this.entries[])
return.getClass().getName() == orig(this.entries.getClass().getName())
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS != null
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[] elements != null
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner:::OBJECT
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(this.filteredChildren[])
this has only one value
this.getClass().getName() == org.junit.runner.Computer$2.class
this.childrenLock has only one value
this.childrenLock != null
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR != null
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR != null
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations != null
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.testClass.fieldsForAnnotations != null
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[] elements != null
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler != null
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.getClass().getName() != org.junit.runners.ParentRunner.VALIDATORS.getClass().getName()
this.getClass().getName() != this.childrenLock.getClass().getName()
this.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.getClass().getName() != this.filteredChildren.getClass().getName()
this.getClass().getName() != this.scheduler.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.childrenLock.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.filteredChildren.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.scheduler.getClass().getName()
this.childrenLock.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != this.filteredChildren.getClass().getName()
this.childrenLock.getClass().getName() != this.scheduler.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.scheduler.getClass().getName()
this.filteredChildren.getClass().getName() != this.scheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::ENTER
testClass == null
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::EXIT
this.testClass.clazz == orig(testClass)
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.applyValidators(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.applyValidators(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::ENTER
this.testClass has only one value
this.filteredChildren has only one value
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT227
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT227;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return == false
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$3.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classRules():::ENTER
this.testClass has only one value
this.filteredChildren has only one value
===========================================================================
org.junit.runners.ParentRunner.classRules():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return[])
size(this.filteredChildren[])-1 == size(return[])
size(return[]) == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))-1
size(return[]) == orig(size(this.filteredChildren[]))-1
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.createTestClass(java.lang.Class):::ENTER
this.testClass == null
this.filteredChildren == null
testClass == null
===========================================================================
org.junit.runners.ParentRunner.createTestClass(java.lang.Class):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return.methodsForAnnotations.getClass().getName() == return.fieldsForAnnotations.getClass().getName()
this.testClass == null
this.filteredChildren == null
return has only one value
return.clazz == null
return.methodsForAnnotations has only one value
return.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
return.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.ParentRunner.getDescription():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getDescription():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == org.junit.runner.Description.EMPTY.fTestClass
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren[].getClass().getName() == orig(this.filteredChildren[].getClass().getName())
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
org.junit.runner.Description.serialVersionUID == size(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runner.Description.serialVersionUID == size(this.filteredChildren[])
org.junit.runner.Description.serialVersionUID == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(this.testClass.clazz)
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return.fAnnotations[])
this.testClass has only one value
this.filteredChildren has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "classes"
return.fUniqueId has only one value
org.junit.runners.ParentRunner.VALIDATORS[] elements == org.junit.runners.ParentRunner.VALIDATORS[org.junit.runner.Description.serialVersionUID-1]
this.filteredChildren[] == orig(this.filteredChildren[]) (elementwise)
this.filteredChildren[] is the reverse of orig(this.filteredChildren[])
this.filteredChildren[] elements == this.filteredChildren[org.junit.runner.Description.serialVersionUID-1]
orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1]) in this.filteredChildren[]
this.filteredChildren[] elements == orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1])
this.filteredChildren[].getClass().getName() == orig(this.filteredChildren[].getClass().getName()) (elementwise)
orig(this.filteredChildren[]) elements == this.filteredChildren[org.junit.runner.Description.serialVersionUID-1]
this.filteredChildren[org.junit.runner.Description.serialVersionUID-1] in orig(this.filteredChildren[])
orig(this.filteredChildren[]) elements == orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1])
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == return
this.filteredChildren[] == return[]
this.filteredChildren.getClass().getName() == return.getClass().getName()
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return[].getClass().getName() == orig(this.filteredChildren[].getClass().getName())
return.getClass().getName() == orig(this.filteredChildren.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(return[])
this.testClass has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return[] == orig(this.filteredChildren[]) (elementwise)
return[] is the reverse of orig(this.filteredChildren[])
return[].getClass().getName() == orig(this.filteredChildren[].getClass().getName()) (elementwise)
===========================================================================
org.junit.runners.ParentRunner.getRunnerAnnotations():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getRunnerAnnotations():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return[])
size(return[]) == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))-1
this.testClass has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == return
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == return.clazz
this.testClass.methodsForAnnotations == return.methodsForAnnotations
this.testClass.methodsForAnnotations.getClass().getName() == return.methodsForAnnotations.getClass().getName()
this.testClass.fieldsForAnnotations == return.fieldsForAnnotations
this.testClass.fieldsForAnnotations.getClass().getName() == return.methodsForAnnotations.getClass().getName()
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(this.testClass)
return.clazz == orig(this.testClass.clazz)
return.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
return.methodsForAnnotations.getClass().getName() == return.fieldsForAnnotations.getClass().getName()
return.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
return.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
return.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
return has only one value
return.clazz == null
return.methodsForAnnotations has only one value
return.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
return.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != return.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != orig(this.getClass().getName())
this.childrenLock.getClass().getName() != return.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != orig(this.getClass().getName())
this.scheduler.getClass().getName() != return.methodsForAnnotations.getClass().getName()
this.scheduler.getClass().getName() != orig(this.getClass().getName())
return.methodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
child has only one value
child.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
child in this.filteredChildren[]
this.filteredChildren[] elements == child
child.getClass().getName() in this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return == false
orig(child) in this.filteredChildren[]
this.filteredChildren[] elements == orig(child)
orig(child.getClass().getName()) in this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.validate():::ENTER
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.validate():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.validateClassRules(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.validateClassRules(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
isStatic == true
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withInterruptIsolation(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withInterruptIsolation(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$3.class
===========================================================================
org.junit.runners.RuleContainer$1:::OBJECT
this has only one value
===========================================================================
org.junit.runners.RuleContainer$1.():::EXIT
===========================================================================
org.junit.runners.Suite:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.Suite:::OBJECT
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName()
this.runners.getClass().getName() == this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(this.runners[]) == size(org.junit.runners.ParentRunner.VALIDATORS[])
this has only one value
this.runners has only one value
this.runners[] contains no nulls and has only one value, of length 1
this.runners[] elements has only one value
this.runners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
this.runners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
this.runners.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.childrenLock has only one value
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.runners[] == this.filteredChildren[] (elementwise)
this.runners[] is the reverse of this.filteredChildren[]
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName() (elementwise)
this.runners.getClass().getName() != org.junit.runners.ParentRunner.VALIDATORS.getClass().getName()
this.runners.getClass().getName() != this.childrenLock.getClass().getName()
this.runners.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.runners.getClass().getName() != this.scheduler.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.childrenLock.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.scheduler.getClass().getName()
this.childrenLock.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != this.scheduler.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.scheduler.getClass().getName()
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::ENTER
klass == null
runners has only one value
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
runners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
runners.getClass().getName() == java.util.ArrayList.class
size(runners[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::EXIT
this.runners[] == runners[]
this.testClass.clazz == orig(klass)
runners[] == orig(runners[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(runners[]))
this.filteredChildren == null
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
runners[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(classes[]))
this.filteredChildren == null
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::ENTER
this.runners[] == this.filteredChildren[]
this.filteredChildren has only one value
child has only one value
child.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
child in this.runners[]
this.runners[] elements == child
child.getClass().getName() in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::EXIT
this.runners == orig(this.runners)
this.runners[] == this.filteredChildren[]
this.runners[] == orig(this.runners[])
this.runners[] == orig(this.filteredChildren[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
this.runners.getClass().getName() == orig(this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == org.junit.runner.Description.EMPTY.fTestClass
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
org.junit.runner.Description.serialVersionUID == size(this.runners[])
org.junit.runner.Description.serialVersionUID == size(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runner.Description.serialVersionUID == size(this.filteredChildren[])
org.junit.runner.Description.serialVersionUID == orig(size(this.runners[]))
org.junit.runner.Description.serialVersionUID == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))
org.junit.runner.Description.serialVersionUID == orig(size(this.filteredChildren[]))
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(this.testClass.clazz)
orig(child) == this.runners[org.junit.runner.Description.serialVersionUID-1]
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return.fAnnotations[])
this.filteredChildren has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTestFailingTests"
return.fUniqueId has only one value
orig(child) in this.runners[]
this.runners[] elements == orig(child)
this.runners[] elements == this.runners[org.junit.runner.Description.serialVersionUID-1]
orig(child.getClass().getName()) in this.runners[].getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS[] elements == org.junit.runners.ParentRunner.VALIDATORS[org.junit.runner.Description.serialVersionUID-1]
===========================================================================
org.junit.runners.Suite.getChildren():::ENTER
this.filteredChildren == null
===========================================================================
org.junit.runners.Suite.getChildren():::EXIT
this.runners == return
this.runners[] == return[]
this.runners.getClass().getName() == return.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(this.runners)
return[] == orig(this.runners[])
return.getClass().getName() == orig(this.runners.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(return[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
this.filteredChildren == null
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::ENTER
this.runners[] == this.filteredChildren[]
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.filteredChildren has only one value
runner has only one value
runner.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
runner in this.runners[]
this.runners[] elements == runner
runner.getClass().getName() in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::EXIT
this.runners == orig(this.runners)
this.runners[] == this.filteredChildren[]
this.runners[] == orig(this.runners[])
this.runners[] == orig(this.filteredChildren[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
this.runners.getClass().getName() == orig(this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
orig(runner) in this.runners[]
this.runners[] elements == orig(runner)
orig(runner.getClass().getName()) in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
this.getClass().getName() != this.parents.getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder.RunnerBuilder():::EXIT
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == orig(parent)
this.parents has only one value
return == null
===========================================================================
org.junit.runners.model.RunnerBuilder.configureRunner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.runners.model.RunnerBuilder.configureRunner(org.junit.runner.Runner):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
klass == null
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
this.parents has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.JUnit38ClassRunner]
return[].getClass().getName() elements == org.junit.internal.runners.JUnit38ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT74
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return.getClass().getName() == org.junit.internal.runners.JUnit38ClassRunner.class
===========================================================================
org.junit.runners.model.Statement:::OBJECT
===========================================================================
org.junit.runners.model.Statement.Statement():::EXIT
===========================================================================
org.junit.runners.model.TestClass$FieldComparator:::OBJECT
this has only one value
===========================================================================
org.junit.runners.model.TestClass$FieldComparator.FieldComparator():::EXIT
===========================================================================
org.junit.runners.model.TestClass$MethodComparator:::OBJECT
this has only one value
===========================================================================
org.junit.runners.model.TestClass$MethodComparator.MethodComparator():::EXIT
===========================================================================
org.junit.runners.model.TestClass:::CLASS
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR != null
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR != null
===========================================================================
org.junit.runners.model.TestClass:::OBJECT
this.methodsForAnnotations.getClass().getName() == this.fieldsForAnnotations.getClass().getName()
this has only one value
this.clazz == null
this.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::ENTER
clazz == null
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::EXIT
this.clazz == orig(clazz)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::ENTER
this.clazz == test
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
test == null
annotationClass has only one value
valueClass has only one value
consumer has only one value
consumer.getClass().getName() == org.junit.runners.ParentRunner$ClassRuleCollector.class
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.clazz == orig(test)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::ENTER
this.clazz == test
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
test == null
annotationClass has only one value
valueClass has only one value
consumer has only one value
consumer.getClass().getName() == org.junit.runners.ParentRunner$ClassRuleCollector.class
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.clazz == orig(test)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
annotationClass has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class, boolean):::ENTER
map.getClass().getName() == java.util.Collections$UnmodifiableMap.class
fillIfAbsent == false
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class, boolean):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$EmptyList.class
return.getClass().getName() != orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT215
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == return
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
return == orig(this.clazz)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return == null
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::ENTER
testClass == null
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.TestClass.makeDeeplyUnmodifiable(java.util.Map):::ENTER
source.getClass().getName() == java.util.LinkedHashMap.class
===========================================================================
org.junit.runners.model.TestClass.makeDeeplyUnmodifiable(java.util.Map):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return.getClass().getName() == java.util.Collections$UnmodifiableMap.class
===========================================================================
org.junit.runners.model.TestClass.scanAnnotatedMembers(java.util.Map, java.util.Map):::ENTER
this.methodsForAnnotations == this.fieldsForAnnotations
this.methodsForAnnotations == null
methodsForAnnotations has only one value
methodsForAnnotations.getClass().getName() == java.util.LinkedHashMap.class
fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.scanAnnotatedMembers(java.util.Map, java.util.Map):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == this.fieldsForAnnotations
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations == null
===========================================================================
org.junit.validator.AnnotationValidatorFactory:::CLASS
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationValidatorFactory:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationValidatorFactory.AnnotationValidatorFactory():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator:::OBJECT
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator.AnnotatableValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator.ClassValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator.FieldValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator.MethodValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator:::CLASS
org.junit.validator.AnnotationsValidator.VALIDATORS has only one value
org.junit.validator.AnnotationsValidator.VALIDATORS[] contains no nulls and has only one value, of length 3
org.junit.validator.AnnotationsValidator.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator.ClassValidator, org.junit.validator.AnnotationsValidator.MethodValidator, org.junit.validator.AnnotationsValidator.FieldValidator]
org.junit.validator.AnnotationsValidator.VALIDATORS.getClass().getName() == java.util.Arrays$ArrayList.class
size(org.junit.validator.AnnotationsValidator.VALIDATORS[]) == 3
===========================================================================
org.junit.validator.AnnotationsValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator.AnnotationsValidator():::EXIT
Exiting Daikon.
