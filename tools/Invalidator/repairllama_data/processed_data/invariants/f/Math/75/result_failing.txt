Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 4 times.  Unmatched entries are ignored!
Unterminated calls:
  org.junit.runner.JUnitCore.main(java.lang.String[]) : 1 invocation
  org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class) : 1 invocation
  org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class) : 1 invocation
  org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
com.sun.proxy.$Proxy3:::CLASS
com.sun.proxy.$Proxy3.m1 has only one value
com.sun.proxy.$Proxy3.m2 has only one value
com.sun.proxy.$Proxy3.m3 has only one value
com.sun.proxy.$Proxy3.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy3:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
return has only one value
===========================================================================
junit.runner.Version.id():::EXIT
return has only one value
return.toString == "4.13.2-Daikon"
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String):::ENTER
className has only one value
className.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String):::EXIT
className.toString == orig(className.toString)
className.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
return has only one value
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String, java.lang.Class):::ENTER
className has only one value
className.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
callingClass has only one value
===========================================================================
org.junit.internal.Classes.getClass(java.lang.String, java.lang.Class):::EXIT
className.toString == orig(className.toString)
className.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
return has only one value
===========================================================================
org.junit.internal.RealSystem:::OBJECT
this has only one value
===========================================================================
org.junit.internal.RealSystem.RealSystem():::EXIT
===========================================================================
org.junit.internal.RealSystem.out():::ENTER
===========================================================================
org.junit.internal.RealSystem.out():::EXIT
return has only one value
===========================================================================
org.junit.internal.TextListener:::OBJECT
this has only one value
this.writer has only one value
this.writer != null
===========================================================================
org.junit.internal.TextListener.TextListener(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
org.junit.internal.TextListener.TextListener(java.io.PrintStream):::EXIT
this.writer == orig(writer)
===========================================================================
org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem):::ENTER
system has only one value
system.getClass().getName() == org.junit.internal.RealSystem.class
===========================================================================
org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem):::EXIT
===========================================================================
org.junit.internal.TextListener.elapsedTimeAsString(long):::ENTER
runTime == 55
===========================================================================
org.junit.internal.TextListener.elapsedTimeAsString(long):::EXIT
this.writer == orig(this.writer)
return has only one value
return.toString == "0.055"
===========================================================================
org.junit.internal.TextListener.getWriter():::ENTER
===========================================================================
org.junit.internal.TextListener.getWriter():::EXIT
this.writer == return
return == orig(this.writer)
return has only one value
===========================================================================
org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String):::ENTER
org.junit.runner.notification.Failure.serialVersionUID == org.junit.runner.Description.serialVersionUID
each has only one value
each.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
each.fDescription.fChildren has only one value
each.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
each.fDescription.fDisplayName has only one value
each.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
each.fDescription.fUniqueId has only one value
each.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
each.fDescription.fAnnotations has only one value
each.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
each.fDescription.fAnnotations[] == []
each.fDescription.fAnnotations[].getClass().getName() == []
each.fDescription.fTestClass == null
each.fThrownException has only one value
prefix has only one value
prefix.toString == "1"
===========================================================================
org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String):::EXIT
this.writer == orig(this.writer)
each.fDescription == orig(each.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
each.fDescription.fChildren == orig(each.fDescription.fChildren)
each.fDescription.fChildren.getClass().getName() == orig(each.fDescription.fChildren.getClass().getName())
each.fDescription.fDisplayName == orig(each.fDescription.fDisplayName)
each.fDescription.fDisplayName.toString == orig(each.fDescription.fDisplayName.toString)
each.fDescription.fUniqueId == orig(each.fDescription.fUniqueId)
each.fDescription.fUniqueId.getClass().getName() == orig(each.fDescription.fUniqueId.getClass().getName())
each.fDescription.fAnnotations == orig(each.fDescription.fAnnotations)
each.fDescription.fAnnotations.getClass().getName() == orig(each.fDescription.fAnnotations.getClass().getName())
each.fDescription.fAnnotations[] == orig(each.fDescription.fAnnotations[])
each.fDescription.fTestClass == orig(each.fDescription.fTestClass)
each.fThrownException == orig(each.fThrownException)
prefix.toString == orig(prefix.toString)
each.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
each.fDescription.fChildren has only one value
each.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
each.fDescription.fDisplayName has only one value
each.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
each.fDescription.fUniqueId has only one value
each.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
each.fDescription.fAnnotations has only one value
each.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
each.fDescription.fAnnotations[] == []
each.fDescription.fAnnotations[].getClass().getName() == []
each.fDescription.fTestClass == null
each.fThrownException has only one value
prefix.toString == "1"
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(result.failures[])
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::EXIT73
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.printFooter(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(result.failures[])
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.printFooter(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.printHeader(long):::ENTER
runTime == 55
===========================================================================
org.junit.internal.TextListener.printHeader(long):::EXIT
this.writer == orig(this.writer)
===========================================================================
org.junit.internal.TextListener.testFailure(org.junit.runner.notification.Failure):::ENTER
org.junit.runner.notification.Failure.serialVersionUID == org.junit.runner.Description.serialVersionUID
failure has only one value
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass == null
failure.fThrownException has only one value
===========================================================================
org.junit.internal.TextListener.testFailure(org.junit.runner.notification.Failure):::EXIT
this.writer == orig(this.writer)
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren.getClass().getName() == orig(failure.fDescription.fChildren.getClass().getName())
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fUniqueId == orig(failure.fDescription.fUniqueId)
failure.fDescription.fUniqueId.getClass().getName() == orig(failure.fDescription.fUniqueId.getClass().getName())
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fDescription.fTestClass == orig(failure.fDescription.fTestClass)
failure.fThrownException == orig(failure.fThrownException)
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass == null
failure.fThrownException has only one value
===========================================================================
org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(result.failures[])
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.internal.TextListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.internal.TextListener.testStarted(org.junit.runner.Description):::EXIT
this.writer == orig(this.writer)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.internal.Throwables$1:::OBJECT
this has only one value
this.val$list has only one value
this.val$list != null
this.val$list[] contains no nulls and has only one value, of length 20
this.val$list[] elements != null
this.val$list[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]
this.val$list[].getClass().getName() elements == java.lang.StackTraceElement.class
this.val$list.getClass().getName() == java.util.Arrays$ArrayList.class
size(this.val$list[]) == 20
===========================================================================
org.junit.internal.Throwables$1.(java.util.List):::ENTER
$hidden$1 has only one value
$hidden$1[] contains no nulls and has only one value, of length 20
$hidden$1[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]
$hidden$1[].getClass().getName() elements == java.lang.StackTraceElement.class
$hidden$1.getClass().getName() == java.util.Arrays$ArrayList.class
size($hidden$1[]) == 20
===========================================================================
org.junit.internal.Throwables$1.(java.util.List):::EXIT
this.val$list == orig($hidden$1)
this.val$list[] == $hidden$1[]
this.val$list.getClass().getName() == orig($hidden$1.getClass().getName())
$hidden$1[] == orig($hidden$1[])
$hidden$1[] contains no nulls and has only one value, of length 20
$hidden$1[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]
$hidden$1[].getClass().getName() elements == java.lang.StackTraceElement.class
===========================================================================
org.junit.internal.Throwables$1.get(int):::ENTER
index <= size(this.val$list[])-1
===========================================================================
org.junit.internal.Throwables$1.get(int):::EXIT
this.val$list == orig(this.val$list)
this.val$list[] == orig(this.val$list[])
this.val$list.getClass().getName() == orig(this.val$list.getClass().getName())
return != null
return.getClass().getName() == java.lang.StackTraceElement.class
return in this.val$list[]
return.getClass().getName() in this.val$list[].getClass().getName()
this.val$list.getClass().getName() != return.getClass().getName()
orig(index) <= size(this.val$list[])-1
===========================================================================
org.junit.internal.Throwables$1.size():::ENTER
===========================================================================
org.junit.internal.Throwables$1.size():::EXIT
this.val$list == orig(this.val$list)
this.val$list[] == orig(this.val$list[])
this.val$list.getClass().getName() == orig(this.val$list.getClass().getName())
return == size(this.val$list[])
return == orig(size(this.val$list[]))
return == 20
this.val$list[return-1] has only one value
===========================================================================
org.junit.internal.Throwables$State$1:::CLASS
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == org.junit.internal.Throwables$State$1.class
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == org.junit.internal.Throwables$State$2.class
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == org.junit.internal.Throwables$State$3.class
org.junit.internal.Throwables$State.DONE has only one value
org.junit.internal.Throwables$State.DONE.getClass().getName() == org.junit.internal.Throwables$State$4.class
org.junit.internal.Throwables$State.$VALUES has only one value
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == org.junit.internal.Throwables$State[].class
org.junit.internal.Throwables$State.$VALUES[] contains no nulls and has only one value, of length 4
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() == [null, null, null, null]
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() elements == null
size(org.junit.internal.Throwables$State.$VALUES[]) == 4
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.DONE in org.junit.internal.Throwables$State.$VALUES[]
===========================================================================
org.junit.internal.Throwables$State$1:::OBJECT
this has only one value
===========================================================================
org.junit.internal.Throwables$State$1.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "PROCESSING_OTHER_CODE"
$hidden$2 == 0
===========================================================================
org.junit.internal.Throwables$State$1.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "PROCESSING_OTHER_CODE"
===========================================================================
org.junit.internal.Throwables$State$1.processLine(java.lang.String):::ENTER
methodName has only one value
methodName.toString == "org.junit.runner.JUnitCore.main()"
===========================================================================
org.junit.internal.Throwables$State$1.processLine(java.lang.String):::EXIT189
===========================================================================
org.junit.internal.Throwables$State$1.processLine(java.lang.String):::EXIT
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE)
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == return
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE)
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == return.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE)
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName())
org.junit.internal.Throwables$State.DONE == orig(org.junit.internal.Throwables$State.DONE)
org.junit.internal.Throwables$State.DONE.getClass().getName() == orig(org.junit.internal.Throwables$State.DONE.getClass().getName())
org.junit.internal.Throwables$State.$VALUES == orig(org.junit.internal.Throwables$State.$VALUES)
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == orig(org.junit.internal.Throwables$State.$VALUES.getClass().getName())
org.junit.internal.Throwables$State.$VALUES[] == orig(org.junit.internal.Throwables$State.$VALUES[])
methodName.toString == orig(methodName.toString)
methodName.toString == "org.junit.runner.JUnitCore.main()"
===========================================================================
org.junit.internal.Throwables$State$2:::CLASS
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE != null
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == org.junit.internal.Throwables$State$1.class
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE != null
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == org.junit.internal.Throwables$State$2.class
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE != null
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == org.junit.internal.Throwables$State$3.class
org.junit.internal.Throwables$State.DONE has only one value
org.junit.internal.Throwables$State.DONE != null
org.junit.internal.Throwables$State.DONE.getClass().getName() == org.junit.internal.Throwables$State$4.class
org.junit.internal.Throwables$State.$VALUES has only one value
org.junit.internal.Throwables$State.$VALUES != null
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == org.junit.internal.Throwables$State[].class
org.junit.internal.Throwables$State.$VALUES[] contains no nulls and has only one value, of length 4
org.junit.internal.Throwables$State.$VALUES[] elements != null
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() == [null, null, null, null]
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() elements == null
size(org.junit.internal.Throwables$State.$VALUES[]) == 4
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.DONE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.DONE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
===========================================================================
org.junit.internal.Throwables$State$2:::OBJECT
this has only one value
===========================================================================
org.junit.internal.Throwables$State$2.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "PROCESSING_TEST_FRAMEWORK_CODE"
$hidden$2 == 1
===========================================================================
org.junit.internal.Throwables$State$2.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "PROCESSING_TEST_FRAMEWORK_CODE"
===========================================================================
org.junit.internal.Throwables$State$2.processLine(java.lang.String):::ENTER
methodName != null
===========================================================================
org.junit.internal.Throwables$State$2.processLine(java.lang.String):::EXIT197
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == return
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == return.getClass().getName()
methodName.toString == "java.lang.reflect.Method.invoke()"
orig(methodName) has only one value
===========================================================================
org.junit.internal.Throwables$State$2.processLine(java.lang.String):::EXIT199
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == return
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == return.getClass().getName()
===========================================================================
org.junit.internal.Throwables$State$2.processLine(java.lang.String):::EXIT
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE)
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE)
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE)
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName())
org.junit.internal.Throwables$State.DONE == orig(org.junit.internal.Throwables$State.DONE)
org.junit.internal.Throwables$State.DONE.getClass().getName() == orig(org.junit.internal.Throwables$State.DONE.getClass().getName())
org.junit.internal.Throwables$State.$VALUES == orig(org.junit.internal.Throwables$State.$VALUES)
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == orig(org.junit.internal.Throwables$State.$VALUES.getClass().getName())
org.junit.internal.Throwables$State.$VALUES[] == orig(org.junit.internal.Throwables$State.$VALUES[])
methodName.toString == orig(methodName.toString)
return != null
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != return.getClass().getName()
org.junit.internal.Throwables$State.DONE.getClass().getName() != return.getClass().getName()
org.junit.internal.Throwables$State.$VALUES.getClass().getName() != return.getClass().getName()
return in org.junit.internal.Throwables$State.$VALUES[]
===========================================================================
org.junit.internal.Throwables$State$3:::CLASS
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == org.junit.internal.Throwables$State$1.class
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == org.junit.internal.Throwables$State$2.class
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == org.junit.internal.Throwables$State$3.class
org.junit.internal.Throwables$State.DONE has only one value
org.junit.internal.Throwables$State.DONE.getClass().getName() == org.junit.internal.Throwables$State$4.class
org.junit.internal.Throwables$State.$VALUES has only one value
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == org.junit.internal.Throwables$State[].class
org.junit.internal.Throwables$State.$VALUES[] contains no nulls and has only one value, of length 4
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() == [null, null, null, null]
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() elements == null
size(org.junit.internal.Throwables$State.$VALUES[]) == 4
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.DONE in org.junit.internal.Throwables$State.$VALUES[]
===========================================================================
org.junit.internal.Throwables$State$3:::OBJECT
this has only one value
===========================================================================
org.junit.internal.Throwables$State$3.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "PROCESSING_REFLECTION_CODE"
$hidden$2 == 2
===========================================================================
org.junit.internal.Throwables$State$3.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "PROCESSING_REFLECTION_CODE"
===========================================================================
org.junit.internal.Throwables$State$3.processLine(java.lang.String):::ENTER
methodName.toString one of { "java.lang.reflect.AccessibleObject.checkAccess()", "jdk.internal.reflect.Reflection.newIllegalAccessException()" }
===========================================================================
org.junit.internal.Throwables$State$3.processLine(java.lang.String):::EXIT207
===========================================================================
org.junit.internal.Throwables$State$3.processLine(java.lang.String):::EXIT
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE)
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE)
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == return
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE)
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == return.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName())
org.junit.internal.Throwables$State.DONE == orig(org.junit.internal.Throwables$State.DONE)
org.junit.internal.Throwables$State.DONE.getClass().getName() == orig(org.junit.internal.Throwables$State.DONE.getClass().getName())
org.junit.internal.Throwables$State.$VALUES == orig(org.junit.internal.Throwables$State.$VALUES)
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == orig(org.junit.internal.Throwables$State.$VALUES.getClass().getName())
org.junit.internal.Throwables$State.$VALUES[] == orig(org.junit.internal.Throwables$State.$VALUES[])
methodName.toString == orig(methodName.toString)
methodName.toString one of { "java.lang.reflect.AccessibleObject.checkAccess()", "jdk.internal.reflect.Reflection.newIllegalAccessException()" }
===========================================================================
org.junit.internal.Throwables$State$4:::OBJECT
this has only one value
===========================================================================
org.junit.internal.Throwables$State$4.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "DONE"
$hidden$2 == 3
===========================================================================
org.junit.internal.Throwables$State$4.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "DONE"
===========================================================================
org.junit.internal.Throwables$State:::CLASS
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE != null
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == org.junit.internal.Throwables$State$1.class
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE != null
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == org.junit.internal.Throwables$State$2.class
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE has only one value
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE != null
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == org.junit.internal.Throwables$State$3.class
org.junit.internal.Throwables$State.DONE has only one value
org.junit.internal.Throwables$State.DONE != null
org.junit.internal.Throwables$State.DONE.getClass().getName() == org.junit.internal.Throwables$State$4.class
org.junit.internal.Throwables$State.$VALUES has only one value
org.junit.internal.Throwables$State.$VALUES != null
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == org.junit.internal.Throwables$State[].class
org.junit.internal.Throwables$State.$VALUES[] contains no nulls and has only one value, of length 4
org.junit.internal.Throwables$State.$VALUES[] elements != null
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() == [null, null, null, null]
org.junit.internal.Throwables$State.$VALUES[].getClass().getName() elements == null
size(org.junit.internal.Throwables$State.$VALUES[]) == 4
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
org.junit.internal.Throwables$State.DONE in org.junit.internal.Throwables$State.$VALUES[]
org.junit.internal.Throwables$State.DONE.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
===========================================================================
org.junit.internal.Throwables$State:::OBJECT
this in org.junit.internal.Throwables$State.$VALUES[]
this.getClass().getName() != org.junit.internal.Throwables$State.DONE.getClass().getName()
this.getClass().getName() != org.junit.internal.Throwables$State.$VALUES.getClass().getName()
===========================================================================
org.junit.internal.Throwables$State.State(java.lang.String, int):::ENTER
===========================================================================
org.junit.internal.Throwables$State.State(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.junit.internal.Throwables$State.processStackTraceElement(java.lang.StackTraceElement):::ENTER
element != null
===========================================================================
org.junit.internal.Throwables$State.processStackTraceElement(java.lang.StackTraceElement):::EXIT
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE)
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE)
org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_TEST_FRAMEWORK_CODE.getClass().getName())
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE)
org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName() == orig(org.junit.internal.Throwables$State.PROCESSING_REFLECTION_CODE.getClass().getName())
org.junit.internal.Throwables$State.DONE == orig(org.junit.internal.Throwables$State.DONE)
org.junit.internal.Throwables$State.DONE.getClass().getName() == orig(org.junit.internal.Throwables$State.DONE.getClass().getName())
org.junit.internal.Throwables$State.$VALUES == orig(org.junit.internal.Throwables$State.$VALUES)
org.junit.internal.Throwables$State.$VALUES.getClass().getName() == orig(org.junit.internal.Throwables$State.$VALUES.getClass().getName())
org.junit.internal.Throwables$State.$VALUES[] == orig(org.junit.internal.Throwables$State.$VALUES[])
return != null
org.junit.internal.Throwables$State.PROCESSING_OTHER_CODE.getClass().getName() != return.getClass().getName()
org.junit.internal.Throwables$State.DONE.getClass().getName() != return.getClass().getName()
org.junit.internal.Throwables$State.DONE.getClass().getName() != orig(this.getClass().getName())
org.junit.internal.Throwables$State.$VALUES.getClass().getName() != return.getClass().getName()
org.junit.internal.Throwables$State.$VALUES.getClass().getName() != orig(this.getClass().getName())
return in org.junit.internal.Throwables$State.$VALUES[]
orig(this) in org.junit.internal.Throwables$State.$VALUES[]
===========================================================================
org.junit.internal.Throwables:::CLASS
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName()
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName()
size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])-1 == size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.getSuppressed has only one value
org.junit.internal.Throwables.getSuppressed != null
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES has only one value
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES != null
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == java.lang.String[].class
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] contains no nulls and has only one value, of length 8
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] elements != null
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[].getClass().getName() elements == java.lang.String.class
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[].toString == [org.junit.runner., org.junit.runners., org.junit.experimental.runners., org.junit.internal., junit.extensions, junit.framework, junit.runner, junit.textui]
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES has only one value
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES != null
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] contains no nulls and has only one value, of length 1
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] elements has only one value
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] elements != null
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[].getClass().getName() == [java.lang.String]
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[].getClass().getName() elements == java.lang.String.class
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[].toString == [org.junit.internal.StackTracesTest]
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[].toString elements == "org.junit.internal.StackTracesTest"
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES has only one value
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES != null
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] contains no nulls and has only one value, of length 7
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] elements != null
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[].getClass().getName() elements == java.lang.String.class
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[].toString == [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(]
size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]) == 8
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) == 1
===========================================================================
org.junit.internal.Throwables.asReversedList(java.util.List):::ENTER
list has only one value
list[] contains no nulls and has only one value, of length 20
list[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]
list[].getClass().getName() elements == java.lang.StackTraceElement.class
list.getClass().getName() == java.util.Arrays$ArrayList.class
size(list[]) == 20
===========================================================================
org.junit.internal.Throwables.asReversedList(java.util.List):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
list[] == orig(list[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
size(return[]) == orig(size(list[]))
list[] contains no nulls and has only one value, of length 20
list[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]
list[].getClass().getName() elements == java.lang.StackTraceElement.class
return has only one value
return[] contains no nulls and has only one value, of length 20
return.getClass().getName() == org.junit.internal.Throwables$1.class
size(return[]) == 20
list[] is the reverse of return[]
===========================================================================
org.junit.internal.Throwables.getFullStackTrace(java.lang.Throwable):::ENTER
exception has only one value
===========================================================================
org.junit.internal.Throwables.getFullStackTrace(java.lang.Throwable):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
return has only one value
return.toString == "java.lang.IllegalAccessException: class org.junit.internal.runners.SuiteMethod cannot access a member of class org.apache.commons.math.stat.FrequencyTestFailingTests with modifiers \"public static\"\n\tat java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:361)\n\tat java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:591)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:558)\n\tat org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(SuiteMethod.java:35)\n\tat org.junit.internal.runners.SuiteMethod.<init>(SuiteMethod.java:24)\n\tat org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(SuiteMethodBuilder.java:11)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:37)\n\tat org.junit.runner.Computer.getRunner(Computer.java:50)\n\tat org.junit.runner.Computer$1.runnerForClass(Computer.java:31)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:125)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:111)\n\tat org.junit.runners.Suite.<init>(Suite.java:81)\n\tat org.junit.runner.Computer$2.<init>(Computer.java:33)\n\tat org.junit.runner.Computer.getSuite(Computer.java:28)\n\tat org.junit.runner.Request.classes(Request.java:77)\n\tat org.junit.runner.JUnitCommandLineParseResult.createRequest(JUnitCommandLineParseResult.java:116)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n"
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTrace(java.lang.Throwable):::ENTER
exception has only one value
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTrace(java.lang.Throwable):::EXIT76
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTrace(java.lang.Throwable):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
return has only one value
return.toString == "java.lang.IllegalAccessException: class org.junit.internal.runners.SuiteMethod cannot access a member of class org.apache.commons.math.stat.FrequencyTestFailingTests with modifiers \"public static\"\n\tat java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:361)\n\tat java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:591)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:558)\n\tat org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(SuiteMethod.java:35)\n\tat org.junit.internal.runners.SuiteMethod.<init>(SuiteMethod.java:24)\n\tat org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(SuiteMethodBuilder.java:11)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:37)\n\tat org.junit.runner.Computer.getRunner(Computer.java:50)\n\tat org.junit.runner.Computer$1.runnerForClass(Computer.java:31)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:125)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:111)\n\tat org.junit.runners.Suite.<init>(Suite.java:81)\n\tat org.junit.runner.Computer$2.<init>(Computer.java:33)\n\tat org.junit.runner.Computer.getSuite(Computer.java:28)\n\tat org.junit.runner.Request.classes(Request.java:77)\n\tat org.junit.runner.JUnitCommandLineParseResult.createRequest(JUnitCommandLineParseResult.java:116)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n"
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTraceLines(java.lang.Throwable):::ENTER
exception has only one value
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTraceLines(java.lang.Throwable):::EXIT105
===========================================================================
org.junit.internal.Throwables.getTrimmedStackTraceLines(java.lang.Throwable):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])-1 == size(return[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
size(return[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]))-1
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$EmptyList.class
===========================================================================
org.junit.internal.Throwables.initGetSuppressed():::EXIT112
===========================================================================
org.junit.internal.Throwables.initGetSuppressed():::EXIT
return has only one value
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::ENTER
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == methodNamePrefixes.getClass().getName()
methodName != null
methodNamePrefixes != null
methodNamePrefixes[] elements != null
size(methodNamePrefixes[]) one of { 1, 7, 8 }
size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]) >= size(methodNamePrefixes[])
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) <= size(methodNamePrefixes[])
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) != size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])-1 <= size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) >= size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 != size(methodNamePrefixes[])
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT267
methodNamePrefixes[].toString one of { [org.junit.runner., org.junit.runners., org.junit.experimental.runners., org.junit.internal., junit.extensions, junit.framework, junit.runner, junit.textui], [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(] }
return == true
orig(size(methodNamePrefixes[])) one of { 7, 8 }
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) < size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) <= orig(size(methodNamePrefixes[]))
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 <= size(methodNamePrefixes[])-1
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT267;condition="return == true"
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT271
methodNamePrefixes[].toString one of { [org.junit.internal.StackTracesTest], [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(] }
return == false
orig(size(methodNamePrefixes[])) one of { 1, 7 }
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) >= orig(size(methodNamePrefixes[]))
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 >= size(methodNamePrefixes[])-1
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT271;condition="not(return == true)"
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(methodNamePrefixes.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
methodName.toString == orig(methodName.toString)
methodNamePrefixes[] == orig(methodNamePrefixes[])
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
(return == false)  ==>  (methodNamePrefixes[].toString one of { [org.junit.internal.StackTracesTest], [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(] })
(return == false)  ==>  (orig(size(methodNamePrefixes[])) one of { 1, 7 })
(return == false)  ==>  (size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) >= orig(size(methodNamePrefixes[])))
(return == false)  ==>  (size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 >= size(methodNamePrefixes[])-1)
(return == true)  ==>  (methodNamePrefixes[].toString one of { [org.junit.runner., org.junit.runners., org.junit.experimental.runners., org.junit.internal., junit.extensions, junit.framework, junit.runner, junit.textui], [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(] })
(return == true)  ==>  (orig(size(methodNamePrefixes[])) one of { 7, 8 })
(return == true)  ==>  (size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) <= orig(size(methodNamePrefixes[])))
(return == true)  ==>  (size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 <= size(methodNamePrefixes[])-1)
(return == true)  ==>  (size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) < size(methodNamePrefixes[])-1)
methodNamePrefixes[] elements != null
size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]) >= orig(size(methodNamePrefixes[]))
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) != size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) <= orig(size(methodNamePrefixes[]))
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])-1 <= size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) >= size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 != orig(size(methodNamePrefixes[]))
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT;condition="return == true"
methodNamePrefixes[].toString one of { [org.junit.runner., org.junit.runners., org.junit.experimental.runners., org.junit.internal., junit.extensions, junit.framework, junit.runner, junit.textui], [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(] }
return == true
orig(size(methodNamePrefixes[])) one of { 7, 8 }
size(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[]) < size(methodNamePrefixes[])-1
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) <= orig(size(methodNamePrefixes[]))
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 <= size(methodNamePrefixes[])-1
===========================================================================
org.junit.internal.Throwables.isMatchingMethod(java.lang.String, java.lang.String[]):::EXIT;condition="not(return == true)"
methodNamePrefixes[].toString one of { [org.junit.internal.StackTracesTest], [sun.reflect., java.lang.reflect., jdk.internal.reflect., org.junit.rules.RunRules.<init>(, org.junit.rules.RunRules.applyAll(, org.junit.runners.RuleContainer.apply(, junit.framework.TestCase.runBare(] }
return == false
orig(size(methodNamePrefixes[])) one of { 1, 7 }
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) >= orig(size(methodNamePrefixes[]))
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])-1 >= size(methodNamePrefixes[])-1
===========================================================================
org.junit.internal.Throwables.isReflectionMethod(java.lang.String):::ENTER
methodName != null
===========================================================================
org.junit.internal.Throwables.isReflectionMethod(java.lang.String):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
methodName.toString == orig(methodName.toString)
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
(return == true)  ==>  (methodName.toString one of { "java.lang.reflect.AccessibleObject.checkAccess()", "java.lang.reflect.Method.invoke()", "jdk.internal.reflect.Reflection.newIllegalAccessException()" })
===========================================================================
org.junit.internal.Throwables.isReflectionMethod(java.lang.String):::EXIT;condition="return == true"
methodName.toString one of { "java.lang.reflect.AccessibleObject.checkAccess()", "java.lang.reflect.Method.invoke()", "jdk.internal.reflect.Reflection.newIllegalAccessException()" }
return == true
===========================================================================
org.junit.internal.Throwables.isReflectionMethod(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.junit.internal.Throwables.isTestFrameworkMethod(java.lang.String):::ENTER
methodName != null
===========================================================================
org.junit.internal.Throwables.isTestFrameworkMethod(java.lang.String):::EXIT
org.junit.internal.Throwables.getSuppressed == orig(org.junit.internal.Throwables.getSuppressed)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES.getClass().getName() == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES.getClass().getName())
org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES[])
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES)
org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[] == orig(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[])
methodName.toString == orig(methodName.toString)
size(org.junit.internal.Throwables.REFLECTION_METHOD_NAME_PREFIXES[]) == orig(size(org.junit.internal.Throwables.TEST_FRAMEWORK_METHOD_NAME_PREFIXES[]))-1
return == true
===========================================================================
org.junit.internal.Throwables.isTestFrameworkMethod(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder:::OBJECT
this has only one value
this.canUseSuiteMethod == true
this.parents has only one value
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder():::EXIT
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == return.suiteBuilder.parents
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
return.suiteBuilder has only one value
return.suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.parents has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT39
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.ErrorReportingRunner.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT63
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT
this.canUseSuiteMethod == orig(this.canUseSuiteMethod)
this.parents == orig(this.parents)
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.builders.SuiteMethodBuilder.class
return.parents has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::CLASS
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::OBJECT
this.suiteBuilder.parents.getClass().getName() == this.parents.getClass().getName()
this has only one value
this.suiteBuilder has only one value
this.suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.suiteBuilder.parents has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::ENTER
suiteBuilder has only one value
suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::EXIT
this.suiteBuilder == orig(suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(suiteBuilder.getClass().getName())
this.suiteBuilder.parents == suiteBuilder.parents
this.parents.getClass().getName() == suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == orig(suiteBuilder.parents.getClass().getName())
suiteBuilder.parents == orig(suiteBuilder.parents)
suiteBuilder.parents has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::ENTER
currentTestClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::EXIT97
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.suiteBuilder == orig(this.suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(this.suiteBuilder.getClass().getName())
this.suiteBuilder.parents == orig(this.suiteBuilder.parents)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.suiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT90
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.suiteBuilder == orig(this.suiteBuilder)
this.suiteBuilder.getClass().getName() == orig(this.suiteBuilder.getClass().getName())
this.suiteBuilder.parents == orig(this.suiteBuilder.parents)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.suiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.IgnoredBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder():::EXIT
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT13
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == null
===========================================================================
org.junit.internal.builders.JUnit3Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit3Builder.JUnit3Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit4Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit4Builder.JUnit4Builder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22;condition="return == true"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == true
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT;condition="return == true"
===========================================================================
org.junit.internal.runners.ErrorReportingRunner:::OBJECT
this has only one value
this.causes[] contains no nulls and has only one value, of length 1
this.causes[] elements has only one value
this.causes[] elements != null
this.causes[].getClass().getName() == [java.lang.IllegalAccessException]
this.causes[].getClass().getName() elements == java.lang.IllegalAccessException.class
this.causes.getClass().getName() == java.util.Collections$SingletonList.class
this.classNames.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
size(this.causes[]) == 1
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable):::ENTER
testClass has only one value
cause has only one value
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable):::EXIT
this.causes has only one value
this.classNames has only one value
orig(cause) in this.causes[]
this.causes[] elements == orig(cause)
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Throwable, java.lang.Class[]):::ENTER
cause has only one value
testClasses has only one value
testClasses.getClass().getName() == java.lang.Class[].class
testClasses[] contains no nulls and has only one value, of length 1
testClasses[] elements has only one value
size(testClasses[]) == 1
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Throwable, java.lang.Class[]):::EXIT
testClasses[] == orig(testClasses[])
size(this.causes[]) == orig(size(testClasses[]))
this.causes has only one value
this.classNames has only one value
testClasses[] contains no nulls and has only one value, of length 1
testClasses[] elements has only one value
orig(cause) in this.causes[]
this.causes[] elements == orig(cause)
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.describeCause():::ENTER
this.causes has only one value
this.classNames has only one value
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.describeCause():::EXIT
this.causes == orig(this.causes)
this.causes[] == orig(this.causes[])
this.causes.getClass().getName() == orig(this.causes.getClass().getName())
this.classNames == orig(this.classNames)
this.classNames.toString == orig(this.classNames.toString)
org.junit.runner.Description.serialVersionUID == size(this.causes[])
org.junit.runner.Description.serialVersionUID == orig(size(this.causes[]))
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
size(this.causes[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fAnnotations[]) == orig(size(this.causes[]))-1
this.causes has only one value
this.classNames has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
this.causes[] elements == this.causes[org.junit.runner.Description.serialVersionUID-1]
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable):::ENTER
this.causes == null
this.classNames has only one value
cause has only one value
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable):::EXIT79
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable):::EXIT
this.causes == orig(this.causes)
this.classNames == orig(this.classNames)
this.classNames.toString == orig(this.classNames.toString)
this.causes == null
this.classNames has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [java.lang.IllegalAccessException]
return[].getClass().getName() elements == java.lang.IllegalAccessException.class
return.getClass().getName() == java.util.Collections$SingletonList.class
size(return[]) == 1
orig(cause) in return[]
return[] elements == orig(cause)
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.getClassNames(java.lang.Class[]):::ENTER
this.causes == null
this.classNames == null
testClasses has only one value
testClasses.getClass().getName() == java.lang.Class[].class
testClasses[] contains no nulls and has only one value, of length 1
testClasses[] elements has only one value
size(testClasses[]) == 1
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.getClassNames(java.lang.Class[]):::EXIT
this.causes == orig(this.causes)
this.classNames == orig(this.classNames)
testClasses[] == orig(testClasses[])
this.causes == null
this.classNames == null
testClasses[] contains no nulls and has only one value, of length 1
testClasses[] elements has only one value
return has only one value
return.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.getDescription():::ENTER
this.causes has only one value
this.classNames has only one value
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.getDescription():::EXIT
this.causes == orig(this.causes)
this.causes[] == orig(this.causes[])
this.causes.getClass().getName() == orig(this.causes.getClass().getName())
this.classNames == return.fDisplayName
this.classNames == orig(this.classNames)
this.classNames.toString == return.fDisplayName.toString
this.classNames.toString == orig(this.classNames.toString)
org.junit.runner.Description.serialVersionUID == size(this.causes[])
org.junit.runner.Description.serialVersionUID == orig(size(this.causes[]))
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
size(this.causes[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fAnnotations[]) == orig(size(this.causes[]))-1
this.causes has only one value
this.classNames has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fUniqueId has only one value
this.causes[] elements == this.causes[org.junit.runner.Description.serialVersionUID-1]
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
size(this.causes[]) == size(notifier.listeners[])-1
this.causes has only one value
this.classNames has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
this.causes == orig(this.causes)
this.causes[] == orig(this.causes[])
this.causes.getClass().getName() == orig(this.causes.getClass().getName())
this.classNames == orig(this.classNames)
this.classNames.toString == orig(this.classNames.toString)
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(this.causes[]) == size(notifier.listeners[])-1
size(this.causes[]) == orig(size(notifier.listeners[]))-1
this.causes has only one value
this.classNames has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier):::ENTER
size(this.causes[]) == size(notifier.listeners[])-1
this.causes has only one value
this.classNames has only one value
child has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
child in this.causes[]
this.causes[] elements == child
===========================================================================
org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier):::EXIT
this.causes == orig(this.causes)
this.causes[] == orig(this.causes[])
this.causes.getClass().getName() == orig(this.causes.getClass().getName())
this.classNames == orig(this.classNames)
this.classNames.toString == orig(this.classNames.toString)
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(this.causes[]) == size(notifier.listeners[])-1
size(this.causes[]) == orig(size(notifier.listeners[]))-1
this.causes has only one value
this.classNames has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
orig(child) in this.causes[]
this.causes[] elements == orig(child)
===========================================================================
org.junit.internal.runners.model.EachTestNotifier:::OBJECT
org.junit.runner.Description.serialVersionUID == size(this.notifier.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.description.fTestClass
this has only one value
this.notifier has only one value
this.notifier.listeners has only one value
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
this.description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.description.fChildren has only one value
this.description.fDisplayName has only one value
this.description.fDisplayName.toString == "classes"
this.description.fUniqueId has only one value
this.description.fAnnotations has only one value
size(this.notifier.listeners[]) == 2
this.notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(notifier.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(notifier.listeners[]) == 2
notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.notifier == orig(notifier)
this.notifier.listeners == notifier.listeners
this.notifier.listeners[] == notifier.listeners[]
this.notifier.listeners.getClass().getName() == notifier.listeners.getClass().getName()
this.notifier.pleaseStop == notifier.pleaseStop
this.description == orig(description)
org.junit.runner.Description.serialVersionUID == size(notifier.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == description.fChildren
this.description.fDisplayName == description.fDisplayName
this.description.fDisplayName.toString == description.fDisplayName.toString
this.description.fUniqueId == description.fUniqueId
this.description.fAnnotations == description.fAnnotations
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(notifier.listeners[]) == 2
notifier.listeners[org.junit.runner.Description.serialVersionUID] has only one value
notifier.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteFinished():::ENTER
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteFinished():::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.description == orig(this.description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == orig(this.description.fChildren)
this.description.fDisplayName == orig(this.description.fDisplayName)
this.description.fDisplayName.toString == orig(this.description.fDisplayName.toString)
this.description.fUniqueId == orig(this.description.fUniqueId)
this.description.fAnnotations == orig(this.description.fAnnotations)
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteStarted():::ENTER
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestSuiteStarted():::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
this.description == orig(this.description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.description.fChildren == orig(this.description.fChildren)
this.description.fDisplayName == orig(this.description.fDisplayName)
this.description.fDisplayName.toString == orig(this.description.fDisplayName.toString)
this.description.fUniqueId == orig(this.description.fUniqueId)
this.description.fAnnotations == orig(this.description.fAnnotations)
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder:::OBJECT
this.annotation != null
this.validators != null
this.validators[] elements != null
this.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.Builder(java.lang.Class):::ENTER
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.Builder(java.lang.Class):::EXIT
this.annotation == orig(annotation)
this.methods == false
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.build():::ENTER
size(this.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.build():::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.methods == orig(this.methods)
this.validators == return.validatorStrategies
this.validators == orig(this.validators)
this.validators[] == return.validatorStrategies[]
this.validators[] == orig(this.validators[])
this.validators.getClass().getName() == return.validatorStrategies.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
size(this.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.forMethods():::ENTER
this.methods == false
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.forMethods():::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.validators == return.validators
this.validators == orig(this.validators)
this.validators[] == return.validators[]
this.validators[] == orig(this.validators[])
this.validators.getClass().getName() == return.validators.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
return == orig(this)
this.methods == true
this.validators[] == []
this.validators[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.withValidator(org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator):::ENTER
validator != null
this.validators.getClass().getName() != validator.getClass().getName()
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$Builder.withValidator(org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator):::EXIT
this.annotation == return.annotation
this.annotation == orig(this.annotation)
this.methods == return.methods
this.methods == orig(this.methods)
this.validators == return.validators
this.validators == orig(this.validators)
this.validators[] == return.validators[]
this.validators.getClass().getName() == return.validators.getClass().getName()
this.validators.getClass().getName() == orig(this.validators.getClass().getName())
return == orig(this)
size(this.validators[])-1 == orig(size(this.validators[]))
return != null
size(this.validators[]) >= 1
orig(validator) in this.validators[]
this.validators.getClass().getName() != orig(validator.getClass().getName())
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$DeclaringClassMustBePublic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$DeclaringClassMustBePublic.DeclaringClassMustBePublic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeARule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeARule.FieldMustBeARule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeATestRule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeATestRule.FieldMustBeATestRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule.MemberMustBeNonStaticOrAlsoClassRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBePublic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBePublic.MemberMustBePublic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeStatic:::OBJECT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeStatic.MemberMustBeStatic():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeARule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeARule.MethodMustBeARule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeATestRule:::OBJECT
this has only one value
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeATestRule.MethodMustBeATestRule():::EXIT
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator:::CLASS
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.methods
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName()
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.methods
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[])-1 == size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[])
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == false
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 4
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule]
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == java.util.ArrayList.class
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 3
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeNonStaticOrAlsoClassRule, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeARule]
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == true
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 4
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule]
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies has only one value
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[] contains no nulls and has only one value, of length 3
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[].getClass().getName() == [org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeNonStaticOrAlsoClassRule, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeARule]
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == 4
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator:::OBJECT
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == this.annotation
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == this.validatorStrategies.getClass().getName()
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == size(this.validatorStrategies[])
this.validatorStrategies.getClass().getName() == java.util.ArrayList.class
size(this.validatorStrategies[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.RuleMemberValidator(org.junit.internal.runners.rules.RuleMemberValidator$Builder):::ENTER
builder.validators.getClass().getName() == java.util.ArrayList.class
size(builder.validators[]) one of { 3, 4 }
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.RuleMemberValidator(org.junit.internal.runners.rules.RuleMemberValidator$Builder):::EXIT
this.annotation == builder.annotation
this.annotation == orig(builder.annotation)
this.methods == builder.methods
this.methods == orig(builder.methods)
this.validatorStrategies == builder.validators
this.validatorStrategies == orig(builder.validators)
this.validatorStrategies[] == builder.validators[]
this.validatorStrategies[] == orig(builder.validators[])
this.validatorStrategies.getClass().getName() == builder.validators.getClass().getName()
this.validatorStrategies.getClass().getName() == orig(builder.validators.getClass().getName())
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.classRuleValidatorBuilder():::EXIT
return.annotation has only one value
return.methods == false
return.validators[] == []
return.validators[].getClass().getName() == []
return.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.testRuleValidatorBuilder():::EXIT
return.annotation has only one value
return.methods == false
return.validators[] == []
return.validators[].getClass().getName() == []
return.validators.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.validate(org.junit.runners.model.TestClass, java.util.List):::ENTER
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == errors.getClass().getName()
target.methodsForAnnotations.getClass().getName() == target.fieldsForAnnotations.getClass().getName()
this.validatorStrategies[].getClass().getName() one of { [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule], [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule] }
target has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
target.clazz == null
target.methodsForAnnotations has only one value
target.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
target.fieldsForAnnotations has only one value
errors has only one value
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.internal.runners.rules.RuleMemberValidator.validate(org.junit.runners.model.TestClass, java.util.List):::EXIT
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.annotation == orig(this.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(this.validatorStrategies.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies.getClass().getName() == orig(errors.getClass().getName())
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.annotation == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.annotation)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.methods == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.methods)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[])
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies)
org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[] == orig(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[])
this.methods == orig(this.methods)
this.validatorStrategies == orig(this.validatorStrategies)
this.validatorStrategies[] == orig(this.validatorStrategies[])
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
target.clazz == orig(target.clazz)
target.methodsForAnnotations == orig(target.methodsForAnnotations)
target.methodsForAnnotations.getClass().getName() == target.fieldsForAnnotations.getClass().getName()
target.methodsForAnnotations.getClass().getName() == orig(target.methodsForAnnotations.getClass().getName())
target.methodsForAnnotations.getClass().getName() == orig(target.fieldsForAnnotations.getClass().getName())
target.fieldsForAnnotations == orig(target.fieldsForAnnotations)
errors[] == orig(errors[])
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]) == orig(size(this.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_VALIDATOR.validatorStrategies[]))-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.CLASS_RULE_METHOD_VALIDATOR.validatorStrategies[]))-1
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR.validatorStrategies[]))
size(org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR.validatorStrategies[]) == orig(size(this.validatorStrategies[]))-1
this.validatorStrategies[].getClass().getName() one of { [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.FieldMustBeATestRule], [org.junit.internal.runners.rules.RuleMemberValidator.DeclaringClassMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBeStatic, org.junit.internal.runners.rules.RuleMemberValidator.MemberMustBePublic, org.junit.internal.runners.rules.RuleMemberValidator.MethodMustBeATestRule] }
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
target.clazz == null
target.methodsForAnnotations has only one value
target.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
target.fieldsForAnnotations has only one value
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runner.Computer$1:::OBJECT
this.val$builder.parents.getClass().getName() == this.parents.getClass().getName()
this has only one value
this.val$builder has only one value
this.val$builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.val$builder.parents has only one value
org.junit.runner.Computer.this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::ENTER
org.junit.runner.Computer.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
$hidden$2.parents has only one value
$hidden$2.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::EXIT
this.val$builder == orig($hidden$2)
this.val$builder.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$builder.parents == $hidden$2.parents
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents.getClass().getName() == $hidden$2.parents.getClass().getName()
this.parents.getClass().getName() == orig($hidden$2.parents.getClass().getName())
$hidden$2.parents == orig($hidden$2.parents)
$hidden$2.parents has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::EXIT
this.val$builder == orig(this.val$builder)
this.val$builder.getClass().getName() == orig(this.val$builder.getClass().getName())
this.val$builder.parents == orig(this.val$builder.parents)
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.val$builder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.internal.runners.ErrorReportingRunner.class
===========================================================================
org.junit.runner.Computer$2:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runner.Computer$2:::OBJECT
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName()
this.runners.getClass().getName() == this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(this.runners[]) == size(org.junit.runners.ParentRunner.VALIDATORS[])
this has only one value
org.junit.runner.Computer.this has only one value
this.runners has only one value
this.runners[] contains no nulls and has only one value, of length 1
this.runners[] elements has only one value
this.runners[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
this.runners[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
this.runners.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.childrenLock has only one value
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.runners[] == this.filteredChildren[] (elementwise)
this.runners[] is the reverse of this.filteredChildren[]
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName() (elementwise)
===========================================================================
org.junit.runner.Computer$2.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
org.junit.runner.Computer.this has only one value
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer$2.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(classes[]))
this.filteredChildren == null
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
===========================================================================
org.junit.runner.Computer$2.getName():::ENTER
===========================================================================
org.junit.runner.Computer$2.getName():::EXIT
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.runners == orig(this.runners)
this.runners[] == orig(this.runners[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
return has only one value
return.toString == "classes"
===========================================================================
org.junit.runner.Computer:::OBJECT
this has only one value
===========================================================================
org.junit.runner.Computer.Computer():::EXIT
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
testClass has only one value
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
return has only one value
return.getClass().getName() == org.junit.internal.runners.ErrorReportingRunner.class
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Description:::CLASS
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId != null
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fUniqueId != null
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description:::OBJECT
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == this.fAnnotations[].getClass().getName()
org.junit.runner.Description.EMPTY.fTestClass == this.fTestClass
this.fChildren != null
this.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
this.fDisplayName != null
this.fUniqueId != null
this.fUniqueId.getClass().getName() == java.lang.String.class
this.fAnnotations != null
this.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fAnnotations[] == []
this.fAnnotations[].getClass().getName() == []
this.fTestClass == null
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != this.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != this.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of this.fAnnotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDisplayName.toString
this.fChildren.getClass().getName() != this.fUniqueId.getClass().getName()
this.fChildren.getClass().getName() != this.fAnnotations.getClass().getName()
this.fUniqueId.getClass().getName() != this.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.io.Serializable, java.lang.annotation.Annotation[]):::ENTER
testClass == null
uniqueId.getClass().getName() == java.lang.String.class
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] == []
uniqueId.getClass().getName() != annotations.getClass().getName()
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.io.Serializable, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
this.fDisplayName == orig(displayName)
this.fDisplayName.toString == displayName.toString
this.fUniqueId == orig(uniqueId)
this.fUniqueId.getClass().getName() == orig(uniqueId.getClass().getName())
this.fAnnotations == orig(annotations)
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
this.fAnnotations[] == annotations[]
this.fTestClass == orig(testClass)
displayName.toString == orig(displayName.toString)
annotations[] == orig(annotations[])
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString < displayName.toString
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of annotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < displayName.toString
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
clazz == null
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] == []
===========================================================================
org.junit.runner.Description.Description(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
this.fDisplayName == orig(displayName)
this.fDisplayName.toString == displayName.toString
this.fAnnotations == orig(annotations)
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
this.fAnnotations[] == annotations[]
this.fTestClass == orig(clazz)
displayName.toString == orig(displayName.toString)
annotations[] == orig(annotations[])
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString < displayName.toString
org.junit.runner.Description.EMPTY.fAnnotations[] is the reverse of annotations[]
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < displayName.toString
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.fDisplayName.toString one of { "classes", "org.apache.commons.math.stat.FrequencyTestFailingTests" }
description.fDisplayName.toString one of { "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)", "org.apache.commons.math.stat.FrequencyTestFailingTests" }
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fUniqueId == orig(this.fUniqueId)
this.fAnnotations == orig(this.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.fDisplayName.toString one of { "classes", "org.apache.commons.math.stat.FrequencyTestFailingTests" }
description.fDisplayName.toString one of { "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)", "org.apache.commons.math.stat.FrequencyTestFailingTests" }
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
name.toString one of { "classes", "org.apache.commons.math.stat.FrequencyTestFailingTests" }
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
name.toString == return.fDisplayName.toString
name.toString == orig(name.toString)
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fDisplayName == orig(name)
return.fAnnotations == orig(annotations)
name.toString one of { "classes", "org.apache.commons.math.stat.FrequencyTestFailingTests" }
annotations[] == []
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.String, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
className has only one value
className.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
name has only one value
name.toString == "initializationError"
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.String, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
className.toString == orig(className.toString)
name.toString == orig(name.toString)
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fAnnotations == orig(annotations)
className.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
name.toString == "initializationError"
annotations[] == []
return.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
===========================================================================
org.junit.runner.Description.formatDisplayName(java.lang.String, java.lang.String):::ENTER
name has only one value
name.toString == "initializationError"
className has only one value
className.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
===========================================================================
org.junit.runner.Description.formatDisplayName(java.lang.String, java.lang.String):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
name.toString == orig(name.toString)
className.toString == orig(className.toString)
name.toString == "initializationError"
className.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
return.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::ENTER
this has only one value
this.fChildren has only one value
this.fDisplayName has only one value
this.fDisplayName.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
this.fUniqueId has only one value
this.fAnnotations has only one value
annotationType has only one value
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::EXIT279
===========================================================================
org.junit.runner.Description.getAnnotation(java.lang.Class):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
this.fUniqueId == orig(this.fUniqueId)
this.fAnnotations == orig(this.fAnnotations)
this.fChildren has only one value
this.fDisplayName has only one value
this.fDisplayName.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
this.fUniqueId has only one value
this.fAnnotations has only one value
return == null
===========================================================================
org.junit.runner.Description.getDisplayName():::ENTER
this has only one value
this.fChildren has only one value
this.fDisplayName has only one value
this.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
this.fUniqueId has only one value
this.fAnnotations has only one value
===========================================================================
org.junit.runner.Description.getDisplayName():::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == return
this.fDisplayName.toString == return.toString
this.fUniqueId == orig(this.fUniqueId)
this.fAnnotations == orig(this.fAnnotations)
return == orig(this.fDisplayName)
return.toString == orig(this.fDisplayName.toString)
this.fChildren has only one value
this.fUniqueId has only one value
this.fAnnotations has only one value
return has only one value
return.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
===========================================================================
org.junit.runner.JUnitCommandLineParseResult:::OBJECT
this.filterSpecs[] == this.parserErrors[]
this.filterSpecs.getClass().getName() == this.classes.getClass().getName()
this.filterSpecs.getClass().getName() == this.parserErrors.getClass().getName()
this has only one value
this.filterSpecs has only one value
this.filterSpecs != null
this.filterSpecs[] == []
this.filterSpecs[].getClass().getName() == []
this.filterSpecs.getClass().getName() == java.util.ArrayList.class
this.classes has only one value
this.classes != null
this.classes[] elements has only one value
this.classes[] elements != null
this.classes[].getClass().getName() elements == java.lang.Class.class
this.classes[].getClass().getName() one of { [], [java.lang.Class] }
this.parserErrors has only one value
this.parserErrors != null
size(this.classes[]) one of { 0, 1 }
size(this.filterSpecs[]) <= size(this.classes[])
size(this.filterSpecs[]) >= size(this.classes[])-1
size(this.filterSpecs[])-1 <= size(this.classes[])-1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.JUnitCommandLineParseResult():::EXIT
this.filterSpecs[] == this.classes[]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::ENTER
size(this.filterSpecs[]) == size(this.classes[])-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::EXIT131
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.applyFilterSpecs(org.junit.runner.Request):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.classes[] == orig(this.classes[])
this.parserErrors == orig(this.parserErrors)
return == orig(request)
return.getClass().getName() == orig(request.getClass().getName())
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == orig(size(this.classes[]))-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.copyArray(java.lang.String[], int, int):::ENTER
this.filterSpecs[] == this.classes[]
from == size(this.filterSpecs[])
to == size(args[])
size(this.filterSpecs[]) == size(args[])-1
args[from] == args[to-1]
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
to == 1
args[] elements == args[from]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.copyArray(java.lang.String[], int, int):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == this.classes[]
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == return[]
args[] == orig(args[])
return.getClass().getName() == orig(args.getClass().getName())
orig(from) == size(this.filterSpecs[])
orig(from) == size(this.classes[])
orig(from) == size(this.parserErrors[])
orig(from) == size(args[])-1
orig(from) == size(return[])-1
orig(from) == orig(size(this.classes[]))
orig(from) == orig(size(this.parserErrors[]))
orig(from) == orig(size(args[]))-1
orig(to) == size(return[])
args[orig(from)] == args[orig(to)-1]
args[orig(from)] == orig(args[post(to)-1])
args[orig(from)] == return[orig(to)-1]
args[orig(from)] == orig(args[to-1])
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
return has only one value
return.getClass().getName() == java.lang.String[].class
args[] elements == args[orig(from)]
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::ENTER
size(this.filterSpecs[]) == size(this.classes[])-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
computer has only one value
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::EXIT118
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.createRequest(org.junit.runner.Computer):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.classes[] == orig(this.classes[])
this.parserErrors == orig(this.parserErrors)
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == orig(size(this.classes[]))-1
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parse(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parse(java.lang.String[]):::EXIT
args[] == orig(args[])
return.filterSpecs[] == return.parserErrors[]
return.filterSpecs.getClass().getName() == return.classes.getClass().getName()
return.filterSpecs.getClass().getName() == return.parserErrors.getClass().getName()
size(args[])-1 == size(return.filterSpecs[])
size(args[])-1 == size(return.parserErrors[])
size(return.classes[]) == orig(size(args[]))
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
return has only one value
return.filterSpecs has only one value
return.filterSpecs[] == []
return.filterSpecs[].getClass().getName() == []
return.filterSpecs.getClass().getName() == java.util.ArrayList.class
return.classes has only one value
return.classes[] contains no nulls and has only one value, of length 1
return.classes[] elements has only one value
return.classes[].getClass().getName() == [java.lang.Class]
return.classes[].getClass().getName() elements == java.lang.Class.class
return.parserErrors has only one value
size(return.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseArgs(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseArgs(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == orig(args[])
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
size(this.classes[]) == orig(size(args[]))
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::EXIT80
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseOptions(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == this.classes[]
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == return[]
args[] == orig(args[])
return.getClass().getName() == orig(args.getClass().getName())
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == size(return[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
return has only one value
return.getClass().getName() == java.lang.String[].class
size(return[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseParameters(java.lang.String[]):::ENTER
this.filterSpecs[] == this.classes[]
size(this.filterSpecs[]) == size(args[])-1
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCommandLineParseResult.parseParameters(java.lang.String[]):::EXIT
this.filterSpecs == orig(this.filterSpecs)
this.filterSpecs[] == orig(this.filterSpecs[])
this.filterSpecs[] == orig(this.classes[])
this.filterSpecs[] == orig(this.parserErrors[])
this.filterSpecs.getClass().getName() == orig(this.filterSpecs.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.classes.getClass().getName())
this.filterSpecs.getClass().getName() == orig(this.parserErrors.getClass().getName())
this.classes == orig(this.classes)
this.parserErrors == orig(this.parserErrors)
args[] == orig(args[])
size(this.filterSpecs[]) == size(this.classes[])-1
size(this.filterSpecs[]) == size(args[])-1
size(this.filterSpecs[]) == orig(size(args[]))-1
size(this.classes[]) == orig(size(args[]))
this.classes[] contains no nulls and has only one value, of length 1
this.classes[].getClass().getName() == [java.lang.Class]
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
size(this.classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore:::OBJECT
this has only one value
this.notifier has only one value
this.notifier.listeners has only one value
this.notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.notifier.pleaseStop == false
size(this.notifier.listeners[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.JUnitCore.JUnitCore():::EXIT
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
===========================================================================
org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener):::ENTER
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
size(this.notifier.listeners[])-1 == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.defaultComputer():::EXIT
return has only one value
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 2
this.notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listener has only one value
size(this.notifier.listeners[]) == 2
listener in this.notifier.listeners[]
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
size(this.notifier.listeners[]) == orig(size(this.notifier.listeners[]))-1
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == size(return.failures[])
org.junit.runner.Result.serialVersionUID == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] contains no nulls and has only one value, of length 1
return.failures[] elements has only one value
return.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
return.failures[] elements == return.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::ENTER
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
runner has only one value
runner.getClass().getName() == org.junit.runner.Computer$2.class
size(this.notifier.listeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners[] == orig(this.notifier.listeners[])
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == size(return.failures[])
org.junit.runner.Result.serialVersionUID == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] contains no nulls and has only one value, of length 1
return.failures[] elements has only one value
return.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
return.failures[] elements == return.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[]):::ENTER
size(this.notifier.listeners[]) == size(args[])-1
this.notifier.listeners[] == []
this.notifier.listeners[].getClass().getName() == []
system has only one value
system.getClass().getName() == org.junit.internal.RealSystem.class
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[]):::EXIT
this.notifier == orig(this.notifier)
this.notifier.listeners == orig(this.notifier.listeners)
this.notifier.listeners.getClass().getName() == orig(this.notifier.listeners.getClass().getName())
this.notifier.pleaseStop == orig(this.notifier.pleaseStop)
args[] == orig(args[])
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.notifier.listeners[])
org.junit.runner.Result.serialVersionUID == size(return.failures[])
org.junit.runner.Result.serialVersionUID == orig(size(args[]))
size(args[])-1 == orig(size(this.notifier.listeners[]))
this.notifier.listeners[] contains no nulls and has only one value, of length 1
this.notifier.listeners[] elements has only one value
this.notifier.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.notifier.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.math.stat.FrequencyTestFailingTests]
args[].toString elements == "org.apache.commons.math.stat.FrequencyTestFailingTests"
return has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
return.count has only one value
return.ignoreCount has only one value
return.assumptionFailureCount has only one value
return.failures has only one value
return.failures[] contains no nulls and has only one value, of length 1
return.failures[] elements has only one value
return.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.runTime has only one value
return.startTime has only one value
return.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.notifier.listeners[] elements == this.notifier.listeners[org.junit.runner.Result.serialVersionUID-1]
args[] elements == args[org.junit.runner.Result.serialVersionUID-1]
return.failures[] elements == return.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Request$1:::OBJECT
this has only one value
this.val$runner has only one value
this.val$runner.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::EXIT
this.val$runner == orig($hidden$1)
this.val$runner.getClass().getName() == orig($hidden$1.getClass().getName())
===========================================================================
org.junit.runner.Request$1.getRunner():::ENTER
===========================================================================
org.junit.runner.Request$1.getRunner():::EXIT
this.val$runner == return
this.val$runner.getClass().getName() == return.getClass().getName()
return == orig(this.val$runner)
return.getClass().getName() == orig(this.val$runner.getClass().getName())
return has only one value
return.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request:::OBJECT
this has only one value
this.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.Request():::EXIT
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::ENTER
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT78
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT
classes[] == orig(classes[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.runner.Computer$2.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::EXIT
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Result$Listener:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
this has only one value
org.junit.runner.Result.this has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
org.junit.runner.Result.this.count has only one value
org.junit.runner.Result.this.ignoreCount has only one value
org.junit.runner.Result.this.assumptionFailureCount has only one value
org.junit.runner.Result.this.failures has only one value
org.junit.runner.Result.this.failures[] elements has only one value
org.junit.runner.Result.this.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
org.junit.runner.Result.this.failures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure] }
org.junit.runner.Result.this.runTime has only one value
org.junit.runner.Result.this.startTime has only one value
org.junit.runner.Result.this.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
size(org.junit.runner.Result.this.failures[]) one of { 0, 1 }
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialVersionUID >= size(org.junit.runner.Result.this.failures[])
size(org.junit.runner.Result.serialPersistentFields[])-1 > size(org.junit.runner.Result.this.failures[])
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.this has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
org.junit.runner.Result.this.count has only one value
org.junit.runner.Result.this.ignoreCount has only one value
org.junit.runner.Result.this.assumptionFailureCount has only one value
org.junit.runner.Result.this.failures has only one value
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Result.this.failures[].getClass().getName() == []
org.junit.runner.Result.this.runTime has only one value
org.junit.runner.Result.this.startTime has only one value
org.junit.runner.Result.this.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Result.this.failures[].getClass().getName() == []
===========================================================================
org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.notification.Failure.serialVersionUID
org.junit.runner.Result.serialVersionUID == org.junit.runner.Description.serialVersionUID
size(org.junit.runner.Result.this.failures[]) == size(failure.fDescription.fAnnotations[])
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Result.this.failures[].getClass().getName() == []
failure has only one value
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fTestClass == null
failure.fThrownException has only one value
===========================================================================
org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren.getClass().getName() == orig(failure.fDescription.fChildren.getClass().getName())
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fUniqueId == orig(failure.fDescription.fUniqueId)
failure.fDescription.fUniqueId.getClass().getName() == orig(failure.fDescription.fUniqueId.getClass().getName())
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fDescription.fTestClass == orig(failure.fDescription.fTestClass)
failure.fThrownException == orig(failure.fThrownException)
orig(failure) == org.junit.runner.Result.this.failures[org.junit.runner.Result.serialVersionUID-1]
size(org.junit.runner.Result.this.failures[])-1 == size(failure.fDescription.fAnnotations[])
size(failure.fDescription.fAnnotations[]) == orig(size(org.junit.runner.Result.this.failures[]))
org.junit.runner.Result.this.failures[] contains no nulls and has only one value, of length 1
org.junit.runner.Result.this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass == null
failure.fThrownException has only one value
org.junit.runner.Result.this.failures[] elements == orig(failure)
orig(failure) in org.junit.runner.Result.this.failures[]
org.junit.runner.Result.this.failures[] elements == org.junit.runner.Result.this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.Result.this.failures[])
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
size(org.junit.runner.Result.this.failures[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Result.this.failures[] contains no nulls and has only one value, of length 1
org.junit.runner.Result.this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
org.junit.runner.Result.this.failures[] elements == org.junit.runner.Result.this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
size(org.junit.runner.Result.this.failures[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fAnnotations[]) == orig(size(org.junit.runner.Result.this.failures[]))-1
org.junit.runner.Result.this.failures[] contains no nulls and has only one value, of length 1
org.junit.runner.Result.this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
org.junit.runner.Result.this.failures[] elements == org.junit.runner.Result.this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this == result
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.this.count == result.count
org.junit.runner.Result.this.ignoreCount == result.ignoreCount
org.junit.runner.Result.this.assumptionFailureCount == result.assumptionFailureCount
org.junit.runner.Result.this.failures == result.failures
org.junit.runner.Result.this.failures[] == result.failures[]
org.junit.runner.Result.this.runTime == result.runTime
org.junit.runner.Result.this.startTime == result.startTime
org.junit.runner.Result.this.serializedForm == result.serializedForm
org.junit.runner.Result.this.failures[] contains no nulls and has only one value, of length 1
org.junit.runner.Result.this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result has only one value
org.junit.runner.Result.this.failures[] elements == org.junit.runner.Result.this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this == orig(result)
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == result.count
org.junit.runner.Result.this.ignoreCount == result.ignoreCount
org.junit.runner.Result.this.assumptionFailureCount == result.assumptionFailureCount
org.junit.runner.Result.this.failures == result.failures
org.junit.runner.Result.this.failures[] == result.failures[]
org.junit.runner.Result.this.runTime == result.runTime
org.junit.runner.Result.this.startTime == result.startTime
org.junit.runner.Result.this.serializedForm == result.serializedForm
result.count == orig(org.junit.runner.Result.this.count)
result.count == orig(result.count)
result.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(org.junit.runner.Result.this.failures)
result.failures == orig(result.failures)
result.failures[] == orig(org.junit.runner.Result.this.failures[])
result.failures[] == orig(result.failures[])
result.runTime == orig(org.junit.runner.Result.this.runTime)
result.runTime == orig(result.runTime)
result.startTime == orig(org.junit.runner.Result.this.startTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
result.serializedForm == orig(result.serializedForm)
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Result.this.failures[] == []
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
org.junit.runner.Result.this.count == orig(org.junit.runner.Result.this.count)
org.junit.runner.Result.this.ignoreCount == orig(org.junit.runner.Result.this.ignoreCount)
org.junit.runner.Result.this.assumptionFailureCount == orig(org.junit.runner.Result.this.assumptionFailureCount)
org.junit.runner.Result.this.failures == orig(org.junit.runner.Result.this.failures)
org.junit.runner.Result.this.failures[] == orig(org.junit.runner.Result.this.failures[])
org.junit.runner.Result.this.runTime == orig(org.junit.runner.Result.this.runTime)
org.junit.runner.Result.this.startTime == orig(org.junit.runner.Result.this.startTime)
org.junit.runner.Result.this.serializedForm == orig(org.junit.runner.Result.this.serializedForm)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
size(org.junit.runner.Result.this.failures[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fAnnotations[]) == orig(size(org.junit.runner.Result.this.failures[]))
org.junit.runner.Result.this.failures[] == []
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.Result:::CLASS
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields != null
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[] elements != null
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.Result:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
this has only one value
this.count has only one value
this.count != null
this.ignoreCount has only one value
this.ignoreCount != null
this.assumptionFailureCount has only one value
this.assumptionFailureCount != null
this.failures has only one value
this.failures != null
this.failures[] elements has only one value
this.failures[] elements != null
this.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
this.failures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure] }
this.runTime has only one value
this.runTime != null
this.startTime has only one value
this.startTime != null
this.serializedForm == null
size(this.failures[]) one of { 0, 1 }
org.junit.runner.Result.serialVersionUID >= size(this.failures[])
size(org.junit.runner.Result.serialPersistentFields[])-1 > size(this.failures[])
===========================================================================
org.junit.runner.Result.Result():::EXIT
this.failures[] == []
this.failures[].getClass().getName() == []
===========================================================================
org.junit.runner.Result.createListener():::ENTER
this.failures[] == []
this.failures[].getClass().getName() == []
===========================================================================
org.junit.runner.Result.createListener():::EXIT
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] == []
this.failures[].getClass().getName() == []
return has only one value
===========================================================================
org.junit.runner.Result.getFailureCount():::ENTER
org.junit.runner.Result.serialVersionUID == size(this.failures[])
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getFailureCount():::EXIT
org.junit.runner.Result.serialVersionUID == return
org.junit.runner.Result.serialVersionUID == size(this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getFailures():::ENTER
org.junit.runner.Result.serialVersionUID == size(this.failures[])
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getFailures():::EXIT
org.junit.runner.Result.serialVersionUID == size(this.failures[])
org.junit.runner.Result.serialVersionUID == size(return[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] contains no nulls and has only one value, of length 1
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runner.notification.Failure]
return[].getClass().getName() elements == org.junit.runner.notification.Failure.class
return.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.failures[] elements == return[org.junit.runner.Result.serialVersionUID-1]
return[] elements == return[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getRunCount():::ENTER
org.junit.runner.Result.serialVersionUID == size(this.failures[])
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getRunCount():::EXIT
org.junit.runner.Result.serialVersionUID == return
org.junit.runner.Result.serialVersionUID == size(this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getRunTime():::ENTER
org.junit.runner.Result.serialVersionUID == size(this.failures[])
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.getRunTime():::EXIT
org.junit.runner.Result.serialVersionUID == size(this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return == 55
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.wasSuccessful():::ENTER
org.junit.runner.Result.serialVersionUID == size(this.failures[])
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT
org.junit.runner.Result.serialVersionUID == size(this.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.count == orig(this.count)
this.ignoreCount == orig(this.ignoreCount)
this.assumptionFailureCount == orig(this.assumptionFailureCount)
this.failures == orig(this.failures)
this.failures[] == orig(this.failures[])
this.runTime == orig(this.runTime)
this.startTime == orig(this.startTime)
this.serializedForm == orig(this.serializedForm)
this.failures[] contains no nulls and has only one value, of length 1
this.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
return == false
this.failures[] elements == this.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runner.Runner:::OBJECT
===========================================================================
org.junit.runner.Runner.Runner():::EXIT
===========================================================================
org.junit.runner.notification.Failure:::CLASS
===========================================================================
org.junit.runner.notification.Failure:::OBJECT
org.junit.runner.notification.Failure.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.fDescription.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.fDescription.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fDescription.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fDescription.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.fDescription.fTestClass
this has only one value
this.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.fDescription.fChildren has only one value
this.fDescription.fDisplayName has only one value
this.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
this.fDescription.fUniqueId has only one value
this.fDescription.fAnnotations has only one value
this.fThrownException has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDescription.fDisplayName.toString
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDescription.fDisplayName.toString
===========================================================================
org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
thrownException has only one value
===========================================================================
org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable):::EXIT
this.fDescription == orig(description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == description.fChildren
this.fDescription.fDisplayName == description.fDisplayName
this.fDescription.fDisplayName.toString == description.fDisplayName.toString
this.fDescription.fUniqueId == description.fUniqueId
this.fDescription.fAnnotations == description.fAnnotations
this.fThrownException == orig(thrownException)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.Failure.getException():::ENTER
===========================================================================
org.junit.runner.notification.Failure.getException():::EXIT
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fDescription.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fDescription.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fDescription.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fDescription.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
this.fDescription.fUniqueId == orig(this.fDescription.fUniqueId)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fThrownException == return
return == orig(this.fThrownException)
return has only one value
===========================================================================
org.junit.runner.notification.Failure.getTestHeader():::ENTER
===========================================================================
org.junit.runner.notification.Failure.getTestHeader():::EXIT
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fDescription.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fDescription.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fDescription.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fDescription.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == return
this.fDescription.fDisplayName.toString == return.toString
this.fDescription.fUniqueId == orig(this.fDescription.fUniqueId)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fThrownException == orig(this.fThrownException)
return == orig(this.fDescription.fDisplayName)
return.toString == orig(this.fDescription.fDisplayName.toString)
return has only one value
return.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
===========================================================================
org.junit.runner.notification.Failure.getTrimmedTrace():::ENTER
===========================================================================
org.junit.runner.notification.Failure.getTrimmedTrace():::EXIT
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.fDescription.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.fDescription.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fDescription.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.fDescription.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
this.fDescription.fUniqueId == orig(this.fDescription.fUniqueId)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fThrownException == orig(this.fThrownException)
return has only one value
return.toString == "java.lang.IllegalAccessException: class org.junit.internal.runners.SuiteMethod cannot access a member of class org.apache.commons.math.stat.FrequencyTestFailingTests with modifiers \"public static\"\n\tat java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:361)\n\tat java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:591)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:558)\n\tat org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(SuiteMethod.java:35)\n\tat org.junit.internal.runners.SuiteMethod.<init>(SuiteMethod.java:24)\n\tat org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(SuiteMethodBuilder.java:11)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:37)\n\tat org.junit.runner.Computer.getRunner(Computer.java:50)\n\tat org.junit.runner.Computer$1.runnerForClass(Computer.java:31)\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:125)\n\tat org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:111)\n\tat org.junit.runners.Suite.<init>(Suite.java:81)\n\tat org.junit.runner.Computer$2.<init>(Computer.java:33)\n\tat org.junit.runner.Computer.getSuite(Computer.java:28)\n\tat org.junit.runner.Request.classes(Request.java:77)\n\tat org.junit.runner.JUnitCommandLineParseResult.createRequest(JUnitCommandLineParseResult.java:116)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\n"
===========================================================================
org.junit.runner.notification.RunListener:::OBJECT
===========================================================================
org.junit.runner.notification.RunListener.RunListener():::EXIT
===========================================================================
org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this has only one value
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this has only one value
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this has only one value
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunListener.testSuiteStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$2:::OBJECT
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.val$result.failures[])
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Result.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
this.val$result.count has only one value
this.val$result.ignoreCount has only one value
this.val$result.assumptionFailureCount has only one value
this.val$result.failures has only one value
this.val$result.failures[] contains no nulls and has only one value, of length 1
this.val$result.failures[] elements has only one value
this.val$result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.val$result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
this.val$result.runTime has only one value
this.val$result.startTime has only one value
this.val$result.serializedForm == null
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(org.junit.runner.Result.serialPersistentFields[]) == 6
size(this.currentListeners[]) == 2
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
this.currentListeners[org.junit.runner.Result.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Result.serialVersionUID-1] has only one value
this.val$result.failures[] elements == this.val$result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Result.serialVersionUID == size($hidden$2.failures[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
$hidden$2.count has only one value
$hidden$2.ignoreCount has only one value
$hidden$2.assumptionFailureCount has only one value
$hidden$2.failures has only one value
$hidden$2.failures[] contains no nulls and has only one value, of length 1
$hidden$2.failures[] elements has only one value
$hidden$2.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
$hidden$2.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
$hidden$2.runTime has only one value
$hidden$2.startTime has only one value
$hidden$2.serializedForm == null
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
$hidden$2.failures[] elements == $hidden$2.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT
this.val$result == orig($hidden$2)
org.junit.runner.Result.serialVersionUID == size($hidden$2.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.val$result.count == $hidden$2.count
this.val$result.ignoreCount == $hidden$2.ignoreCount
this.val$result.assumptionFailureCount == $hidden$2.assumptionFailureCount
this.val$result.failures == $hidden$2.failures
this.val$result.failures[] == $hidden$2.failures[]
this.val$result.runTime == $hidden$2.runTime
this.val$result.startTime == $hidden$2.startTime
this.val$result.serializedForm == $hidden$2.serializedForm
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.count == orig($hidden$2.count)
$hidden$2.ignoreCount == orig($hidden$2.ignoreCount)
$hidden$2.assumptionFailureCount == orig($hidden$2.assumptionFailureCount)
$hidden$2.failures == orig($hidden$2.failures)
$hidden$2.failures[] == orig($hidden$2.failures[])
$hidden$2.runTime == orig($hidden$2.runTime)
$hidden$2.startTime == orig($hidden$2.startTime)
$hidden$2.serializedForm == orig($hidden$2.serializedForm)
$hidden$2.count has only one value
$hidden$2.ignoreCount has only one value
$hidden$2.assumptionFailureCount has only one value
$hidden$2.failures has only one value
$hidden$2.failures[] contains no nulls and has only one value, of length 1
$hidden$2.failures[] elements has only one value
$hidden$2.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
$hidden$2.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
$hidden$2.runTime has only one value
$hidden$2.startTime has only one value
$hidden$2.serializedForm == null
$hidden$2.failures[] elements == $hidden$2.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$result == orig(this.val$result)
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
this.val$result.count == orig(this.val$result.count)
this.val$result.ignoreCount == orig(this.val$result.ignoreCount)
this.val$result.assumptionFailureCount == orig(this.val$result.assumptionFailureCount)
this.val$result.failures == orig(this.val$result.failures)
this.val$result.failures[] == orig(this.val$result.failures[])
this.val$result.runTime == orig(this.val$result.runTime)
this.val$result.startTime == orig(this.val$result.startTime)
this.val$result.serializedForm == orig(this.val$result.serializedForm)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$4:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "classes"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "classes"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$5:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$5.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$5.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$6:::OBJECT
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
size(this.val$failures[]) == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
size(this.val$failures[]) == size(this.currentListeners[])-1
this has only one value
this.val$failures has only one value
this.val$failures[] contains no nulls and has only one value, of length 1
this.val$failures[] elements has only one value
this.val$failures[].getClass().getName() == [org.junit.runner.notification.Failure]
this.val$failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
this.val$failures.getClass().getName() == java.util.Arrays$ArrayList.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$6.(org.junit.runner.notification.RunNotifier, java.util.List, java.util.List):::ENTER
org.junit.runner.notification.RunNotifier.this.listeners == currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == currentListeners.getClass().getName()
size(org.junit.runner.notification.RunNotifier.this.listeners[])-1 == size($hidden$3[])
size(currentListeners[])-1 == size($hidden$3[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
currentListeners has only one value
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$3 has only one value
$hidden$3[] contains no nulls and has only one value, of length 1
$hidden$3[] elements has only one value
$hidden$3[].getClass().getName() == [org.junit.runner.notification.Failure]
$hidden$3[].getClass().getName() elements == org.junit.runner.notification.Failure.class
$hidden$3.getClass().getName() == java.util.Arrays$ArrayList.class
size(currentListeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$6.(org.junit.runner.notification.RunNotifier, java.util.List, java.util.List):::EXIT
this.val$failures == orig($hidden$3)
this.val$failures[] == $hidden$3[]
this.val$failures.getClass().getName() == orig($hidden$3.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(currentListeners)
this.currentListeners[] == currentListeners[]
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(currentListeners.getClass().getName())
currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
currentListeners[] == orig(currentListeners[])
$hidden$3[] == orig($hidden$3[])
size(this.val$failures[]) == size(currentListeners[])-1
size(this.val$failures[]) == orig(size(org.junit.runner.notification.RunNotifier.this.listeners[]))-1
size(this.val$failures[]) == orig(size(currentListeners[]))-1
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$3[] contains no nulls and has only one value, of length 1
$hidden$3[] elements has only one value
$hidden$3[].getClass().getName() == [org.junit.runner.notification.Failure]
$hidden$3[].getClass().getName() elements == org.junit.runner.notification.Failure.class
===========================================================================
org.junit.runner.notification.RunNotifier$6.notifyListener(org.junit.runner.notification.RunListener):::ENTER
listener in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$6.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$failures == orig(this.val$failures)
this.val$failures[] == orig(this.val$failures[])
this.val$failures.getClass().getName() == orig(this.val$failures.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
size(this.val$failures[]) == orig(size(org.junit.runner.notification.RunNotifier.this.listeners[]))-1
size(this.val$failures[]) == orig(size(this.currentListeners[]))-1
orig(listener) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$9:::OBJECT
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.serialVersionUID == size(this.currentListeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == this.val$description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == this.val$description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == this.val$description.fTestClass
org.junit.runner.notification.RunNotifier.this.listeners == this.currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == this.currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == this.currentListeners.getClass().getName()
this has only one value
this.val$description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
this.val$description.fUniqueId has only one value
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
this.currentListeners has only one value
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(this.currentListeners[]) == 2
this.currentListeners[org.junit.runner.Description.serialVersionUID] has only one value
this.currentListeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$9.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(org.junit.runner.notification.RunNotifier.this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
org.junit.runner.notification.RunNotifier.this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$9.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == $hidden$2.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig($hidden$2.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == $hidden$2.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig($hidden$2.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == $hidden$2.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig($hidden$2.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
this.val$description.fUniqueId == $hidden$2.fUniqueId
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
$hidden$2.fUniqueId == orig($hidden$2.fUniqueId)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fChildren has only one value
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
$hidden$2.fUniqueId has only one value
$hidden$2.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.RunNotifier$9.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$9.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(this.val$description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(this.val$description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(this.val$description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
this.val$description.fUniqueId == orig(this.val$description.fUniqueId)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(this.currentListeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
orig(each) in this.currentListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier:::OBJECT
this.currentListeners == org.junit.runner.notification.RunNotifier.this.listeners
this.currentListeners[] == org.junit.runner.notification.RunNotifier.this.listeners[]
this.currentListeners.getClass().getName() == org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName()
this.currentListeners has only one value
this.currentListeners != null
this.currentListeners[] contains no nulls and has only one value, of length 2
this.currentListeners[] elements != null
this.currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
size(this.currentListeners[]) == 2
this.getClass().getName() != this.currentListeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.listeners has only one value
org.junit.runner.notification.RunNotifier.this.listeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.listeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::EXIT
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier, java.util.List):::ENTER
org.junit.runner.notification.RunNotifier.this.listeners == currentListeners
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName() == currentListeners.getClass().getName()
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.pleaseStop == false
currentListeners has only one value
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
currentListeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
size(currentListeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier, java.util.List):::EXIT
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners == orig(currentListeners)
this.currentListeners[] == currentListeners[]
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(currentListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.listeners[] == currentListeners[]
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
currentListeners[] == orig(currentListeners[])
currentListeners[] contains no nulls and has only one value, of length 2
currentListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::EXIT
this.currentListeners == orig(this.currentListeners)
this.currentListeners == orig(org.junit.runner.notification.RunNotifier.this.listeners)
this.currentListeners[] == orig(this.currentListeners[])
this.currentListeners[] == orig(org.junit.runner.notification.RunNotifier.this.listeners[])
this.currentListeners.getClass().getName() == orig(this.currentListeners.getClass().getName())
this.currentListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.listeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.pleaseStop == orig(org.junit.runner.notification.RunNotifier.this.pleaseStop)
this.currentListeners.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier:::OBJECT
this has only one value
this.listeners has only one value
this.listeners != null
this.listeners[] elements != null
this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.pleaseStop == false
size(this.listeners[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.notification.RunNotifier.RunNotifier():::EXIT
this.listeners[] == []
this.listeners[].getClass().getName() == []
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
listener has only one value
size(this.listeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
size(this.listeners[]) == 2
orig(listener) in this.listeners[]
===========================================================================
org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] == []
this.listeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
size(this.listeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure):::ENTER
org.junit.runner.notification.Failure.serialVersionUID == org.junit.runner.Description.serialVersionUID
org.junit.runner.notification.Failure.serialVersionUID == size(this.listeners[])-1
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
failure has only one value
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass == null
failure.fThrownException has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.notification.Failure.serialVersionUID] has only one value
this.listeners[org.junit.runner.notification.Failure.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.notification.Failure.serialVersionUID == size(this.listeners[])-1
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren.getClass().getName() == orig(failure.fDescription.fChildren.getClass().getName())
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fUniqueId == orig(failure.fDescription.fUniqueId)
failure.fDescription.fUniqueId.getClass().getName() == orig(failure.fDescription.fUniqueId.getClass().getName())
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fDescription.fTestClass == orig(failure.fDescription.fTestClass)
failure.fThrownException == orig(failure.fThrownException)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass == null
failure.fThrownException has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.notification.Failure.serialVersionUID] has only one value
this.listeners[org.junit.runner.notification.Failure.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailures(java.util.List, java.util.List):::ENTER
this.listeners[] == listeners[]
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
failures[] elements has only one value
failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
failures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure] }
size(this.listeners[]) == 2
size(failures[]) one of { 0, 1 }
this.listeners.getClass().getName() != failures.getClass().getName()
size(this.listeners[])-1 >= size(failures[])
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFailures(java.util.List, java.util.List):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == listeners[]
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
listeners[] == orig(this.listeners[])
listeners[] == orig(listeners[])
failures[] == orig(failures[])
listeners[] contains no nulls and has only one value, of length 2
listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
failures[] elements has only one value
failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
failures[].getClass().getName() one of { [], [org.junit.runner.notification.Failure] }
size(this.listeners[]) == 2
this.listeners.getClass().getName() != orig(failures.getClass().getName())
size(listeners[])-1 >= orig(size(failures[]))
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Result.serialVersionUID == size(result.failures[])
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Result.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(this.listeners[]) == 2
size(org.junit.runner.Result.serialPersistentFields[]) == 6
this.listeners[org.junit.runner.Result.serialVersionUID] has only one value
this.listeners[org.junit.runner.Result.serialVersionUID-1] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteFinished(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestSuiteStarted(org.junit.runner.Description):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
org.junit.runner.Description.serialVersionUID == size(this.listeners[])-1
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
size(this.listeners[]) == 2
this.listeners[org.junit.runner.Description.serialVersionUID] has only one value
this.listeners[org.junit.runner.Description.serialVersionUID-1] has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
listener has only one value
size(this.listeners[]) == 2
listener in this.listeners[]
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
size(this.listeners[]) == orig(size(this.listeners[]))-1
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [org.junit.runner.notification.SynchronizedRunListener]
this.listeners[].getClass().getName() elements == org.junit.runner.notification.SynchronizedRunListener.class
===========================================================================
org.junit.runner.notification.RunNotifier.wrapIfNotThreadSafe(org.junit.runner.notification.RunListener):::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier.wrapIfNotThreadSafe(org.junit.runner.notification.RunListener):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.pleaseStop == orig(this.pleaseStop)
===========================================================================
org.junit.runner.notification.SynchronizedRunListener:::OBJECT
this has only one value
this.listener has only one value
this.listener != null
this.monitor has only one value
this.monitor != null
this.monitor.getClass().getName() == org.junit.runner.notification.RunNotifier.class
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.SynchronizedRunListener(org.junit.runner.notification.RunListener, java.lang.Object):::ENTER
listener has only one value
monitor has only one value
monitor.getClass().getName() == org.junit.runner.notification.RunNotifier.class
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.SynchronizedRunListener(org.junit.runner.notification.RunListener, java.lang.Object):::EXIT
this.listener == orig(listener)
this.monitor == orig(monitor)
this.monitor.getClass().getName() == orig(monitor.getClass().getName())
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFailure(org.junit.runner.notification.Failure):::ENTER
org.junit.runner.notification.Failure.serialVersionUID == org.junit.runner.Description.serialVersionUID
failure has only one value
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass == null
failure.fThrownException has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFailure(org.junit.runner.notification.Failure):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
failure.fDescription == orig(failure.fDescription)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
failure.fDescription.fChildren == orig(failure.fDescription.fChildren)
failure.fDescription.fChildren.getClass().getName() == orig(failure.fDescription.fChildren.getClass().getName())
failure.fDescription.fDisplayName == orig(failure.fDescription.fDisplayName)
failure.fDescription.fDisplayName.toString == orig(failure.fDescription.fDisplayName.toString)
failure.fDescription.fUniqueId == orig(failure.fDescription.fUniqueId)
failure.fDescription.fUniqueId.getClass().getName() == orig(failure.fDescription.fUniqueId.getClass().getName())
failure.fDescription.fAnnotations == orig(failure.fDescription.fAnnotations)
failure.fDescription.fAnnotations.getClass().getName() == orig(failure.fDescription.fAnnotations.getClass().getName())
failure.fDescription.fAnnotations[] == orig(failure.fDescription.fAnnotations[])
failure.fDescription.fTestClass == orig(failure.fDescription.fTestClass)
failure.fThrownException == orig(failure.fThrownException)
failure.fDescription has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
failure.fDescription.fChildren has only one value
failure.fDescription.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
failure.fDescription.fDisplayName has only one value
failure.fDescription.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
failure.fDescription.fUniqueId has only one value
failure.fDescription.fUniqueId.getClass().getName() == java.lang.String.class
failure.fDescription.fAnnotations has only one value
failure.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
failure.fDescription.fAnnotations[] == []
failure.fDescription.fAnnotations[].getClass().getName() == []
failure.fDescription.fTestClass == null
failure.fThrownException has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testFinished(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.serialVersionUID == org.junit.runner.Result$SerializedForm.serialVersionUID
org.junit.runner.Result.serialVersionUID == size(result.failures[])
result has only one value
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunFinished(org.junit.runner.Result):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Result.serialVersionUID == size(result.failures[])
org.junit.runner.Result.serialPersistentFields == orig(org.junit.runner.Result.serialPersistentFields)
org.junit.runner.Result.serialPersistentFields.getClass().getName() == orig(org.junit.runner.Result.serialPersistentFields.getClass().getName())
org.junit.runner.Result.serialPersistentFields[] == orig(org.junit.runner.Result.serialPersistentFields[])
result.count == orig(result.count)
result.ignoreCount == orig(result.ignoreCount)
result.assumptionFailureCount == orig(result.assumptionFailureCount)
result.failures == orig(result.failures)
result.failures[] == orig(result.failures[])
result.runTime == orig(result.runTime)
result.startTime == orig(result.startTime)
result.serializedForm == orig(result.serializedForm)
org.junit.runner.Result.serialPersistentFields has only one value
org.junit.runner.Result.serialPersistentFields.getClass().getName() == java.io.ObjectStreamField[].class
org.junit.runner.Result.serialPersistentFields[] contains no nulls and has only one value, of length 6
org.junit.runner.Result.serialPersistentFields[].getClass().getName() == [java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField, java.io.ObjectStreamField]
org.junit.runner.Result.serialPersistentFields[].getClass().getName() elements == java.io.ObjectStreamField.class
result.count has only one value
result.ignoreCount has only one value
result.assumptionFailureCount has only one value
result.failures has only one value
result.failures[] contains no nulls and has only one value, of length 1
result.failures[] elements has only one value
result.failures[].getClass().getName() == [org.junit.runner.notification.Failure]
result.failures[].getClass().getName() elements == org.junit.runner.notification.Failure.class
result.runTime has only one value
result.startTime has only one value
result.serializedForm == null
size(org.junit.runner.Result.serialPersistentFields[]) == 6
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID] has only one value
org.junit.runner.Result.serialPersistentFields[org.junit.runner.Result.serialVersionUID-1] has only one value
result.failures[] elements == result.failures[org.junit.runner.Result.serialVersionUID-1]
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testRunStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "initializationError(org.apache.commons.math.stat.FrequencyTestFailingTests)"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteFinished(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
description has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runner.notification.SynchronizedRunListener.testSuiteStarted(org.junit.runner.Description):::EXIT
this.listener == orig(this.listener)
this.monitor == orig(this.monitor)
this.monitor.getClass().getName() == orig(this.monitor.getClass().getName())
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN == orig(org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == description.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == orig(description.fChildren.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fUniqueId == orig(org.junit.runner.Description.EMPTY.fUniqueId)
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == description.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == orig(description.fUniqueId.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == description.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.EMPTY.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(org.junit.runner.Description.TEST_MECHANISM.fTestClass)
org.junit.runner.Description.EMPTY.fTestClass == orig(description.fTestClass)
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
org.junit.runner.Description.TEST_MECHANISM.fUniqueId == orig(org.junit.runner.Description.TEST_MECHANISM.fUniqueId)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fUniqueId == orig(description.fUniqueId)
description.fAnnotations == orig(description.fAnnotations)
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fDisplayName has only one value
description.fDisplayName.toString == "classes"
description.fUniqueId has only one value
description.fAnnotations has only one value
===========================================================================
org.junit.runners.ParentRunner$1:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
size(org.junit.runners.ParentRunner.this.filteredChildren[]) == 1
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass == null
org.junit.runners.ParentRunner.this.filteredChildren == null
org.junit.runners.ParentRunner.this.scheduler == null
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.testClass == null
org.junit.runners.ParentRunner.this.filteredChildren == null
org.junit.runners.ParentRunner.this.scheduler == null
===========================================================================
org.junit.runners.ParentRunner$1.finished():::ENTER
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$1.finished():::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::ENTER
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
childStatement has only one value
childStatement.getClass().getName() == org.junit.runners.ParentRunner$4.class
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.scheduler has only one value
===========================================================================
org.junit.runners.ParentRunner$2:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(this.val$notifier.listeners[])-1 == size(org.junit.runners.ParentRunner.VALIDATORS[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$notifier has only one value
this.val$notifier.listeners has only one value
this.val$notifier.listeners[] contains no nulls and has only one value, of length 2
this.val$notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.val$notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.val$notifier.pleaseStop == false
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$2.listeners[])-1
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.listeners has only one value
$hidden$2.listeners[] contains no nulls and has only one value, of length 2
$hidden$2.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.pleaseStop == false
size($hidden$2.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::EXIT
this.val$notifier == orig($hidden$2)
this.val$notifier.listeners == $hidden$2.listeners
this.val$notifier.listeners[] == $hidden$2.listeners[]
this.val$notifier.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
this.val$notifier.pleaseStop == $hidden$2.pleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
$hidden$2.listeners == orig($hidden$2.listeners)
$hidden$2.listeners[] == orig($hidden$2.listeners[])
$hidden$2.listeners.getClass().getName() == orig($hidden$2.listeners.getClass().getName())
$hidden$2.pleaseStop == orig($hidden$2.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$2.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size($hidden$2.listeners[]))-1
$hidden$2.listeners has only one value
$hidden$2.listeners[] contains no nulls and has only one value, of length 2
$hidden$2.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.pleaseStop == false
size($hidden$2.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::EXIT
this.val$notifier == orig(this.val$notifier)
this.val$notifier.listeners == orig(this.val$notifier.listeners)
this.val$notifier.listeners[] == orig(this.val$notifier.listeners[])
this.val$notifier.listeners.getClass().getName() == orig(this.val$notifier.listeners.getClass().getName())
this.val$notifier.pleaseStop == orig(this.val$notifier.pleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.val$notifier.listeners[]))-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$3:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$statement has only one value
this.val$statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, org.junit.runners.model.Statement):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, org.junit.runners.model.Statement):::EXIT
this.val$statement == orig($hidden$2)
this.val$statement.getClass().getName() == orig($hidden$2.getClass().getName())
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$3.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$3.evaluate():::EXIT
this.val$statement == orig(this.val$statement)
this.val$statement.getClass().getName() == orig(this.val$statement.getClass().getName())
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$4:::OBJECT
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(this.val$notifier.listeners[])-1 == size(org.junit.runners.ParentRunner.VALIDATORS[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
this has only one value
this.val$each has only one value
this.val$each.getClass().getName() == org.junit.internal.runners.ErrorReportingRunner.class
this.val$notifier has only one value
this.val$notifier.listeners has only one value
this.val$notifier.listeners[] contains no nulls and has only one value, of length 2
this.val$notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
this.val$notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.val$notifier.pleaseStop == false
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.listeners[]) == 2
org.junit.runners.ParentRunner.this.filteredChildren[] elements == this.val$each
this.val$each in org.junit.runners.ParentRunner.this.filteredChildren[]
this.val$each.getClass().getName() in org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(org.junit.runners.ParentRunner.this.filteredChildren[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$3.listeners[])-1
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runner.Computer$2.class
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
org.junit.runners.ParentRunner.this.childrenLock has only one value
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.ParentRunner.this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.ParentRunner.this.testClass.clazz == null
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.filteredChildren has only one value
org.junit.runners.ParentRunner.this.filteredChildren[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.this.filteredChildren[] elements has only one value
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.junit.runners.ParentRunner.this.scheduler has only one value
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.runners.ErrorReportingRunner.class
$hidden$3 has only one value
$hidden$3.listeners has only one value
$hidden$3.listeners[] contains no nulls and has only one value, of length 2
$hidden$3.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$3.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$3.pleaseStop == false
size($hidden$3.listeners[]) == 2
$hidden$2 in org.junit.runners.ParentRunner.this.filteredChildren[]
org.junit.runners.ParentRunner.this.filteredChildren[] elements == $hidden$2
$hidden$2.getClass().getName() in org.junit.runners.ParentRunner.this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::EXIT
this.val$each == orig($hidden$2)
this.val$each.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$notifier == orig($hidden$3)
this.val$notifier.listeners == $hidden$3.listeners
this.val$notifier.listeners[] == $hidden$3.listeners[]
this.val$notifier.listeners.getClass().getName() == $hidden$3.listeners.getClass().getName()
this.val$notifier.pleaseStop == $hidden$3.pleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
$hidden$3.listeners == orig($hidden$3.listeners)
$hidden$3.listeners[] == orig($hidden$3.listeners[])
$hidden$3.listeners.getClass().getName() == orig($hidden$3.listeners.getClass().getName())
$hidden$3.pleaseStop == orig($hidden$3.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size($hidden$3.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size($hidden$3.listeners[]))-1
$hidden$3.listeners has only one value
$hidden$3.listeners[] contains no nulls and has only one value, of length 2
$hidden$3.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
$hidden$3.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$3.pleaseStop == false
size($hidden$3.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner$4.run():::ENTER
===========================================================================
org.junit.runners.ParentRunner$4.run():::EXIT
this.val$each == orig(this.val$each)
this.val$each.getClass().getName() == orig(this.val$each.getClass().getName())
this.val$notifier == orig(this.val$notifier)
this.val$notifier.listeners == orig(this.val$notifier.listeners)
this.val$notifier.listeners[] == orig(this.val$notifier.listeners[])
this.val$notifier.listeners.getClass().getName() == orig(this.val$notifier.listeners.getClass().getName())
this.val$notifier.pleaseStop == orig(this.val$notifier.pleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
org.junit.runners.ParentRunner.this.childrenLock == orig(org.junit.runners.ParentRunner.this.childrenLock)
org.junit.runners.ParentRunner.this.childrenLock.getClass().getName() == orig(org.junit.runners.ParentRunner.this.childrenLock.getClass().getName())
org.junit.runners.ParentRunner.this.testClass == orig(org.junit.runners.ParentRunner.this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
org.junit.runners.ParentRunner.this.testClass.clazz == orig(org.junit.runners.ParentRunner.this.testClass.clazz)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations)
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.methodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.testClass.fieldsForAnnotations)
org.junit.runners.ParentRunner.this.filteredChildren == orig(org.junit.runners.ParentRunner.this.filteredChildren)
org.junit.runners.ParentRunner.this.filteredChildren[] == orig(org.junit.runners.ParentRunner.this.filteredChildren[])
org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName() == orig(org.junit.runners.ParentRunner.this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.this.scheduler == orig(org.junit.runners.ParentRunner.this.scheduler)
org.junit.runners.ParentRunner.this.scheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.val$notifier.listeners[]))-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(org.junit.runners.ParentRunner.this.filteredChildren[]))
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector:::OBJECT
this has only one value
this.entries has only one value
this.entries[] == []
this.entries[].getClass().getName() == []
this.entries.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.ClassRuleCollector():::EXIT
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.getOrderedRules():::ENTER
===========================================================================
org.junit.runners.ParentRunner$ClassRuleCollector.getOrderedRules():::EXIT
this.entries == orig(this.entries)
this.entries[] == return[]
this.entries.getClass().getName() == return.getClass().getName()
return[] == orig(this.entries[])
return.getClass().getName() == orig(this.entries.getClass().getName())
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS != null
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[] elements != null
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.ParentRunner:::OBJECT
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(this.filteredChildren[])
this has only one value
this.getClass().getName() == org.junit.runner.Computer$2.class
this.childrenLock has only one value
this.childrenLock != null
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR != null
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR != null
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations != null
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.testClass.fieldsForAnnotations != null
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[] elements != null
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler != null
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.getClass().getName() != org.junit.runners.ParentRunner.VALIDATORS.getClass().getName()
this.getClass().getName() != this.childrenLock.getClass().getName()
this.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.getClass().getName() != this.filteredChildren.getClass().getName()
this.getClass().getName() != this.scheduler.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.childrenLock.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.filteredChildren.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.scheduler.getClass().getName()
this.childrenLock.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != this.filteredChildren.getClass().getName()
this.childrenLock.getClass().getName() != this.scheduler.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.scheduler.getClass().getName()
this.filteredChildren.getClass().getName() != this.scheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::ENTER
testClass == null
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::EXIT
this.testClass.clazz == orig(testClass)
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.applyValidators(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.applyValidators(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::ENTER
this.testClass has only one value
this.filteredChildren has only one value
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT227
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT227;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return == false
===========================================================================
org.junit.runners.ParentRunner.areAllChildrenIgnored():::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$3.class
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classRules():::ENTER
this.testClass has only one value
this.filteredChildren has only one value
===========================================================================
org.junit.runners.ParentRunner.classRules():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return[])
size(this.filteredChildren[])-1 == size(return[])
size(return[]) == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))-1
size(return[]) == orig(size(this.filteredChildren[]))-1
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.createTestClass(java.lang.Class):::ENTER
this.testClass == null
this.filteredChildren == null
testClass == null
===========================================================================
org.junit.runners.ParentRunner.createTestClass(java.lang.Class):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return.methodsForAnnotations.getClass().getName() == return.fieldsForAnnotations.getClass().getName()
this.testClass == null
this.filteredChildren == null
return has only one value
return.clazz == null
return.methodsForAnnotations has only one value
return.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
return.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.ParentRunner.getDescription():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getDescription():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == org.junit.runner.Description.EMPTY.fTestClass
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren[].getClass().getName() == orig(this.filteredChildren[].getClass().getName())
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
org.junit.runner.Description.serialVersionUID == size(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runner.Description.serialVersionUID == size(this.filteredChildren[])
org.junit.runner.Description.serialVersionUID == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(this.testClass.clazz)
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return.fAnnotations[])
this.testClass has only one value
this.filteredChildren has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "classes"
return.fUniqueId has only one value
org.junit.runners.ParentRunner.VALIDATORS[] elements == org.junit.runners.ParentRunner.VALIDATORS[org.junit.runner.Description.serialVersionUID-1]
this.filteredChildren[] == orig(this.filteredChildren[]) (elementwise)
this.filteredChildren[] is the reverse of orig(this.filteredChildren[])
this.filteredChildren[] elements == this.filteredChildren[org.junit.runner.Description.serialVersionUID-1]
orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1]) in this.filteredChildren[]
this.filteredChildren[] elements == orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1])
this.filteredChildren[].getClass().getName() == orig(this.filteredChildren[].getClass().getName()) (elementwise)
orig(this.filteredChildren[]) elements == this.filteredChildren[org.junit.runner.Description.serialVersionUID-1]
this.filteredChildren[org.junit.runner.Description.serialVersionUID-1] in orig(this.filteredChildren[])
orig(this.filteredChildren[]) elements == orig(this.filteredChildren[post(org.junit.runner.Description.serialVersionUID)-1])
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == return
this.filteredChildren[] == return[]
this.filteredChildren.getClass().getName() == return.getClass().getName()
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return[].getClass().getName() == orig(this.filteredChildren[].getClass().getName())
return.getClass().getName() == orig(this.filteredChildren.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(return[])
this.testClass has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
return[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return[] == orig(this.filteredChildren[]) (elementwise)
return[] is the reverse of orig(this.filteredChildren[])
return[].getClass().getName() == orig(this.filteredChildren[].getClass().getName()) (elementwise)
===========================================================================
org.junit.runners.ParentRunner.getRunnerAnnotations():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getRunnerAnnotations():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return[])
size(return[]) == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))-1
this.testClass has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::ENTER
this.testClass has only one value
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == return
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == return.clazz
this.testClass.methodsForAnnotations == return.methodsForAnnotations
this.testClass.methodsForAnnotations.getClass().getName() == return.methodsForAnnotations.getClass().getName()
this.testClass.fieldsForAnnotations == return.fieldsForAnnotations
this.testClass.fieldsForAnnotations.getClass().getName() == return.methodsForAnnotations.getClass().getName()
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(this.testClass)
return.clazz == orig(this.testClass.clazz)
return.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
return.methodsForAnnotations.getClass().getName() == return.fieldsForAnnotations.getClass().getName()
return.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
return.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
return.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
return has only one value
return.clazz == null
return.methodsForAnnotations has only one value
return.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
return.fieldsForAnnotations has only one value
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != return.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != orig(this.getClass().getName())
this.childrenLock.getClass().getName() != return.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != orig(this.getClass().getName())
this.scheduler.getClass().getName() != return.methodsForAnnotations.getClass().getName()
this.scheduler.getClass().getName() != orig(this.getClass().getName())
return.methodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
child has only one value
child.getClass().getName() == org.junit.internal.runners.ErrorReportingRunner.class
child in this.filteredChildren[]
this.filteredChildren[] elements == child
child.getClass().getName() in this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return == false
orig(child) in this.filteredChildren[]
this.filteredChildren[] elements == orig(child)
orig(child.getClass().getName()) in this.filteredChildren[].getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.isIgnored(java.lang.Object):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.testClass has only one value
this.filteredChildren has only one value
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.testClass has only one value
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.validate():::ENTER
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.validate():::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
this.testClass has only one value
this.filteredChildren == null
===========================================================================
org.junit.runners.ParentRunner.validateClassRules(java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.validateClassRules(java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::ENTER
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(errors[])
this.testClass has only one value
this.filteredChildren == null
isStatic == true
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
errors[] == orig(errors[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == orig(size(errors[]))
this.testClass has only one value
this.filteredChildren == null
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(statement)
return.getClass().getName() == orig(statement.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withInterruptIsolation(org.junit.runners.model.Statement):::ENTER
this.testClass has only one value
this.filteredChildren has only one value
statement has only one value
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withInterruptIsolation(org.junit.runners.model.Statement):::EXIT
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.filteredChildren[] == orig(this.filteredChildren[])
this.filteredChildren.getClass().getName() == orig(this.filteredChildren.getClass().getName())
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
this.testClass has only one value
this.filteredChildren has only one value
return has only one value
return.getClass().getName() == org.junit.runners.ParentRunner$3.class
===========================================================================
org.junit.runners.RuleContainer$1:::OBJECT
this has only one value
===========================================================================
org.junit.runners.RuleContainer$1.():::EXIT
===========================================================================
org.junit.runners.Suite:::CLASS
org.junit.runners.ParentRunner.VALIDATORS has only one value
org.junit.runners.ParentRunner.VALIDATORS[] contains no nulls and has only one value, of length 1
org.junit.runners.ParentRunner.VALIDATORS[] elements has only one value
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator]
org.junit.runners.ParentRunner.VALIDATORS[].getClass().getName() elements == org.junit.validator.AnnotationsValidator.class
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == java.util.Collections$SingletonList.class
size(org.junit.runners.ParentRunner.VALIDATORS[]) == 1
===========================================================================
org.junit.runners.Suite:::OBJECT
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName()
this.runners.getClass().getName() == this.filteredChildren.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() == this.testClass.fieldsForAnnotations.getClass().getName()
size(this.runners[]) == size(org.junit.runners.ParentRunner.VALIDATORS[])
this has only one value
this.runners has only one value
this.runners[] contains no nulls and has only one value, of length 1
this.runners[] elements has only one value
this.runners[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
this.runners[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
this.runners.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.childrenLock has only one value
this.childrenLock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.testClass has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
this.testClass.clazz == null
this.testClass.methodsForAnnotations has only one value
this.testClass.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
this.testClass.fieldsForAnnotations has only one value
this.filteredChildren[] contains no nulls and has only one value, of length 1
this.filteredChildren[] elements has only one value
this.filteredChildren[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
this.filteredChildren[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
this.filteredChildren.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.scheduler has only one value
this.scheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.filteredChildren[]) == 1
this.runners[] == this.filteredChildren[] (elementwise)
this.runners[] is the reverse of this.filteredChildren[]
this.runners[].getClass().getName() == this.filteredChildren[].getClass().getName() (elementwise)
this.runners.getClass().getName() != org.junit.runners.ParentRunner.VALIDATORS.getClass().getName()
this.runners.getClass().getName() != this.childrenLock.getClass().getName()
this.runners.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.runners.getClass().getName() != this.scheduler.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.childrenLock.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() != this.scheduler.getClass().getName()
this.childrenLock.getClass().getName() != this.testClass.methodsForAnnotations.getClass().getName()
this.childrenLock.getClass().getName() != this.scheduler.getClass().getName()
this.testClass.methodsForAnnotations.getClass().getName() != this.scheduler.getClass().getName()
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::ENTER
klass == null
runners has only one value
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
runners[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
runners.getClass().getName() == java.util.ArrayList.class
size(runners[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::EXIT
this.runners[] == runners[]
this.testClass.clazz == orig(klass)
runners[] == orig(runners[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(runners[]))
this.filteredChildren == null
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
runners[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
classes[] == orig(classes[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(classes[]))
this.filteredChildren == null
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::ENTER
this.runners[] == this.filteredChildren[]
this.filteredChildren has only one value
child has only one value
child.getClass().getName() == org.junit.internal.runners.ErrorReportingRunner.class
child in this.runners[]
this.runners[] elements == child
child.getClass().getName() in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::EXIT
this.runners == orig(this.runners)
this.runners[] == this.filteredChildren[]
this.runners[] == orig(this.runners[])
this.runners[] == orig(this.filteredChildren[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
this.runners.getClass().getName() == orig(this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == org.junit.runner.Description.EMPTY.fTestClass
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
org.junit.runner.Description.serialVersionUID == size(this.runners[])
org.junit.runner.Description.serialVersionUID == size(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runner.Description.serialVersionUID == size(this.filteredChildren[])
org.junit.runner.Description.serialVersionUID == orig(size(this.runners[]))
org.junit.runner.Description.serialVersionUID == orig(size(org.junit.runners.ParentRunner.VALIDATORS[]))
org.junit.runner.Description.serialVersionUID == orig(size(this.filteredChildren[]))
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == return.fChildren.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == return.fUniqueId.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
org.junit.runner.Description.EMPTY.fTestClass == org.junit.runner.Description.TEST_MECHANISM.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == return.fTestClass
org.junit.runner.Description.EMPTY.fTestClass == orig(this.testClass.clazz)
orig(child) == this.runners[org.junit.runner.Description.serialVersionUID-1]
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runners.ParentRunner.VALIDATORS[])-1 == size(return.fAnnotations[])
this.filteredChildren has only one value
org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fUniqueId has only one value
org.junit.runner.Description.EMPTY.fUniqueId.getClass().getName() == java.lang.String.class
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.EMPTY.fAnnotations[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fTestClass == null
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fUniqueId has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.math.stat.FrequencyTestFailingTests"
return.fUniqueId has only one value
orig(child) in this.runners[]
this.runners[] elements == orig(child)
this.runners[] elements == this.runners[org.junit.runner.Description.serialVersionUID-1]
orig(child.getClass().getName()) in this.runners[].getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS[] elements == org.junit.runners.ParentRunner.VALIDATORS[org.junit.runner.Description.serialVersionUID-1]
===========================================================================
org.junit.runners.Suite.getChildren():::ENTER
this.filteredChildren == null
===========================================================================
org.junit.runners.Suite.getChildren():::EXIT
this.runners == return
this.runners[] == return[]
this.runners.getClass().getName() == return.getClass().getName()
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
return == orig(this.runners)
return[] == orig(this.runners[])
return.getClass().getName() == orig(this.runners.getClass().getName())
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(return[])
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
this.filteredChildren == null
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
return[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::ENTER
this.runners[] == this.filteredChildren[]
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
this.filteredChildren has only one value
runner has only one value
runner.getClass().getName() == org.junit.internal.runners.ErrorReportingRunner.class
notifier has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
runner in this.runners[]
this.runners[] elements == runner
runner.getClass().getName() in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::EXIT
this.runners == orig(this.runners)
this.runners[] == this.filteredChildren[]
this.runners[] == orig(this.runners[])
this.runners[] == orig(this.filteredChildren[])
this.runners.getClass().getName() == orig(this.runners.getClass().getName())
this.runners.getClass().getName() == orig(this.filteredChildren.getClass().getName())
org.junit.runners.ParentRunner.VALIDATORS == orig(org.junit.runners.ParentRunner.VALIDATORS)
org.junit.runners.ParentRunner.VALIDATORS[] == orig(org.junit.runners.ParentRunner.VALIDATORS[])
org.junit.runners.ParentRunner.VALIDATORS.getClass().getName() == orig(org.junit.runners.ParentRunner.VALIDATORS.getClass().getName())
this.childrenLock == orig(this.childrenLock)
this.childrenLock.getClass().getName() == orig(this.childrenLock.getClass().getName())
this.testClass == orig(this.testClass)
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.testClass.clazz == orig(this.testClass.clazz)
this.testClass.methodsForAnnotations == orig(this.testClass.methodsForAnnotations)
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.methodsForAnnotations.getClass().getName())
this.testClass.methodsForAnnotations.getClass().getName() == orig(this.testClass.fieldsForAnnotations.getClass().getName())
this.testClass.fieldsForAnnotations == orig(this.testClass.fieldsForAnnotations)
this.filteredChildren == orig(this.filteredChildren)
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
notifier.listeners == orig(notifier.listeners)
notifier.listeners[] == orig(notifier.listeners[])
notifier.listeners.getClass().getName() == orig(notifier.listeners.getClass().getName())
notifier.pleaseStop == orig(notifier.pleaseStop)
size(org.junit.runners.ParentRunner.VALIDATORS[]) == size(notifier.listeners[])-1
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.runners[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(this.filteredChildren[]))
size(org.junit.runners.ParentRunner.VALIDATORS[]) == orig(size(notifier.listeners[]))-1
this.filteredChildren has only one value
notifier.listeners has only one value
notifier.listeners[] contains no nulls and has only one value, of length 2
notifier.listeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.runner.notification.SynchronizedRunListener]
notifier.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
notifier.pleaseStop == false
size(notifier.listeners[]) == 2
orig(runner) in this.runners[]
this.runners[] elements == orig(runner)
orig(runner.getClass().getName()) in this.runners[].getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
this.getClass().getName() != this.parents.getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder.RunnerBuilder():::EXIT
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return == orig(parent)
this.parents has only one value
return == null
===========================================================================
org.junit.runners.model.RunnerBuilder.configureRunner(org.junit.runner.Runner):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
runner has only one value
runner.getClass().getName() == org.junit.internal.runners.ErrorReportingRunner.class
===========================================================================
org.junit.runners.model.RunnerBuilder.configureRunner(org.junit.runner.Runner):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
this.parents has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
klass == null
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
this.parents has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
return[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.internal.runners.ErrorReportingRunner]
return[].getClass().getName() elements == org.junit.internal.runners.ErrorReportingRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT74
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT76
this.parents has only one value
return has only one value
orig(this) has only one value
orig(this.getClass().getName()) == org.junit.internal.builders.SuiteMethodBuilder.class
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
return.getClass().getName() == org.junit.internal.runners.ErrorReportingRunner.class
===========================================================================
org.junit.runners.model.Statement:::OBJECT
===========================================================================
org.junit.runners.model.Statement.Statement():::EXIT
===========================================================================
org.junit.runners.model.TestClass$FieldComparator:::OBJECT
this has only one value
===========================================================================
org.junit.runners.model.TestClass$FieldComparator.FieldComparator():::EXIT
===========================================================================
org.junit.runners.model.TestClass$MethodComparator:::OBJECT
this has only one value
===========================================================================
org.junit.runners.model.TestClass$MethodComparator.MethodComparator():::EXIT
===========================================================================
org.junit.runners.model.TestClass:::CLASS
org.junit.runners.model.TestClass.FIELD_COMPARATOR has only one value
org.junit.runners.model.TestClass.FIELD_COMPARATOR != null
org.junit.runners.model.TestClass.METHOD_COMPARATOR has only one value
org.junit.runners.model.TestClass.METHOD_COMPARATOR != null
===========================================================================
org.junit.runners.model.TestClass:::OBJECT
this.methodsForAnnotations.getClass().getName() == this.fieldsForAnnotations.getClass().getName()
this has only one value
this.clazz == null
this.methodsForAnnotations.getClass().getName() == java.util.Collections$UnmodifiableMap.class
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::ENTER
clazz == null
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::EXIT
this.clazz == orig(clazz)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::ENTER
this.clazz == test
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
test == null
annotationClass has only one value
valueClass has only one value
consumer has only one value
consumer.getClass().getName() == org.junit.runners.ParentRunner$ClassRuleCollector.class
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.clazz == orig(test)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::ENTER
this.clazz == test
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
test == null
annotationClass has only one value
valueClass has only one value
consumer has only one value
consumer.getClass().getName() == org.junit.runners.ParentRunner$ClassRuleCollector.class
===========================================================================
org.junit.runners.model.TestClass.collectAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class, org.junit.runners.model.MemberValueConsumer):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.clazz == orig(test)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
annotationClass has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class, boolean):::ENTER
map.getClass().getName() == java.util.Collections$UnmodifiableMap.class
fillIfAbsent == false
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class, boolean):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$EmptyList.class
return.getClass().getName() != orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT215
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::ENTER
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == return
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations.getClass().getName() == orig(this.methodsForAnnotations.getClass().getName())
this.methodsForAnnotations.getClass().getName() == orig(this.fieldsForAnnotations.getClass().getName())
this.fieldsForAnnotations == orig(this.fieldsForAnnotations)
return == orig(this.clazz)
this.methodsForAnnotations has only one value
this.fieldsForAnnotations has only one value
return == null
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::ENTER
testClass == null
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.TestClass.makeDeeplyUnmodifiable(java.util.Map):::ENTER
source.getClass().getName() == java.util.LinkedHashMap.class
===========================================================================
org.junit.runners.model.TestClass.makeDeeplyUnmodifiable(java.util.Map):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
return.getClass().getName() == java.util.Collections$UnmodifiableMap.class
===========================================================================
org.junit.runners.model.TestClass.scanAnnotatedMembers(java.util.Map, java.util.Map):::ENTER
this.methodsForAnnotations == this.fieldsForAnnotations
this.methodsForAnnotations == null
methodsForAnnotations has only one value
methodsForAnnotations.getClass().getName() == java.util.LinkedHashMap.class
fieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.scanAnnotatedMembers(java.util.Map, java.util.Map):::EXIT
org.junit.runners.model.TestClass.FIELD_COMPARATOR == orig(org.junit.runners.model.TestClass.FIELD_COMPARATOR)
org.junit.runners.model.TestClass.METHOD_COMPARATOR == orig(org.junit.runners.model.TestClass.METHOD_COMPARATOR)
this.clazz == orig(this.clazz)
this.methodsForAnnotations == this.fieldsForAnnotations
this.methodsForAnnotations == orig(this.methodsForAnnotations)
this.methodsForAnnotations == orig(this.fieldsForAnnotations)
this.methodsForAnnotations == null
===========================================================================
org.junit.validator.AnnotationValidatorFactory:::CLASS
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationValidatorFactory:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationValidatorFactory.AnnotationValidatorFactory():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator:::OBJECT
===========================================================================
org.junit.validator.AnnotationsValidator$AnnotatableValidator.AnnotatableValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$ClassValidator.ClassValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$FieldValidator.FieldValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator:::CLASS
org.junit.validator.AnnotationsValidator$AnnotatableValidator.ANNOTATION_VALIDATOR_FACTORY has only one value
org.junit.validator.AnnotationValidatorFactory.VALIDATORS_FOR_ANNOTATION_TYPES has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator$MethodValidator.MethodValidator():::EXIT
===========================================================================
org.junit.validator.AnnotationsValidator:::CLASS
org.junit.validator.AnnotationsValidator.VALIDATORS has only one value
org.junit.validator.AnnotationsValidator.VALIDATORS[] contains no nulls and has only one value, of length 3
org.junit.validator.AnnotationsValidator.VALIDATORS[].getClass().getName() == [org.junit.validator.AnnotationsValidator.ClassValidator, org.junit.validator.AnnotationsValidator.MethodValidator, org.junit.validator.AnnotationsValidator.FieldValidator]
org.junit.validator.AnnotationsValidator.VALIDATORS.getClass().getName() == java.util.Arrays$ArrayList.class
size(org.junit.validator.AnnotationsValidator.VALIDATORS[]) == 3
===========================================================================
org.junit.validator.AnnotationsValidator:::OBJECT
this has only one value
===========================================================================
org.junit.validator.AnnotationsValidator.AnnotationsValidator():::EXIT
Exiting Daikon.
