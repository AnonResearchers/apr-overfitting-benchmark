Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 15 times.  Unmatched entries are ignored!
Unterminated calls:
  org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String) : 5 invocations
  org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial) : 2 invocations
  org.joda.time.format.DateTimeFormatter.parseMutableDateTime(java.lang.String) : 1 invocation
  org.joda.time.format.DateTimeFormatter.requireParser() : 1 invocation
  org.joda.time.format.DateTimeFormatter.print(long) : 1 invocation
  org.joda.time.format.DateTimeFormatter.requirePrinter() : 1 invocation
  org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer, org.joda.time.ReadablePartial) : 1 invocation
  org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int) : 1 invocation
  org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable, org.joda.time.ReadablePartial) : 1 invocation
  org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadablePartial) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
org.joda.time.format.DateTimeFormat:::CLASS
org.joda.time.format.DateTimeFormat.FULL == org.joda.time.format.DateTimeFormat.DATE
org.joda.time.format.DateTimeFormat.LONG == org.joda.time.format.DateTimeFormat.TIME
org.joda.time.format.DateTimeFormat.MEDIUM == org.joda.time.format.DateTimeFormat.DATETIME
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.LONG]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.LONG-1]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.MEDIUM]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.MEDIUM-1]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.SHORT]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.SHORT-1]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.NONE]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.NONE-1]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.TIME]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.TIME-1]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.DATETIME]
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.DATETIME-1]
org.joda.time.format.DateTimeFormat.cPatternedCache has only one value
org.joda.time.format.DateTimeFormat.cPatternedCache != null
org.joda.time.format.DateTimeFormat.cPatternedCache.getClass().getName() == java.util.HashMap.class
org.joda.time.format.DateTimeFormat.cStyleCache has only one value
org.joda.time.format.DateTimeFormat.cStyleCache != null
org.joda.time.format.DateTimeFormat.cStyleCache.getClass().getName() == org.joda.time.format.DateTimeFormatter[].class
org.joda.time.format.DateTimeFormat.cStyleCache[] contains only nulls and has only one value, of length 25
org.joda.time.format.DateTimeFormat.cStyleCache[] elements == null
org.joda.time.format.DateTimeFormat.cStyleCache[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
org.joda.time.format.DateTimeFormat.cStyleCache[].getClass().getName() elements == null
org.joda.time.format.DateTimeFormat.cStyleCache[].iPrinter.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
org.joda.time.format.DateTimeFormat.cStyleCache[].iPrinter.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
size(org.joda.time.format.DateTimeFormat.cStyleCache[]) == 25
org.joda.time.format.DateTimeFormat.cPatternedCache.getClass().getName() != org.joda.time.format.DateTimeFormat.cStyleCache.getClass().getName()
org.joda.time.format.DateTimeFormat.cStyleCache[] elements == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL]
===========================================================================
org.joda.time.format.DateTimeFormat.parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String):::ENTER
org.joda.time.format.DateTimeFormat.FULL == size(builder.iElementPairs[])
builder.iFormatter == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL]
builder.iElementPairs[] == []
builder.iElementPairs[].getClass().getName() == []
builder.iFormatter == null
builder.iFormatter in org.joda.time.format.DateTimeFormat.cStyleCache[]
org.joda.time.format.DateTimeFormat.cStyleCache[] elements == builder.iFormatter
===========================================================================
org.joda.time.format.DateTimeFormat.parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String):::EXIT
org.joda.time.format.DateTimeFormat.cPatternedCache == orig(org.joda.time.format.DateTimeFormat.cPatternedCache)
org.joda.time.format.DateTimeFormat.cPatternedCache.getClass().getName() == orig(org.joda.time.format.DateTimeFormat.cPatternedCache.getClass().getName())
org.joda.time.format.DateTimeFormat.cStyleCache == orig(org.joda.time.format.DateTimeFormat.cStyleCache)
org.joda.time.format.DateTimeFormat.cStyleCache.getClass().getName() == orig(org.joda.time.format.DateTimeFormat.cStyleCache.getClass().getName())
org.joda.time.format.DateTimeFormat.cStyleCache[] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[])
builder.iElementPairs == orig(builder.iElementPairs)
builder.iFormatter == orig(builder.iFormatter)
builder.iFormatter == org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL]
pattern.toString == orig(pattern.toString)
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.LONG)])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.LONG)-1])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.MEDIUM)])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.MEDIUM)-1])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.SHORT)])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.SHORT)-1])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.NONE)])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.NONE)-1])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.TIME)])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.TIME)-1])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.DATETIME)])
org.joda.time.format.DateTimeFormat.cStyleCache[org.joda.time.format.DateTimeFormat.FULL] == orig(org.joda.time.format.DateTimeFormat.cStyleCache[post(org.joda.time.format.DateTimeFormat.DATETIME)-1])
builder.iElementPairs[org.joda.time.format.DateTimeFormat.FULL] == builder.iElementPairs[org.joda.time.format.DateTimeFormat.LONG]
builder.iElementPairs[org.joda.time.format.DateTimeFormat.FULL] == builder.iElementPairs[org.joda.time.format.DateTimeFormat.LONG-1]
builder.iElementPairs[org.joda.time.format.DateTimeFormat.FULL] == builder.iElementPairs[org.joda.time.format.DateTimeFormat.MEDIUM-1]
builder.iElementPairs[org.joda.time.format.DateTimeFormat.FULL] == builder.iElementPairs[org.joda.time.format.DateTimeFormat.TIME]
builder.iElementPairs[org.joda.time.format.DateTimeFormat.FULL] == builder.iElementPairs[org.joda.time.format.DateTimeFormat.TIME-1]
builder.iElementPairs[org.joda.time.format.DateTimeFormat.FULL] == builder.iElementPairs[org.joda.time.format.DateTimeFormat.DATETIME-1]
builder.iFormatter == null
org.joda.time.format.DateTimeFormat.FULL < size(builder.iElementPairs[])-1
org.joda.time.format.DateTimeFormat.LONG <= size(builder.iElementPairs[])-1
org.joda.time.format.DateTimeFormat.MEDIUM <= size(builder.iElementPairs[])
org.joda.time.format.DateTimeFormat.MEDIUM != size(builder.iElementPairs[])-1
org.joda.time.format.DateTimeFormat.SHORT != size(builder.iElementPairs[])
org.joda.time.format.DateTimeFormat.SHORT != size(builder.iElementPairs[])-1
org.joda.time.format.DateTimeFormat.NONE != size(builder.iElementPairs[])
org.joda.time.format.DateTimeFormat.NONE != size(builder.iElementPairs[])-1
builder.iFormatter in org.joda.time.format.DateTimeFormat.cStyleCache[]
org.joda.time.format.DateTimeFormat.cStyleCache[] elements == builder.iFormatter
size(org.joda.time.format.DateTimeFormat.cStyleCache[])-1 > size(builder.iElementPairs[])
===========================================================================
org.joda.time.format.DateTimeFormatter:::OBJECT
this.iPrinter.getClass().getName() == this.iParser.getClass().getName()
this.iDefaultYear one of { 2000, 2012 }
this.iPrinter.getClass().getName() != this.iChrono.getClass().getName()
this.iPrinter.getClass().getName() != this.iZone.getClass().getName()
this.iParser.getClass().getName() != this.iChrono.getClass().getName()
this.iParser.getClass().getName() != this.iZone.getClass().getName()
this.iChrono.getClass().getName() != this.iZone.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser):::ENTER
printer.getClass().getName() == parser.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser):::EXIT
this.iPrinter == orig(printer)
this.iPrinter.getClass().getName() == orig(printer.getClass().getName())
this.iParser == orig(parser)
this.iParser.getClass().getName() == orig(parser.getClass().getName())
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer, int):::ENTER
printer.getClass().getName() == parser.getClass().getName()
parser != null
defaultYear one of { 2000, 2012 }
printer.getClass().getName() != chrono.getClass().getName()
printer.getClass().getName() != zone.getClass().getName()
parser.getClass().getName() != chrono.getClass().getName()
parser.getClass().getName() != zone.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer, int):::EXIT
this.iPrinter == orig(printer)
this.iPrinter.getClass().getName() == orig(printer.getClass().getName())
this.iParser == orig(parser)
this.iParser.getClass().getName() == orig(parser.getClass().getName())
this.iLocale == orig(locale)
this.iOffsetParsed == orig(offsetParsed)
this.iChrono == orig(chrono)
this.iChrono.getClass().getName() == orig(chrono.getClass().getName())
this.iZone == orig(zone)
this.iZone.getClass().getName() == orig(zone.getClass().getName())
this.iPivotYear == orig(pivotYear)
this.iDefaultYear == orig(defaultYear)
this.iParser != null
===========================================================================
org.joda.time.format.DateTimeFormatter.getChronology():::ENTER
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.BuddhistChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.getChronology():::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == return
this.iChrono.getClass().getName() == return.getClass().getName()
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
return == orig(this.iChrono)
return.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
return.getClass().getName() == org.joda.time.chrono.BuddhistChronology.class
===========================================================================
org.joda.time.format.DateTimeFormatter.getLocale():::ENTER
this.iPrinter != null
this.iParser != null
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.GJChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.getLocale():::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == return
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
return == orig(this.iLocale)
this.iPrinter != null
this.iParser != null
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.GJChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.getParser():::ENTER
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.getParser():::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == return.getClass().getName()
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == return
this.iParser.getClass().getName() == return.getClass().getName()
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
return == orig(this.iParser)
return.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.getPivotYear():::ENTER
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.getPivotYear():::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == return
this.iDefaultYear == orig(this.iDefaultYear)
return == orig(this.iPivotYear)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.getPrinter():::ENTER
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.getPrinter():::EXIT
this.iPrinter == return
this.iPrinter.getClass().getName() == return.getClass().getName()
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == return.getClass().getName()
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
return == orig(this.iPrinter)
return.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.getZone():::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iChrono == null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.getZone():::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == return
this.iZone.getClass().getName() == return.getClass().getName()
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
return == orig(this.iZone)
return.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iChrono == null
this.iPivotYear == null
this.iDefaultYear == 2000
return.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
===========================================================================
org.joda.time.format.DateTimeFormatter.isOffsetParsed():::ENTER
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iChrono == null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.isOffsetParsed():::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == return
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
return == orig(this.iOffsetParsed)
(return == false)  ==>  (this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class)
(return == true)  ==>  (this.iZone == null)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iChrono == null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.isOffsetParsed():::EXIT;condition="return == true"
this.iZone == null
return == true
===========================================================================
org.joda.time.format.DateTimeFormatter.isOffsetParsed():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.joda.time.format.DateTimeFormatter.isParser():::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.isParser():::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
(this.iParser == null)  <==>  (return == false)
(this.iParser == null)  ==>  (orig(this) has only one value)
(this.iParser == null)  ==>  (this.iOffsetParsed == return)
(this.iParser == null)  ==>  (this.iPrinter has only one value)
(this.iParser has only one value)  <==>  (return == true)
(this.iParser has only one value)  ==>  (this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class)
(this.iParser has only one value)  ==>  (this.iPrinter.getClass().getName() == this.iParser.getClass().getName())
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.isParser():::EXIT;condition="return == true"
this.iParser has only one value
return == true
===========================================================================
org.joda.time.format.DateTimeFormatter.isParser():::EXIT;condition="not(return == true)"
this.iOffsetParsed == return
return == orig(this.iOffsetParsed)
this.iPrinter has only one value
this.iParser == null
return == false
orig(this) has only one value
===========================================================================
org.joda.time.format.DateTimeFormatter.isPrinter():::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.isPrinter():::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
(this.iPrinter == null)  <==>  (return == false)
(this.iPrinter == null)  ==>  (orig(this) has only one value)
(this.iPrinter == null)  ==>  (this.iOffsetParsed == return)
(this.iPrinter == null)  ==>  (this.iParser has only one value)
(this.iPrinter has only one value)  <==>  (return == true)
(this.iPrinter has only one value)  ==>  (this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class)
(this.iPrinter has only one value)  ==>  (this.iPrinter.getClass().getName() == this.iParser.getClass().getName())
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.isPrinter():::EXIT;condition="return == true"
this.iPrinter has only one value
return == true
===========================================================================
org.joda.time.format.DateTimeFormatter.isPrinter():::EXIT;condition="not(return == true)"
this.iOffsetParsed == return
return == orig(this.iOffsetParsed)
this.iPrinter == null
this.iParser has only one value
return == false
orig(this) has only one value
===========================================================================
org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String):::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
text != null
===========================================================================
org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
text.toString == orig(text.toString)
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
return != null
===========================================================================
org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int):::ENTER
this.iParser != null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
instant != null
instant.getClass().getName() == org.joda.time.MutableDateTime.class
text != null
position one of { 0, 2 }
this.iPrinter.getClass().getName() != instant.getClass().getName()
this.iParser.getClass().getName() != instant.getClass().getName()
this.iZone.getClass().getName() != instant.getClass().getName()
this.iDefaultYear > position
===========================================================================
org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
text.toString == orig(text.toString)
this.iParser != null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iPrinter.getClass().getName() != orig(instant.getClass().getName())
this.iParser.getClass().getName() != orig(instant.getClass().getName())
this.iZone.getClass().getName() != orig(instant.getClass().getName())
this.iDefaultYear > return
this.iDefaultYear > orig(position)
return != orig(position)
===========================================================================
org.joda.time.format.DateTimeFormatter.parseLocalDate(java.lang.String):::ENTER
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iOffsetParsed == false
this.iZone == null
text != null
===========================================================================
org.joda.time.format.DateTimeFormatter.parseLocalDate(java.lang.String):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == return.iChronology.getClass().getName()
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
text.toString == orig(text.toString)
org.joda.time.LocalDate.YEAR == return.iHash
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iOffsetParsed == false
this.iZone == null
return != null
org.joda.time.LocalDate.DATE_DURATION_TYPES has only one value
org.joda.time.LocalDate.DATE_DURATION_TYPES != null
org.joda.time.LocalDate.DATE_DURATION_TYPES.getClass().getName() == java.util.HashSet.class
return.iChronology != null
this.iPrinter.getClass().getName() != org.joda.time.LocalDate.DATE_DURATION_TYPES.getClass().getName()
this.iPrinter.getClass().getName() != return.iChronology.getClass().getName()
this.iChrono.getClass().getName() != org.joda.time.LocalDate.DATE_DURATION_TYPES.getClass().getName()
this.iDefaultYear > org.joda.time.LocalDate.serialVersionUID
this.iDefaultYear > org.joda.time.LocalDate.YEAR
this.iDefaultYear > org.joda.time.LocalDate.MONTH_OF_YEAR
this.iDefaultYear > org.joda.time.LocalDate.DAY_OF_MONTH
this.iDefaultYear != return.iLocalMillis
org.joda.time.LocalDate.serialVersionUID != return.iLocalMillis
org.joda.time.LocalDate.YEAR != return.iLocalMillis
org.joda.time.LocalDate.MONTH_OF_YEAR != return.iLocalMillis
org.joda.time.LocalDate.DAY_OF_MONTH != return.iLocalMillis
return.iLocalMillis % org.joda.time.LocalDate.DAY_OF_MONTH == 0
org.joda.time.LocalDate.DATE_DURATION_TYPES.getClass().getName() != return.iChronology.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.parseLocalDateTime(java.lang.String):::ENTER
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iOffsetParsed == false
this.iZone == null
text != null
===========================================================================
org.joda.time.format.DateTimeFormatter.parseLocalDateTime(java.lang.String):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == return.iChronology.getClass().getName()
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
text.toString == orig(text.toString)
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iOffsetParsed == false
this.iZone == null
return != null
return.iChronology != null
this.iPrinter.getClass().getName() != return.iChronology.getClass().getName()
this.iDefaultYear > org.joda.time.LocalDateTime.serialVersionUID
this.iDefaultYear > org.joda.time.LocalDateTime.YEAR
this.iDefaultYear > org.joda.time.LocalDateTime.MONTH_OF_YEAR
this.iDefaultYear > org.joda.time.LocalDateTime.DAY_OF_MONTH
this.iDefaultYear > org.joda.time.LocalDateTime.MILLIS_OF_DAY
this.iDefaultYear != return.iLocalMillis
org.joda.time.LocalDateTime.serialVersionUID < return.iLocalMillis
org.joda.time.LocalDateTime.YEAR != return.iLocalMillis
org.joda.time.LocalDateTime.MONTH_OF_YEAR != return.iLocalMillis
org.joda.time.LocalDateTime.DAY_OF_MONTH != return.iLocalMillis
return.iLocalMillis % org.joda.time.LocalDateTime.DAY_OF_MONTH == 0
org.joda.time.LocalDateTime.MILLIS_OF_DAY != return.iLocalMillis
return.iLocalMillis % org.joda.time.LocalDateTime.MILLIS_OF_DAY == 0
===========================================================================
org.joda.time.format.DateTimeFormatter.parseLocalTime(java.lang.String):::ENTER
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.BuddhistChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
text.toString one of { "2004-06-09T10:20:30+18:00", "2004-06-09T10:20:30-18:00", "2004-06-09T10:20:30Z" }
===========================================================================
org.joda.time.format.DateTimeFormatter.parseLocalTime(java.lang.String):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == return.iChronology.getClass().getName()
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
text.toString == orig(text.toString)
org.joda.time.LocalTime.HOUR_OF_DAY == org.joda.time.LocalTime.MIDNIGHT.iLocalMillis
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.BuddhistChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
text.toString one of { "2004-06-09T10:20:30+18:00", "2004-06-09T10:20:30-18:00", "2004-06-09T10:20:30Z" }
org.joda.time.LocalTime.MIDNIGHT has only one value
org.joda.time.LocalTime.TIME_DURATION_TYPES has only one value
org.joda.time.LocalTime.TIME_DURATION_TYPES.getClass().getName() == java.util.HashSet.class
org.joda.time.LocalTime.MIDNIGHT.iChronology has only one value
org.joda.time.LocalTime.MIDNIGHT.iChronology.getClass().getName() == org.joda.time.chrono.ISOChronology.class
return.iLocalMillis == 37230000
===========================================================================
org.joda.time.format.DateTimeFormatter.parseMillis(java.lang.String):::ENTER
this has only one value
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone has only one value
this.iZone.getClass().getName() == org.joda.time.tz.FixedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
text.toString one of { "10.5123456", "10.512999" }
===========================================================================
org.joda.time.format.DateTimeFormatter.parseMillis(java.lang.String):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
text.toString == orig(text.toString)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone has only one value
this.iZone.getClass().getName() == org.joda.time.tz.FixedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
text.toString one of { "10.5123456", "10.512999" }
return == 10512
===========================================================================
org.joda.time.format.DateTimeFormatter.parseMutableDateTime(java.lang.String):::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
text != null
===========================================================================
org.joda.time.format.DateTimeFormatter.parseMutableDateTime(java.lang.String):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
text.toString == orig(text.toString)
org.joda.time.MutableDateTime.ROUND_NONE == return.iRoundingMode
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
return != null
return.iRoundingField == null
===========================================================================
org.joda.time.format.DateTimeFormatter.print(long):::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
instant one of { 0, 1086776430040L }
===========================================================================
org.joda.time.format.DateTimeFormatter.print(long):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
return.toString one of { "Thu 1970-01-01T01:00:00+01:00", "Wed 2004-06-09T11:20:30+01:00" }
===========================================================================
org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant):::ENTER
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iOffsetParsed == false
this.iPivotYear == null
this.iDefaultYear == 2000
instant != null
instant.getClass().getName() == org.joda.time.DateTime.class
this.iPrinter.getClass().getName() != instant.getClass().getName()
this.iChrono.getClass().getName() != instant.getClass().getName()
this.iZone.getClass().getName() != instant.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iOffsetParsed == false
this.iPivotYear == null
this.iDefaultYear == 2000
return != null
this.iPrinter.getClass().getName() != orig(instant.getClass().getName())
this.iChrono.getClass().getName() != orig(instant.getClass().getName())
this.iZone.getClass().getName() != orig(instant.getClass().getName())
===========================================================================
org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadablePartial):::ENTER
this has only one value
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
partial has only one value
partial.getClass().getName() == org.joda.time.LocalDate.class
===========================================================================
org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadablePartial):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
return has only one value
return.toString == "2004-06-09"
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer, long):::ENTER
this has only one value
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
out has only one value
out.getClass().getName() == java.io.CharArrayWriter.class
instant == 1086776430040L
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer, long):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer, long, org.joda.time.Chronology):::ENTER
this has only one value
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
buf.getClass().getName() == java.io.CharArrayWriter.class
instant == 1086776430040L
chrono.getClass().getName() == org.joda.time.chrono.ISOChronology.class
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer, long, org.joda.time.Chronology):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer, org.joda.time.ReadableInstant):::ENTER
this has only one value
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
out has only one value
out.getClass().getName() == java.io.CharArrayWriter.class
instant has only one value
instant.getClass().getName() == org.joda.time.DateTime.class
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer, org.joda.time.ReadableInstant):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer, org.joda.time.ReadablePartial):::ENTER
this has only one value
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
out has only one value
out.getClass().getName() == java.io.CharArrayWriter.class
partial has only one value
partial.getClass().getName() == org.joda.time.YearMonthDay.class
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.io.Writer, org.joda.time.ReadablePartial):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable, long):::ENTER
this has only one value
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
appendable has only one value
appendable.getClass().getName() == java.lang.StringBuilder.class
instant == 1086776430040L
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable, long):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable, org.joda.time.ReadableInstant):::ENTER
this has only one value
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
appendable has only one value
appendable.getClass().getName() == java.lang.StringBuilder.class
instant has only one value
instant.getClass().getName() == org.joda.time.DateTime.class
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable, org.joda.time.ReadableInstant):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable, org.joda.time.ReadablePartial):::ENTER
this has only one value
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
appendable has only one value
appendable.getClass().getName() == java.lang.StringBuilder.class
partial has only one value
partial.getClass().getName() == org.joda.time.LocalDate.class
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.Appendable, org.joda.time.ReadablePartial):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer, long):::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
instant one of { 0, 1086776430040L }
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer, long):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology):::ENTER
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iOffsetParsed == false
this.iPivotYear == null
this.iDefaultYear == 2000
buf != null
instant one of { 0, 1086776430040L }
this.iPrinter.getClass().getName() != chrono.getClass().getName()
this.iParser.getClass().getName() != chrono.getClass().getName()
this.iZone.getClass().getName() != chrono.getClass().getName()
this.iDefaultYear != instant
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iOffsetParsed == false
this.iPivotYear == null
this.iDefaultYear == 2000
this.iPrinter.getClass().getName() != orig(chrono.getClass().getName())
this.iParser.getClass().getName() != orig(chrono.getClass().getName())
this.iZone.getClass().getName() != orig(chrono.getClass().getName())
this.iDefaultYear != orig(instant)
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer, org.joda.time.ReadableInstant):::ENTER
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iOffsetParsed == false
this.iPivotYear == null
this.iDefaultYear == 2000
buf != null
instant != null
instant.getClass().getName() == org.joda.time.DateTime.class
this.iPrinter.getClass().getName() != instant.getClass().getName()
this.iChrono.getClass().getName() != instant.getClass().getName()
this.iZone.getClass().getName() != instant.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer, org.joda.time.ReadableInstant):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iOffsetParsed == false
this.iPivotYear == null
this.iDefaultYear == 2000
this.iPrinter.getClass().getName() != orig(instant.getClass().getName())
this.iChrono.getClass().getName() != orig(instant.getClass().getName())
this.iZone.getClass().getName() != orig(instant.getClass().getName())
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial):::ENTER
this has only one value
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter has only one value
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser has only one value
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.requireParser():::ENTER
this.iParser != null
===========================================================================
org.joda.time.format.DateTimeFormatter.requireParser():::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == return.getClass().getName()
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == return
this.iParser.getClass().getName() == return.getClass().getName()
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
return == orig(this.iParser)
return.getClass().getName() == orig(this.iParser.getClass().getName())
return != null
this.iChrono.getClass().getName() != return.getClass().getName()
this.iZone.getClass().getName() != return.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.requirePrinter():::ENTER
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iOffsetParsed == false
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.requirePrinter():::EXIT
this.iPrinter == return
this.iPrinter.getClass().getName() == return.getClass().getName()
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == return.getClass().getName()
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
return == orig(this.iPrinter)
return.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iOffsetParsed == false
this.iPivotYear == null
this.iDefaultYear == 2000
return != null
return.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iChrono.getClass().getName() != return.getClass().getName()
this.iZone.getClass().getName() != return.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.selectChronology(org.joda.time.Chronology):::ENTER
this.iPrinter.getClass().getName() != chrono.getClass().getName()
this.iParser.getClass().getName() != chrono.getClass().getName()
this.iZone.getClass().getName() != chrono.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.selectChronology(org.joda.time.Chronology):::EXIT
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == return.getClass().getName()
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
return != null
this.iPrinter.getClass().getName() != return.getClass().getName()
this.iPrinter.getClass().getName() != orig(chrono.getClass().getName())
this.iParser.getClass().getName() != return.getClass().getName()
this.iParser.getClass().getName() != orig(chrono.getClass().getName())
this.iZone.getClass().getName() != return.getClass().getName()
this.iZone.getClass().getName() != orig(chrono.getClass().getName())
===========================================================================
org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology):::ENTER
this.iChrono.getClass().getName() == chrono.getClass().getName()
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iLocale == null
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.BuddhistChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
this.iPrinter.getClass().getName() != chrono.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology):::EXIT259
this.iChrono == return.iChrono
this.iChrono == orig(chrono)
this.iChrono.getClass().getName() == orig(chrono.getClass().getName())
return == orig(this)
===========================================================================
org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology):::EXIT261
this.iChrono == null
return.iChrono != null
===========================================================================
org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology):::EXIT
this.iPrinter == return.iPrinter
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == return.iPrinter.getClass().getName()
this.iPrinter.getClass().getName() == return.iParser.getClass().getName()
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == return.iParser
this.iParser == orig(this.iParser)
this.iLocale == return.iLocale
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == return.iOffsetParsed
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == return.iChrono.getClass().getName()
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == return.iZone
this.iZone == orig(this.iZone)
this.iPivotYear == return.iPivotYear
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == return.iDefaultYear
this.iDefaultYear == orig(this.iDefaultYear)
return.iChrono == orig(chrono)
return.iChrono.getClass().getName() == orig(chrono.getClass().getName())
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iLocale == null
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.BuddhistChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
return != null
this.iPrinter.getClass().getName() != return.iChrono.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.withDefaultYear(int):::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.GJChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
defaultYear == 2012
===========================================================================
org.joda.time.format.DateTimeFormatter.withDefaultYear(int):::EXIT
this.iPrinter == return.iPrinter
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == return.iPrinter.getClass().getName()
this.iPrinter.getClass().getName() == return.iParser.getClass().getName()
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == return.iParser
this.iParser == orig(this.iParser)
this.iLocale == return.iLocale
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == return.iOffsetParsed
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == return.iChrono
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == return.iChrono.getClass().getName()
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == return.iZone
this.iZone == orig(this.iZone)
this.iPivotYear == return.iPivotYear
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == orig(this.iDefaultYear)
return.iDefaultYear == orig(defaultYear)
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.GJChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
return.iDefaultYear == 2012
===========================================================================
org.joda.time.format.DateTimeFormatter.withLocale(java.util.Locale):::ENTER
this.iPrinter != null
this.iParser != null
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.GJChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.withLocale(java.util.Locale):::EXIT191
this.iLocale == return.iLocale
this.iLocale == orig(locale)
return == orig(this)
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iChrono == null
===========================================================================
org.joda.time.format.DateTimeFormatter.withLocale(java.util.Locale):::EXIT193
this.iLocale == null
return.iLocale != null
===========================================================================
org.joda.time.format.DateTimeFormatter.withLocale(java.util.Locale):::EXIT
this.iPrinter == return.iPrinter
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == return.iPrinter.getClass().getName()
this.iPrinter.getClass().getName() == return.iParser.getClass().getName()
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == return.iParser
this.iParser == orig(this.iParser)
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == return.iOffsetParsed
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == return.iChrono
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == return.iChrono.getClass().getName()
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == return.iZone
this.iZone == orig(this.iZone)
this.iPivotYear == return.iPivotYear
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == return.iDefaultYear
this.iDefaultYear == orig(this.iDefaultYear)
return.iLocale == orig(locale)
this.iPrinter != null
this.iParser != null
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.GJChronology.class
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
return != null
===========================================================================
org.joda.time.format.DateTimeFormatter.withOffsetParsed():::ENTER
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iLocale == null
this.iChrono == null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.withOffsetParsed():::EXIT224
this.iOffsetParsed == return.iOffsetParsed
this.iZone == return.iZone
return == orig(this)
this.iPrinter has only one value
this.iParser has only one value
this.iOffsetParsed == true
this.iZone == null
return has only one value
orig(this) has only one value
===========================================================================
org.joda.time.format.DateTimeFormatter.withOffsetParsed():::EXIT226
this.iOffsetParsed == false
===========================================================================
org.joda.time.format.DateTimeFormatter.withOffsetParsed():::EXIT
this.iPrinter == return.iPrinter
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == return.iPrinter.getClass().getName()
this.iPrinter.getClass().getName() == return.iParser.getClass().getName()
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == return.iParser
this.iParser == orig(this.iParser)
this.iLocale == return.iLocale
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == return.iChrono
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == return.iPivotYear
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == return.iDefaultYear
this.iDefaultYear == orig(this.iDefaultYear)
(this.iOffsetParsed == false)  ==>  (this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class)
(this.iOffsetParsed == true)  ==>  (orig(this) has only one value)
(this.iOffsetParsed == true)  ==>  (return == orig(this))
(this.iOffsetParsed == true)  ==>  (return has only one value)
(this.iOffsetParsed == true)  ==>  (this.iOffsetParsed == return.iOffsetParsed)
(this.iOffsetParsed == true)  ==>  (this.iParser has only one value)
(this.iOffsetParsed == true)  ==>  (this.iPrinter has only one value)
(this.iOffsetParsed == true)  ==>  (this.iZone == null)
(this.iOffsetParsed == true)  ==>  (this.iZone == return.iZone)
this.iPrinter != null
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iLocale == null
this.iChrono == null
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
return != null
return.iOffsetParsed == true
return.iZone == null
===========================================================================
org.joda.time.format.DateTimeFormatter.withPivotYear(int):::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.GJChronology.class
this.iZone == null
this.iDefaultYear == 2000
pivotYear one of { 13, 2050 }
===========================================================================
org.joda.time.format.DateTimeFormatter.withPivotYear(int):::EXIT
this.iPrinter == return.iPrinter
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == return.iPrinter.getClass().getName()
this.iPrinter.getClass().getName() == return.iParser.getClass().getName()
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == return.iParser
this.iParser == orig(this.iParser)
this.iLocale == return.iLocale
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == return.iOffsetParsed
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == return.iChrono
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == return.iChrono.getClass().getName()
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == return.iZone
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == return.iDefaultYear
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.GJChronology.class
this.iZone == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.withPivotYear(java.lang.Integer):::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.GJChronology.class
this.iZone == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.withPivotYear(java.lang.Integer):::EXIT370
this.iPivotYear == return.iPivotYear
return == orig(this)
this.iPrinter has only one value
this.iParser has only one value
this.iLocale == null
this.iChrono == null
===========================================================================
org.joda.time.format.DateTimeFormatter.withPivotYear(java.lang.Integer):::EXIT372
return.iPivotYear == orig(pivotYear)
this.iPivotYear == null
===========================================================================
org.joda.time.format.DateTimeFormatter.withPivotYear(java.lang.Integer):::EXIT
this.iPrinter == return.iPrinter
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == return.iPrinter.getClass().getName()
this.iPrinter.getClass().getName() == return.iParser.getClass().getName()
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == return.iParser
this.iParser == orig(this.iParser)
this.iLocale == return.iLocale
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == return.iOffsetParsed
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == return.iChrono
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == return.iChrono.getClass().getName()
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == return.iZone
this.iZone == orig(this.iZone)
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == return.iDefaultYear
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iOffsetParsed == false
this.iChrono.getClass().getName() == org.joda.time.chrono.GJChronology.class
this.iZone == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone):::ENTER
this.iZone.getClass().getName() == zone.getClass().getName()
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iChrono.getClass().getName() == org.joda.time.chrono.ISOChronology.class
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
this.iPrinter.getClass().getName() != zone.getClass().getName()
this.iParser.getClass().getName() != zone.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone):::EXIT323
this.iOffsetParsed == return.iOffsetParsed
this.iZone == return.iZone
this.iZone == orig(zone)
this.iZone.getClass().getName() == orig(zone.getClass().getName())
return == orig(this)
this.iOffsetParsed == false
===========================================================================
org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone):::EXIT325
this.iZone == null
return.iZone != null
===========================================================================
org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone):::EXIT
this.iPrinter == return.iPrinter
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == return.iPrinter.getClass().getName()
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iParser == return.iParser
this.iParser == orig(this.iParser)
this.iParser.getClass().getName() == return.iParser.getClass().getName()
this.iParser.getClass().getName() == orig(this.iParser.getClass().getName())
this.iLocale == return.iLocale
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == return.iChrono
this.iChrono == orig(this.iChrono)
this.iChrono.getClass().getName() == return.iChrono.getClass().getName()
this.iChrono.getClass().getName() == orig(this.iChrono.getClass().getName())
this.iZone == orig(this.iZone)
this.iZone.getClass().getName() == return.iZone.getClass().getName()
this.iZone.getClass().getName() == orig(this.iZone.getClass().getName())
this.iPivotYear == return.iPivotYear
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == return.iDefaultYear
this.iDefaultYear == orig(this.iDefaultYear)
return.iZone == orig(zone)
return.iZone.getClass().getName() == orig(zone.getClass().getName())
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iParser != null
this.iParser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iChrono.getClass().getName() == org.joda.time.chrono.ISOChronology.class
this.iZone.getClass().getName() == org.joda.time.tz.CachedDateTimeZone.class
this.iPivotYear == null
this.iDefaultYear == 2000
return != null
return.iOffsetParsed == false
this.iPrinter.getClass().getName() != return.iZone.getClass().getName()
this.iParser.getClass().getName() != return.iZone.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatter.withZoneUTC():::ENTER
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
===========================================================================
org.joda.time.format.DateTimeFormatter.withZoneUTC():::EXIT
this.iPrinter == return.iPrinter
this.iPrinter == orig(this.iPrinter)
this.iPrinter.getClass().getName() == return.iPrinter.getClass().getName()
this.iPrinter.getClass().getName() == return.iParser.getClass().getName()
this.iPrinter.getClass().getName() == orig(this.iPrinter.getClass().getName())
this.iPrinter.getClass().getName() == orig(this.iParser.getClass().getName())
this.iParser == return.iParser
this.iParser == orig(this.iParser)
this.iLocale == return.iLocale
this.iLocale == orig(this.iLocale)
this.iOffsetParsed == return.iOffsetParsed
this.iOffsetParsed == orig(this.iOffsetParsed)
this.iChrono == return.iChrono
this.iChrono == orig(this.iChrono)
this.iZone == orig(this.iZone)
this.iPivotYear == return.iPivotYear
this.iPivotYear == orig(this.iPivotYear)
this.iDefaultYear == return.iDefaultYear
this.iDefaultYear == orig(this.iDefaultYear)
this.iPrinter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
this.iLocale == null
this.iOffsetParsed == false
this.iChrono == null
this.iZone == null
this.iPivotYear == null
this.iDefaultYear == 2000
return.iZone has only one value
return.iZone.getClass().getName() == org.joda.time.tz.FixedDateTimeZone.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:::OBJECT
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.CharacterLiteral(char):::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.CharacterLiteral(char):::EXIT
this.iValue == orig(value)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimateParsedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimateParsedLength():::EXIT
this.iValue == orig(this.iValue)
return == 1
this.iValue > return
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimatePrintedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimatePrintedLength():::EXIT
this.iValue == orig(this.iValue)
return == 1
this.iValue > return
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::ENTER
bucket != null
text != null
this.iValue > position
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT1241
this.iValue one of { 44, 46, 84 }
text.toString one of { "2004-06-09", "2004-06-09T10:20:30" }
return one of { -20, -11 }
orig(position) one of { 10, 19 }
return < orig(position)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT1259
return - orig(position) - 1 == 0
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT
this.iValue == orig(this.iValue)
text.toString == orig(text.toString)
return != 0
this.iValue > return
this.iValue > orig(position)
return != orig(position)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::ENTER
out != null
out.getClass().getName() == java.io.CharArrayWriter.class
instant one of { 1086776430040L, 1086780030040L }
chrono has only one value
chrono != null
chrono.getClass().getName() == org.joda.time.chrono.ISOChronology.class
displayOffset one of { 0, 3600000 }
displayZone != null
locale has only one value
locale != null
this.iValue < instant
this.iValue != displayOffset
out.getClass().getName() != chrono.getClass().getName()
out.getClass().getName() != displayZone.getClass().getName()
instant > displayOffset
chrono.getClass().getName() != displayZone.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT
this.iValue == orig(this.iValue)
this.iValue < orig(instant)
this.iValue != orig(displayOffset)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale):::ENTER
this.iValue == 45
out has only one value
out.getClass().getName() == java.io.CharArrayWriter.class
partial has only one value
partial.getClass().getName() == org.joda.time.YearMonthDay.class
locale has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale):::EXIT
this.iValue == orig(this.iValue)
this.iValue == 45
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::ENTER
buf != null
chrono != null
displayZone != null
locale != null
this.iValue < instant
this.iValue != displayOffset
instant >= displayOffset
chrono.getClass().getName() != displayZone.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT
this.iValue == orig(this.iValue)
this.iValue < orig(instant)
this.iValue != orig(displayOffset)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale):::ENTER
this.iValue == 45
locale has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale):::EXIT
this.iValue == orig(this.iValue)
this.iValue == 45
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite:::OBJECT
this.iPrinters[].getClass().getName() == this.iParsers[].getClass().getName()
size(this.iPrinters[]) == size(this.iParsers[])
this.iPrinters.getClass().getName() == org.joda.time.format.DateTimePrinter[].class
this.iPrinters[] elements != null
this.iParsers.getClass().getName() == org.joda.time.format.DateTimeParser[].class
this.iParsers[] elements != null
this.iPrintedLengthEstimate >= 0
this.iParsedLengthEstimate >= 0
this.iPrinters.getClass().getName() != this.iParsers.getClass().getName()
this.iPrinters[].getClass().getName() == this.iParsers[].getClass().getName() (elementwise)
this.iPrintedLengthEstimate <= this.iParsedLengthEstimate
this.iPrintedLengthEstimate > size(this.iPrinters[])
this.iPrintedLengthEstimate != size(this.iParsers[])
this.iPrintedLengthEstimate != size(this.iParsers[])-1
this.iParsedLengthEstimate > size(this.iPrinters[])
this.iParsedLengthEstimate > size(this.iParsers[])
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.Composite(java.util.List):::ENTER
elementPairs != null
elementPairs.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.Composite(java.util.List):::EXIT
elementPairs[] == orig(elementPairs[])
this.iParsers != null
this.iPrinters.getClass().getName() != orig(elementPairs.getClass().getName())
this.iParsers.getClass().getName() != orig(elementPairs.getClass().getName())
this.iPrintedLengthEstimate != orig(size(elementPairs[]))
size(this.iPrinters[]) != orig(size(elementPairs[]))
size(this.iPrinters[])-1 != size(elementPairs[])-1
size(this.iPrinters[])-1 != orig(size(elementPairs[]))
size(this.iParsers[]) != orig(size(elementPairs[]))
size(this.iParsers[])-1 != size(elementPairs[])-1
size(this.iParsers[])-1 != orig(size(elementPairs[]))
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList(java.util.List, java.lang.Object[]):::ENTER
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this.iPrinters == null
this.iParsers == null
this.iPrintedLengthEstimate == 0
list != null
list[] elements != null
list.getClass().getName() == java.util.ArrayList.class
array != null
array[] elements != null
this.iPrintedLengthEstimate <= size(list[])
this.iPrintedLengthEstimate < size(array[])-1
list.getClass().getName() != array.getClass().getName()
size(list[]) != size(array[])
size(list[])-1 != size(array[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList(java.util.List, java.lang.Object[]):::EXIT
this.iPrinters == orig(this.iPrinters)
this.iParsers == orig(this.iParsers)
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this.iPrintedLengthEstimate == orig(this.iPrintedLengthEstimate)
this.iPrintedLengthEstimate == orig(this.iParsedLengthEstimate)
array[] == orig(array[])
this.iPrinters == null
this.iParsers == null
this.iPrintedLengthEstimate == 0
list[] elements != null
array[] elements != null
this.iPrintedLengthEstimate < size(list[])-1
this.iPrintedLengthEstimate < size(array[])-1
this.iPrintedLengthEstimate <= orig(size(list[]))
array[this.iPrintedLengthEstimate] in list[]
size(list[])-1 >= size(array[])-1
size(list[])-1 > orig(size(list[]))
size(array[])-1 != orig(size(list[]))-1
size(list[])-1 - size(array[])-1 - orig(size(list[])) == 0
size(list[])-1 - size(array[])-1 - orig(size(list[]))-1 - 1 == 0
size(list[])-1 - orig(size(list[])) - orig(size(array[])) + 1 == 0
size(list[])-1 - orig(size(list[]))-1 - orig(size(array[])) == 0
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose(java.util.List, java.util.List, java.util.List):::ENTER
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this.iPrintedLengthEstimate == size(printerList[])
this.iPrintedLengthEstimate == size(parserList[])
elementPairs.getClass().getName() == printerList.getClass().getName()
elementPairs.getClass().getName() == parserList.getClass().getName()
printerList[] == parserList[]
this.iPrinters == null
this.iParsers == null
elementPairs != null
elementPairs.getClass().getName() == java.util.ArrayList.class
printerList != null
printerList[] == []
printerList[].getClass().getName() == []
parserList != null
this.iPrintedLengthEstimate < size(elementPairs[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose(java.util.List, java.util.List, java.util.List):::EXIT
this.iPrinters == orig(this.iPrinters)
this.iParsers == orig(this.iParsers)
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this.iPrintedLengthEstimate == orig(this.iPrintedLengthEstimate)
this.iPrintedLengthEstimate == orig(this.iParsedLengthEstimate)
this.iPrintedLengthEstimate == orig(size(printerList[]))
this.iPrintedLengthEstimate == orig(size(parserList[]))
elementPairs[] == orig(elementPairs[])
this.iPrinters == null
this.iParsers == null
parserList[] elements != null
this.iPrintedLengthEstimate < size(elementPairs[])-1
this.iPrintedLengthEstimate < size(printerList[])-1
this.iPrintedLengthEstimate < size(parserList[])-1
size(elementPairs[])-1 != size(printerList[])-1
size(elementPairs[])-1 != size(parserList[])-1
size(printerList[])-1 <= size(parserList[])-1
size(parserList[])-1 != orig(size(elementPairs[]))
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimateParsedLength():::ENTER
this.iPrinters == null
this.iParsers[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser], [org.joda.time.format.DateTimeFormatterBuilder.MatchingParser, org.joda.time.format.DateTimeFormatterBuilder.Fraction] }
this.iPrintedLengthEstimate == 0
this.iParsedLengthEstimate one of { 10, 13, 16 }
size(this.iParsers[]) one of { 2, 3 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimateParsedLength():::EXIT
this.iPrinters == orig(this.iPrinters)
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iPrintedLengthEstimate == orig(this.iPrintedLengthEstimate)
this.iParsedLengthEstimate == return
return == orig(this.iParsedLengthEstimate)
this.iPrinters == null
this.iParsers[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser], [org.joda.time.format.DateTimeFormatterBuilder.MatchingParser, org.joda.time.format.DateTimeFormatterBuilder.Fraction] }
this.iPrintedLengthEstimate == 0
return one of { 10, 13, 16 }
size(this.iParsers[]) one of { 2, 3 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength():::ENTER
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this.iPrinters != null
this.iPrinters[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber], [org.joda.time.format.DateTimeFormatterBuilder.TextField, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset] }
this.iParsers != null
this.iPrintedLengthEstimate one of { 15, 38 }
size(this.iPrinters[]) one of { 5, 14 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength():::EXIT
this.iPrinters == orig(this.iPrinters)
this.iPrinters.getClass().getName() == orig(this.iPrinters.getClass().getName())
this.iPrinters[] == orig(this.iPrinters[])
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iPrintedLengthEstimate == return
this.iParsedLengthEstimate == return
return == orig(this.iPrintedLengthEstimate)
return == orig(this.iParsedLengthEstimate)
size(this.iPrinters[]) == orig(size(this.iParsers[]))
this.iPrinters != null
this.iPrinters[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber], [org.joda.time.format.DateTimeFormatterBuilder.TextField, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset] }
this.iParsers != null
return one of { 15, 38 }
size(this.iPrinters[]) one of { 5, 14 }
return > size(this.iPrinters[])
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser():::ENTER
this.iParsers != null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser():::EXIT
this.iPrinters == orig(this.iPrinters)
this.iPrinters.getClass().getName() == orig(this.iPrinters.getClass().getName())
this.iPrinters[] == orig(this.iPrinters[])
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iPrintedLengthEstimate == orig(this.iPrintedLengthEstimate)
this.iParsedLengthEstimate == orig(this.iParsedLengthEstimate)
this.iParsers != null
return == true
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser():::EXIT;condition="return == true"
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter():::ENTER
this.iParsers != null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter():::EXIT
this.iPrinters == orig(this.iPrinters)
this.iPrinters.getClass().getName() == orig(this.iPrinters.getClass().getName())
this.iPrinters[] == orig(this.iPrinters[])
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iPrintedLengthEstimate == orig(this.iPrintedLengthEstimate)
this.iParsedLengthEstimate == orig(this.iParsedLengthEstimate)
(this.iPrinters != null)  <==>  (return == true)
(this.iPrinters != null)  <==>  (this.iPrintedLengthEstimate > size(this.iParsers[]))
(this.iPrinters != null)  ==>  (size(this.iPrinters[]) == size(this.iParsers[]))
(this.iPrinters != null)  ==>  (this.iParsedLengthEstimate > size(this.iPrinters[]))
(this.iPrinters != null)  ==>  (this.iPrintedLengthEstimate > size(this.iPrinters[]))
(this.iPrinters != null)  ==>  (this.iPrinters.getClass().getName() != this.iParsers.getClass().getName())
(this.iPrinters != null)  ==>  (this.iPrinters.getClass().getName() == org.joda.time.format.DateTimePrinter[].class)
(this.iPrinters != null)  ==>  (this.iPrinters[] elements != null)
(this.iPrinters == null)  <==>  (return == false)
(this.iPrinters == null)  <==>  (this.iPrintedLengthEstimate == 0)
(this.iPrinters == null)  ==>  (size(this.iParsers[]) one of { 2, 8 })
(this.iPrinters == null)  ==>  (this.iParsedLengthEstimate one of { 18, 34 })
(this.iPrinters == null)  ==>  (this.iParsers[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser], [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser] })
this.iParsers != null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter():::EXIT;condition="return == true"
size(this.iPrinters[]) == orig(size(this.iParsers[]))
this.iPrinters != null
return == true
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter():::EXIT;condition="not(return == true)"
this.iPrinters == null
this.iParsers[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser], [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser] }
this.iPrintedLengthEstimate == 0
this.iParsedLengthEstimate one of { 18, 34 }
return == false
size(this.iParsers[]) one of { 2, 8 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::ENTER
this.iParsers != null
bucket != null
text != null
position >= 0
this.iParsedLengthEstimate != position
position < size(this.iPrinters[])-1
position != size(this.iParsers[])
position != size(this.iParsers[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT
this.iPrinters == orig(this.iPrinters)
this.iPrinters.getClass().getName() == orig(this.iPrinters.getClass().getName())
this.iPrinters[] == orig(this.iPrinters[])
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iPrintedLengthEstimate == orig(this.iPrintedLengthEstimate)
this.iParsedLengthEstimate == orig(this.iParsedLengthEstimate)
text.toString == orig(text.toString)
this.iParsers != null
this.iPrintedLengthEstimate != return
this.iParsedLengthEstimate != return
this.iParsedLengthEstimate != orig(position)
return != orig(position)
return != size(this.iPrinters[])
return != size(this.iPrinters[])-1
return != size(this.iParsers[])
return != size(this.iParsers[])-1
orig(position) < size(this.iPrinters[])-1
orig(position) != size(this.iParsers[])
orig(position) != size(this.iParsers[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::ENTER
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this has only one value
this.iPrinters has only one value
this.iPrinters[] contains no nulls and has only one value, of length 14
this.iPrinters[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.TextField, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset]
this.iParsers has only one value
this.iParsers[] contains no nulls and has only one value, of length 14
this.iPrintedLengthEstimate == 38
out.getClass().getName() == java.io.CharArrayWriter.class
instant one of { 1086776430040L, 1086780030040L }
chrono has only one value
chrono.getClass().getName() == org.joda.time.chrono.ISOChronology.class
displayOffset one of { 0, 3600000 }
locale == null
size(this.iPrinters[]) == 14
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT
this.iPrinters == orig(this.iPrinters)
this.iPrinters.getClass().getName() == orig(this.iPrinters.getClass().getName())
this.iPrinters[] == orig(this.iPrinters[])
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this.iPrintedLengthEstimate == orig(this.iPrintedLengthEstimate)
this.iPrintedLengthEstimate == orig(this.iParsedLengthEstimate)
size(this.iPrinters[]) == orig(size(this.iParsers[]))
this.iPrinters has only one value
this.iPrinters[] contains no nulls and has only one value, of length 14
this.iPrinters[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.TextField, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset]
this.iParsers has only one value
this.iParsers[] contains no nulls and has only one value, of length 14
this.iPrintedLengthEstimate == 38
size(this.iPrinters[]) == 14
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale):::ENTER
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this has only one value
this.iPrinters has only one value
this.iPrinters[] contains no nulls and has only one value, of length 5
this.iPrinters[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iParsers has only one value
this.iParsers[] contains no nulls and has only one value, of length 5
this.iPrintedLengthEstimate == 15
out has only one value
out.getClass().getName() == java.io.CharArrayWriter.class
partial has only one value
partial.getClass().getName() == org.joda.time.YearMonthDay.class
locale == null
size(this.iPrinters[]) == 5
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale):::EXIT
this.iPrinters == orig(this.iPrinters)
this.iPrinters.getClass().getName() == orig(this.iPrinters.getClass().getName())
this.iPrinters[] == orig(this.iPrinters[])
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this.iPrintedLengthEstimate == orig(this.iPrintedLengthEstimate)
this.iPrintedLengthEstimate == orig(this.iParsedLengthEstimate)
size(this.iPrinters[]) == orig(size(this.iParsers[]))
this.iPrinters has only one value
this.iPrinters[] contains no nulls and has only one value, of length 5
this.iPrinters[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iParsers has only one value
this.iParsers[] contains no nulls and has only one value, of length 5
this.iPrintedLengthEstimate == 15
size(this.iPrinters[]) == 5
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::ENTER
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this.iPrinters != null
this.iPrinters[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.TextField, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset]
this.iParsers != null
this.iPrintedLengthEstimate == 38
buf != null
chrono != null
displayZone != null
size(this.iPrinters[]) == 14
this.iPrinters.getClass().getName() != chrono.getClass().getName()
this.iPrinters.getClass().getName() != displayZone.getClass().getName()
this.iParsers.getClass().getName() != chrono.getClass().getName()
this.iParsers.getClass().getName() != displayZone.getClass().getName()
this.iPrintedLengthEstimate < instant
this.iPrintedLengthEstimate != displayOffset
instant >= displayOffset
instant > size(this.iPrinters[])
chrono.getClass().getName() != displayZone.getClass().getName()
displayOffset != size(this.iPrinters[])
displayOffset != size(this.iPrinters[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT
this.iPrinters == orig(this.iPrinters)
this.iPrinters.getClass().getName() == orig(this.iPrinters.getClass().getName())
this.iPrinters[] == orig(this.iPrinters[])
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this.iPrintedLengthEstimate == orig(this.iPrintedLengthEstimate)
this.iPrintedLengthEstimate == orig(this.iParsedLengthEstimate)
size(this.iPrinters[]) == orig(size(this.iParsers[]))
this.iPrinters != null
this.iPrinters[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.TextField, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset]
this.iParsers != null
this.iPrintedLengthEstimate == 38
size(this.iPrinters[]) == 14
this.iPrinters.getClass().getName() != orig(chrono.getClass().getName())
this.iPrinters.getClass().getName() != orig(displayZone.getClass().getName())
this.iParsers.getClass().getName() != orig(chrono.getClass().getName())
this.iParsers.getClass().getName() != orig(displayZone.getClass().getName())
this.iPrintedLengthEstimate < orig(instant)
this.iPrintedLengthEstimate != orig(displayOffset)
orig(instant) > size(this.iPrinters[])
orig(displayOffset) != size(this.iPrinters[])
orig(displayOffset) != size(this.iPrinters[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale):::ENTER
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this has only one value
this.iPrinters has only one value
this.iPrinters[] contains no nulls and has only one value, of length 5
this.iPrinters[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iParsers has only one value
this.iParsers[] contains no nulls and has only one value, of length 5
this.iPrintedLengthEstimate == 15
locale == null
size(this.iPrinters[]) == 5
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale):::EXIT
this.iPrinters == orig(this.iPrinters)
this.iPrinters.getClass().getName() == orig(this.iPrinters.getClass().getName())
this.iPrinters[] == orig(this.iPrinters[])
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iPrintedLengthEstimate == this.iParsedLengthEstimate
this.iPrintedLengthEstimate == orig(this.iPrintedLengthEstimate)
this.iPrintedLengthEstimate == orig(this.iParsedLengthEstimate)
size(this.iPrinters[]) == orig(size(this.iParsers[]))
this.iPrinters has only one value
this.iPrinters[] contains no nulls and has only one value, of length 5
this.iPrinters[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iParsers has only one value
this.iParsers[] contains no nulls and has only one value, of length 5
this.iPrintedLengthEstimate == 15
size(this.iPrinters[]) == 5
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Fraction:::OBJECT
this.iFieldType != null
this.iFieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
this.iMinDigits == 1
this.iMaxDigits == 9
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Fraction.Fraction(org.joda.time.DateTimeFieldType, int, int):::ENTER
fieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
minDigits == 1
maxDigits == 9
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Fraction.Fraction(org.joda.time.DateTimeFieldType, int, int):::EXIT
this.iFieldType == orig(fieldType)
this.iFieldType.getClass().getName() == orig(fieldType.getClass().getName())
this.iMinDigits == orig(minDigits)
this.iMaxDigits == orig(maxDigits)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimateParsedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimateParsedLength():::EXIT
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMinDigits == orig(this.iMinDigits)
this.iMaxDigits == return
return == orig(this.iMaxDigits)
return == 9
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimatePrintedLength():::ENTER
this has only one value
this.iFieldType has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimatePrintedLength():::EXIT
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMinDigits == orig(this.iMinDigits)
this.iMaxDigits == return
return == orig(this.iMaxDigits)
this.iFieldType has only one value
return == 9
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::ENTER
this has only one value
this.iFieldType has only one value
text.toString one of { "10.5123456", "10.512999" }
position == 3
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT2103
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMinDigits == orig(this.iMinDigits)
this.iMaxDigits == orig(this.iMaxDigits)
text.toString == orig(text.toString)
this.iFieldType has only one value
text.toString one of { "10.5123456", "10.512999" }
return one of { 9, 10 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:::OBJECT
this.iParsers != null
this.iParsers.getClass().getName() == org.joda.time.format.DateTimeParser[].class
size(this.iParsers[]) one of { 2, 3 }
this.iParsedLengthEstimate != size(this.iParsers[])
this.iParsedLengthEstimate >= size(this.iParsers[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.MatchingParser(org.joda.time.format.DateTimeParser[]):::ENTER
parsers.getClass().getName() == org.joda.time.format.DateTimeParser[].class
size(parsers[]) one of { 2, 3 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.MatchingParser(org.joda.time.format.DateTimeParser[]):::EXIT
this.iParsers == orig(parsers)
this.iParsers.getClass().getName() == orig(parsers.getClass().getName())
this.iParsers[] == parsers[]
parsers[] == orig(parsers[])
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.estimateParsedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.estimateParsedLength():::EXIT
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iParsedLengthEstimate == return
return == orig(this.iParsedLengthEstimate)
return >= 1
return != size(this.iParsers[])
return >= size(this.iParsers[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::ENTER
bucket != null
text has only one value
text != null
text.toString == "2004-06-09T10:20:30"
position one of { 13, 16, 19 }
this.iParsedLengthEstimate != position
position > size(this.iParsers[])
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT2830
return == orig(position)
this.iParsers has only one value
this.iParsers[] has only one value, of length 2
this.iParsers[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.Composite, null]
this.iParsedLengthEstimate == 10
return == 19
orig(this) has only one value
size(this.iParsers[]) == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT2843
this.iParsers[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.Composite, null]
this.iParsedLengthEstimate one of { 13, 16 }
return == 19
orig(position) one of { 13, 16 }
size(this.iParsers[]) == 3
this.iParsedLengthEstimate < return
this.iParsedLengthEstimate > size(this.iParsers[])
return > orig(position)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT2867
this.iParsedLengthEstimate == size(this.iParsers[])-1
this.iParsedLengthEstimate == orig(size(this.iParsers[]))-1
this.iParsers has only one value
this.iParsers[] contains no nulls and has only one value, of length 2
this.iParsers[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral]
this.iParsers[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.class
return == -20
orig(this) has only one value
orig(position) == 19
size(this.iParsers[]) == 2
this.iParsers[this.iParsedLengthEstimate] has only one value
this.iParsers[this.iParsedLengthEstimate-1] has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT
this.iParsers == orig(this.iParsers)
this.iParsers.getClass().getName() == orig(this.iParsers.getClass().getName())
this.iParsers[] == orig(this.iParsers[])
this.iParsedLengthEstimate == orig(this.iParsedLengthEstimate)
text.toString == orig(text.toString)
text.toString == "2004-06-09T10:20:30"
return one of { -20, 19 }
this.iParsedLengthEstimate != return
this.iParsedLengthEstimate != orig(position)
return != size(this.iParsers[])
return != size(this.iParsers[])-1
orig(position) > size(this.iParsers[])
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:::OBJECT
this.iFieldType != null
this.iFieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
this.iMaxParsedDigits one of { 2, 5, 9 }
this.getClass().getName() != this.iFieldType.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.NumberFormatter(org.joda.time.DateTimeFieldType, int, boolean):::ENTER
fieldType != null
fieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
maxParsedDigits one of { 2, 5, 9 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.NumberFormatter(org.joda.time.DateTimeFieldType, int, boolean):::EXIT
this.iFieldType == orig(fieldType)
this.iFieldType.getClass().getName() == orig(fieldType.getClass().getName())
this.iMaxParsedDigits == orig(maxParsedDigits)
this.iSigned == orig(signed)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength():::EXIT
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMaxParsedDigits == return
this.iSigned == orig(this.iSigned)
return == orig(this.iMaxParsedDigits)
return one of { 2, 5, 9 }
this.iFieldType.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::ENTER
bucket != null
text != null
position >= 0
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT1363
this.iMaxParsedDigits one of { 2, 9 }
text.toString one of { "ABC", "XX2004-06-09T" }
return one of { -14, -1 }
orig(this.getClass().getName()) == org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.class
orig(position) one of { 0, 13 }
this.iMaxParsedDigits > return
this.iMaxParsedDigits != orig(position)
return < orig(position)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT1391
return > orig(position)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMaxParsedDigits == orig(this.iMaxParsedDigits)
this.iSigned == orig(this.iSigned)
text.toString == orig(text.toString)
return != 0
this.iFieldType.getClass().getName() != orig(this.getClass().getName())
return != orig(position)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:::OBJECT
this.iMinPrintedDigits one of { 2, 4 }
this.iFieldType != null
this.iFieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
this.iMaxParsedDigits one of { 2, 5, 9 }
this.iMinPrintedDigits <= this.iMaxParsedDigits
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.PaddedNumber(org.joda.time.DateTimeFieldType, int, boolean, int):::ENTER
fieldType != null
fieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
maxParsedDigits one of { 2, 5, 9 }
minPrintedDigits one of { 2, 4 }
maxParsedDigits >= minPrintedDigits
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.PaddedNumber(org.joda.time.DateTimeFieldType, int, boolean, int):::EXIT
this.iMinPrintedDigits == orig(minPrintedDigits)
this.iFieldType == orig(fieldType)
this.iFieldType.getClass().getName() == orig(fieldType.getClass().getName())
this.iMaxParsedDigits == orig(maxParsedDigits)
this.iSigned == orig(signed)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength():::EXIT
this.iMinPrintedDigits == orig(this.iMinPrintedDigits)
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMaxParsedDigits == return
this.iSigned == orig(this.iSigned)
return == orig(this.iMaxParsedDigits)
return one of { 2, 5, 9 }
this.iMinPrintedDigits <= return
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::ENTER
this.iMaxParsedDigits one of { 2, 9 }
out != null
out.getClass().getName() == java.io.CharArrayWriter.class
instant one of { 1086776430040L, 1086780030040L }
chrono has only one value
chrono != null
chrono.getClass().getName() == org.joda.time.chrono.ISOChronology.class
displayOffset one of { 0, 3600000 }
displayZone != null
locale has only one value
locale != null
this.iMinPrintedDigits < instant
this.iMinPrintedDigits != displayOffset
this.iFieldType.getClass().getName() != out.getClass().getName()
this.iFieldType.getClass().getName() != chrono.getClass().getName()
this.iFieldType.getClass().getName() != displayZone.getClass().getName()
this.iMaxParsedDigits < instant
this.iMaxParsedDigits != displayOffset
out.getClass().getName() != chrono.getClass().getName()
out.getClass().getName() != displayZone.getClass().getName()
instant > displayOffset
chrono.getClass().getName() != displayZone.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT
this.iMinPrintedDigits == orig(this.iMinPrintedDigits)
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMaxParsedDigits == orig(this.iMaxParsedDigits)
this.iSigned == orig(this.iSigned)
this.iMaxParsedDigits one of { 2, 9 }
this.iMinPrintedDigits < orig(instant)
this.iMinPrintedDigits != orig(displayOffset)
this.iFieldType.getClass().getName() != orig(out.getClass().getName())
this.iFieldType.getClass().getName() != orig(chrono.getClass().getName())
this.iFieldType.getClass().getName() != orig(displayZone.getClass().getName())
this.iMaxParsedDigits < orig(instant)
this.iMaxParsedDigits != orig(displayOffset)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale):::ENTER
this.iMaxParsedDigits one of { 2, 9 }
out has only one value
out.getClass().getName() == java.io.CharArrayWriter.class
partial has only one value
partial.getClass().getName() == org.joda.time.YearMonthDay.class
locale has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale):::EXIT
this.iMinPrintedDigits == orig(this.iMinPrintedDigits)
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMaxParsedDigits == orig(this.iMaxParsedDigits)
this.iSigned == orig(this.iSigned)
this.iMaxParsedDigits one of { 2, 9 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::ENTER
this.iMaxParsedDigits one of { 2, 9 }
buf != null
chrono != null
displayZone != null
locale != null
instant % this.iMinPrintedDigits == 0
this.iMinPrintedDigits < instant
displayOffset % this.iMinPrintedDigits == 0
this.iMinPrintedDigits != displayOffset
this.iFieldType.getClass().getName() != chrono.getClass().getName()
this.iFieldType.getClass().getName() != displayZone.getClass().getName()
this.iMaxParsedDigits < instant
displayOffset % this.iMaxParsedDigits == 0
this.iMaxParsedDigits != displayOffset
instant >= displayOffset
chrono.getClass().getName() != displayZone.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT
this.iMinPrintedDigits == orig(this.iMinPrintedDigits)
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMaxParsedDigits == orig(this.iMaxParsedDigits)
this.iSigned == orig(this.iSigned)
this.iMaxParsedDigits one of { 2, 9 }
orig(instant) % this.iMinPrintedDigits == 0
this.iMinPrintedDigits < orig(instant)
orig(displayOffset) % this.iMinPrintedDigits == 0
this.iMinPrintedDigits != orig(displayOffset)
this.iFieldType.getClass().getName() != orig(chrono.getClass().getName())
this.iFieldType.getClass().getName() != orig(displayZone.getClass().getName())
this.iMaxParsedDigits < orig(instant)
orig(displayOffset) % this.iMaxParsedDigits == 0
this.iMaxParsedDigits != orig(displayOffset)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale):::ENTER
this.iMaxParsedDigits one of { 2, 9 }
locale has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale):::EXIT
this.iMinPrintedDigits == orig(this.iMinPrintedDigits)
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMaxParsedDigits == orig(this.iMaxParsedDigits)
this.iSigned == orig(this.iSigned)
this.iMaxParsedDigits one of { 2, 9 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField:::CLASS
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache has only one value
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache != null
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() == java.util.HashMap.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField:::OBJECT
this.iFieldType != null
this.iFieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() != this.iFieldType.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.TextField(org.joda.time.DateTimeFieldType, boolean):::ENTER
fieldType != null
fieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.TextField(org.joda.time.DateTimeFieldType, boolean):::EXIT
this.iFieldType == orig(fieldType)
this.iFieldType.getClass().getName() == orig(fieldType.getClass().getName())
this.iShort == orig(isShort)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimateParsedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimateParsedLength():::EXIT
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache)
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName())
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iShort == orig(this.iShort)
return one of { 6, 20 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength():::EXIT
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache)
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName())
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iShort == orig(this.iShort)
return one of { 6, 20 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::ENTER
position one of { 0, 8 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT1879
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache)
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName())
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iShort == orig(this.iShort)
text.toString == orig(text.toString)
return one of { 3, 10, 11 }
return > orig(position)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.print(long, org.joda.time.Chronology, java.util.Locale):::ENTER
this.iFieldType has only one value
this.iShort == true
chrono != null
locale != null
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() != chrono.getClass().getName()
this.iFieldType.getClass().getName() != chrono.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.print(long, org.joda.time.Chronology, java.util.Locale):::EXIT1802
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.print(long, org.joda.time.Chronology, java.util.Locale):::EXIT
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache)
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName())
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iShort == orig(this.iShort)
this.iFieldType has only one value
this.iShort == true
return != null
return.toString one of { "Thu", "Wed", "mer." }
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() != orig(chrono.getClass().getName())
this.iFieldType.getClass().getName() != orig(chrono.getClass().getName())
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::ENTER
this has only one value
this.iFieldType has only one value
this.iShort == true
out.getClass().getName() == java.io.CharArrayWriter.class
instant one of { 1086776430040L, 1086780030040L }
chrono has only one value
chrono.getClass().getName() == org.joda.time.chrono.ISOChronology.class
displayOffset one of { 0, 3600000 }
locale has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache)
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName())
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iShort == orig(this.iShort)
this.iFieldType has only one value
this.iShort == true
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::ENTER
this.iFieldType has only one value
this.iShort == true
buf != null
chrono != null
displayZone != null
locale != null
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() != chrono.getClass().getName()
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() != displayZone.getClass().getName()
this.iFieldType.getClass().getName() != chrono.getClass().getName()
this.iFieldType.getClass().getName() != displayZone.getClass().getName()
instant >= displayOffset
chrono.getClass().getName() != displayZone.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TextField.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache)
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() == orig(org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName())
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iShort == orig(this.iShort)
this.iFieldType has only one value
this.iShort == true
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() != orig(chrono.getClass().getName())
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache.getClass().getName() != orig(displayZone.getClass().getName())
this.iFieldType.getClass().getName() != orig(chrono.getClass().getName())
this.iFieldType.getClass().getName() != orig(displayZone.getClass().getName())
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:::OBJECT
this.iZeroOffsetPrintText == this.iZeroOffsetParseText
this.iZeroOffsetPrintText.toString == this.iZeroOffsetParseText.toString
this has only one value
this.iZeroOffsetPrintText has only one value
this.iZeroOffsetPrintText != null
this.iZeroOffsetPrintText.toString == "Z"
this.iShowSeparators == true
this.iMinFields == 2
this.iMaxFields == 4
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.TimeZoneOffset(java.lang.String, java.lang.String, boolean, int, int):::ENTER
zeroOffsetPrintText == zeroOffsetParseText
zeroOffsetPrintText.toString == zeroOffsetParseText.toString
zeroOffsetPrintText has only one value
zeroOffsetPrintText.toString == "Z"
showSeparators == true
minFields == 2
maxFields == 4
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.TimeZoneOffset(java.lang.String, java.lang.String, boolean, int, int):::EXIT
this.iZeroOffsetPrintText == orig(zeroOffsetPrintText)
this.iZeroOffsetPrintText == orig(zeroOffsetParseText)
this.iZeroOffsetPrintText.toString == zeroOffsetPrintText.toString
this.iZeroOffsetParseText.toString == zeroOffsetPrintText.toString
this.iShowSeparators == orig(showSeparators)
this.iMinFields == orig(minFields)
this.iMaxFields == orig(maxFields)
zeroOffsetPrintText.toString == zeroOffsetParseText.toString
zeroOffsetPrintText.toString == orig(zeroOffsetPrintText.toString)
zeroOffsetPrintText.toString == orig(zeroOffsetParseText.toString)
zeroOffsetPrintText.toString == "Z"
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount(java.lang.String, int, int):::ENTER
this.iMinFields == amount
text != null
text.toString one of { "2004-06-09T06:20:30-04:00", "2004-06-09T10:20:30+18:00", "2004-06-09T10:20:30-18:00" }
position one of { 20, 23 }
this.iZeroOffsetPrintText.toString > text.toString
this.iMinFields < position
this.iMaxFields < position
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount(java.lang.String, int, int):::EXIT
this.iZeroOffsetPrintText == orig(this.iZeroOffsetPrintText)
this.iZeroOffsetPrintText == orig(this.iZeroOffsetParseText)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetPrintText.toString)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetParseText.toString)
this.iShowSeparators == orig(this.iShowSeparators)
this.iMinFields == return
this.iMaxFields == orig(this.iMaxFields)
text.toString == orig(text.toString)
return == orig(this.iMinFields)
return == orig(amount)
text.toString one of { "2004-06-09T06:20:30-04:00", "2004-06-09T10:20:30+18:00", "2004-06-09T10:20:30-18:00" }
return == 2
this.iZeroOffsetPrintText.toString > text.toString
this.iMaxFields < orig(position)
return < orig(position)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimateParsedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimateParsedLength():::EXIT
this.iZeroOffsetPrintText == orig(this.iZeroOffsetPrintText)
this.iZeroOffsetPrintText == orig(this.iZeroOffsetParseText)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetPrintText.toString)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetParseText.toString)
this.iShowSeparators == orig(this.iShowSeparators)
this.iMinFields == orig(this.iMinFields)
this.iMaxFields == orig(this.iMaxFields)
return == 7
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength():::EXIT
this.iZeroOffsetPrintText == orig(this.iZeroOffsetPrintText)
this.iZeroOffsetPrintText == orig(this.iZeroOffsetParseText)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetPrintText.toString)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetParseText.toString)
this.iShowSeparators == orig(this.iShowSeparators)
this.iMinFields == orig(this.iMinFields)
this.iMaxFields == orig(this.iMaxFields)
return == 7
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::ENTER
bucket != null
text != null
position one of { 19, 23 }
this.iZeroOffsetPrintText.toString > text.toString
this.iMinFields < position
this.iMaxFields < position
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT2295
return one of { 20, 24 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT2445
text.toString one of { "2004-06-09T06:20:30-04:00", "2004-06-09T10:20:30+18:00", "2004-06-09T10:20:30-18:00" }
return == 25
orig(position) == 19
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT
this.iZeroOffsetPrintText == orig(this.iZeroOffsetPrintText)
this.iZeroOffsetPrintText == orig(this.iZeroOffsetParseText)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetPrintText.toString)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetParseText.toString)
this.iShowSeparators == orig(this.iShowSeparators)
this.iMinFields == orig(this.iMinFields)
this.iMaxFields == orig(this.iMaxFields)
text.toString == orig(text.toString)
return one of { 20, 24, 25 }
this.iZeroOffsetPrintText.toString > text.toString
this.iMinFields < return
this.iMinFields < orig(position)
this.iMaxFields < return
this.iMaxFields < orig(position)
return > orig(position)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::ENTER
out.getClass().getName() == java.io.CharArrayWriter.class
instant one of { 1086776430040L, 1086780030040L }
chrono has only one value
chrono.getClass().getName() == org.joda.time.chrono.ISOChronology.class
displayOffset one of { 0, 3600000 }
locale has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT2214
orig(out) has only one value
orig(instant) == 1086776430040L
orig(displayOffset) == 0
orig(displayZone) has only one value
orig(displayZone.getClass().getName()) == org.joda.time.tz.FixedDateTimeZone.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT2243
orig(out) has only one value
orig(instant) == 1086780030040L
orig(displayOffset) == 3600000
orig(displayZone) has only one value
orig(displayZone.getClass().getName()) == org.joda.time.tz.CachedDateTimeZone.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT
this.iZeroOffsetPrintText == orig(this.iZeroOffsetPrintText)
this.iZeroOffsetPrintText == orig(this.iZeroOffsetParseText)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetPrintText.toString)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetParseText.toString)
this.iShowSeparators == orig(this.iShowSeparators)
this.iMinFields == orig(this.iMinFields)
this.iMaxFields == orig(this.iMaxFields)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::ENTER
buf != null
chrono != null
displayZone != null
locale != null
instant % this.iMinFields == 0
this.iMinFields < instant
this.iMinFields != displayOffset
instant % this.iMaxFields == 0
this.iMaxFields < instant
this.iMaxFields != displayOffset
instant >= displayOffset
chrono.getClass().getName() != displayZone.getClass().getName()
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT2155
orig(instant) == 1086776430040L
orig(chrono) has only one value
orig(chrono.getClass().getName()) == org.joda.time.chrono.ISOChronology.class
orig(displayOffset) == 0
orig(displayZone) has only one value
orig(displayZone.getClass().getName()) == org.joda.time.tz.FixedDateTimeZone.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT2184
orig(displayOffset) one of { -14400000, 3600000, 7200000 }
orig(displayZone.getClass().getName()) == org.joda.time.tz.CachedDateTimeZone.class
orig(locale) has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale):::EXIT
this.iZeroOffsetPrintText == orig(this.iZeroOffsetPrintText)
this.iZeroOffsetPrintText == orig(this.iZeroOffsetParseText)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetPrintText.toString)
this.iZeroOffsetPrintText.toString == orig(this.iZeroOffsetParseText.toString)
this.iShowSeparators == orig(this.iShowSeparators)
this.iMinFields == orig(this.iMinFields)
this.iMaxFields == orig(this.iMaxFields)
orig(instant) % this.iMinFields == 0
this.iMinFields < orig(instant)
this.iMinFields != orig(displayOffset)
orig(instant) % this.iMaxFields == 0
this.iMaxFields < orig(instant)
this.iMaxFields != orig(displayOffset)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear:::OBJECT
this has only one value
this.iType has only one value
this.iType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
this.iPivot == 1972
this.iLenientParse == true
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.TwoDigitYear(org.joda.time.DateTimeFieldType, int, boolean):::ENTER
type has only one value
type.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
pivot == 1972
lenientParse == true
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.TwoDigitYear(org.joda.time.DateTimeFieldType, int, boolean):::EXIT
this.iType == orig(type)
this.iType.getClass().getName() == orig(type.getClass().getName())
this.iPivot == orig(pivot)
this.iLenientParse == orig(lenientParse)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimateParsedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimateParsedLength():::EXIT
this.iType == orig(this.iType)
this.iType.getClass().getName() == orig(this.iType.getClass().getName())
this.iPivot == orig(this.iPivot)
this.iLenientParse == orig(this.iLenientParse)
return == 4
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimatePrintedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.estimatePrintedLength():::EXIT
this.iType == orig(this.iType)
this.iType.getClass().getName() == orig(this.iType.getClass().getName())
this.iPivot == orig(this.iPivot)
this.iLenientParse == orig(this.iLenientParse)
return == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::ENTER
bucket has only one value
text has only one value
text.toString == "50 8 4"
position == 0
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT1667
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int):::EXIT
this.iType == orig(this.iType)
this.iType.getClass().getName() == orig(this.iType.getClass().getName())
this.iPivot == orig(this.iPivot)
this.iLenientParse == orig(this.iLenientParse)
text.toString == orig(text.toString)
text.toString == "50 8 4"
return == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber:::OBJECT
this.iFieldType != null
this.iFieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
this.iMaxParsedDigits == 2
this.iSigned == false
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.UnpaddedNumber(org.joda.time.DateTimeFieldType, int, boolean):::ENTER
fieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
maxParsedDigits == 2
signed == false
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.UnpaddedNumber(org.joda.time.DateTimeFieldType, int, boolean):::EXIT
this.iFieldType == orig(fieldType)
this.iFieldType.getClass().getName() == orig(fieldType.getClass().getName())
this.iMaxParsedDigits == orig(maxParsedDigits)
this.iSigned == orig(signed)
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.estimatePrintedLength():::ENTER
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.estimatePrintedLength():::EXIT
this.iFieldType == orig(this.iFieldType)
this.iFieldType.getClass().getName() == orig(this.iFieldType.getClass().getName())
this.iMaxParsedDigits == return
this.iSigned == orig(this.iSigned)
return == orig(this.iMaxParsedDigits)
return == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder:::OBJECT
this.iElementPairs != null
size(this.iElementPairs[])-1 != 0
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.DateTimeFormatterBuilder():::EXIT
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimeFormatter):::ENTER
this.iFormatter == formatter.iLocale
this.iFormatter == formatter.iChrono
this.iFormatter == formatter.iZone
formatter.iPrinter.getClass().getName() == formatter.iParser.getClass().getName()
this.iElementPairs[] elements != null
this.iFormatter == null
formatter != null
formatter.iParser != null
formatter.iLocale == null
formatter.iOffsetParsed == false
formatter.iChrono == null
formatter.iZone == null
formatter.iPivotYear == null
formatter.iDefaultYear == 2000
size(this.iElementPairs[]) one of { 0, 2, 4 }
formatter.iDefaultYear > size(this.iElementPairs[])
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimeFormatter):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == formatter.iLocale
this.iFormatter == formatter.iChrono
this.iFormatter == formatter.iZone
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
formatter.iPrinter == orig(formatter.iPrinter)
formatter.iPrinter.getClass().getName() == formatter.iParser.getClass().getName()
formatter.iPrinter.getClass().getName() == orig(formatter.iPrinter.getClass().getName())
formatter.iParser == orig(formatter.iParser)
formatter.iParser.getClass().getName() == orig(formatter.iParser.getClass().getName())
formatter.iLocale == orig(formatter.iLocale)
formatter.iOffsetParsed == orig(formatter.iOffsetParsed)
formatter.iChrono == orig(formatter.iChrono)
formatter.iZone == orig(formatter.iZone)
formatter.iPivotYear == orig(formatter.iPivotYear)
formatter.iDefaultYear == orig(formatter.iDefaultYear)
return == orig(this)
this.iFormatter == null
formatter.iParser != null
formatter.iLocale == null
formatter.iOffsetParsed == false
formatter.iChrono == null
formatter.iZone == null
formatter.iPivotYear == null
formatter.iDefaultYear == 2000
return != null
size(this.iElementPairs[]) one of { 2, 4, 6 }
formatter.iPrinter in this.iElementPairs[]
formatter.iParser in this.iElementPairs[]
formatter.iDefaultYear > size(this.iElementPairs[])
formatter.iDefaultYear > orig(size(this.iElementPairs[]))
size(this.iElementPairs[]) % orig(size(this.iElementPairs[]))-1 == 0
size(this.iElementPairs[])-1 > orig(size(this.iElementPairs[]))
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimeParser):::ENTER
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
parser has only one value
parser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimeParser):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[] has only one value, of length 2
this.iElementPairs[].getClass().getName() == [null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser]
this.iFormatter == null
size(this.iElementPairs[]) == 2
this.iFormatter in this.iElementPairs[]
orig(parser) in this.iElementPairs[]
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser[]):::ENTER
this.iFormatter == printer
this.iElementPairs[] elements are equal
this.iFormatter == null
printer == null
parsers.getClass().getName() == org.joda.time.format.DateTimeParser[].class
size(this.iElementPairs[]) one of { 0, 2 }
size(parsers[]) one of { 2, 3 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser[]):::EXIT328
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser[]):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
this.iFormatter == orig(printer)
parsers[] == orig(parsers[])
return == orig(this)
this.iFormatter == null
size(this.iElementPairs[]) one of { 2, 4 }
this.iFormatter in this.iElementPairs[]
orig(printer) in this.iElementPairs[]
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append0(java.lang.Object):::ENTER
this.iFormatter == null
element != null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append0(java.lang.Object):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iFormatter == null
return != null
size(this.iElementPairs[]) >= 2
orig(element) in this.iElementPairs[]
size(this.iElementPairs[]) - orig(size(this.iElementPairs[])) - 2 == 0
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append0(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser):::ENTER
printer.getClass().getName() == parser.getClass().getName()
this.iElementPairs[] elements != null
this.iFormatter == null
parser != null
size(this.iElementPairs[]) one of { 0, 2, 4 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.append0(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iFormatter == null
return != null
size(this.iElementPairs[]) one of { 2, 4, 6 }
orig(printer) in this.iElementPairs[]
orig(parser) in this.iElementPairs[]
size(this.iElementPairs[]) % orig(size(this.iElementPairs[]))-1 == 0
size(this.iElementPairs[])-1 > orig(size(this.iElementPairs[]))
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth(int):::ENTER
this.iFormatter == null
minDigits one of { 1, 2 }
size(this.iElementPairs[]) one of { 2, 4, 8 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth(int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[post(minDigits)-1])
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[minDigits-1])
this.iFormatter == null
size(this.iElementPairs[]) one of { 4, 6, 10 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeekShortText():::ENTER
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeekShortText():::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[] elements != null
this.iElementPairs[] elements are equal
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.TextField, org.joda.time.format.DateTimeFormatterBuilder.TextField]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.TextField.class
this.iFormatter == null
return != null
size(this.iElementPairs[]) == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal(org.joda.time.DateTimeFieldType, int, int):::ENTER
this.iElementPairs[] elements != null
this.iFormatter == null
fieldType != null
fieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
minDigits one of { 1, 2, 4 }
maxDigits one of { 2, 5, 9 }
minDigits <= maxDigits
size(this.iElementPairs[]) % minDigits == 0
minDigits != size(this.iElementPairs[])-1
size(this.iElementPairs[]) % maxDigits == 0
maxDigits != size(this.iElementPairs[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal(org.joda.time.DateTimeFieldType, int, int):::EXIT444
this.iElementPairs[orig(minDigits)] == this.iElementPairs[orig(minDigits)-1]
this.iElementPairs[orig(minDigits)] == this.iElementPairs[orig(maxDigits)-1]
this.iElementPairs[orig(minDigits)] == return.iElementPairs[orig(minDigits)-1]
this.iElementPairs[orig(minDigits)] == return.iElementPairs[orig(maxDigits)-1]
orig(minDigits) == 1
orig(maxDigits) == 2
orig(minDigits) <= size(this.iElementPairs[])-1
orig(minDigits) != orig(size(this.iElementPairs[]))
orig(maxDigits) <= size(this.iElementPairs[])
orig(maxDigits) != orig(size(this.iElementPairs[]))
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal(org.joda.time.DateTimeFieldType, int, int):::EXIT446
orig(minDigits) one of { 2, 4 }
orig(minDigits) != size(this.iElementPairs[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal(org.joda.time.DateTimeFieldType, int, int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
(orig(minDigits) == 1)  ==>  (orig(maxDigits) != orig(size(this.iElementPairs[])))
(orig(minDigits) == 1)  ==>  (orig(maxDigits) <= size(this.iElementPairs[]))
(orig(minDigits) == 1)  ==>  (orig(maxDigits) == 2)
(orig(minDigits) == 1)  ==>  (orig(minDigits) != orig(size(this.iElementPairs[])))
(orig(minDigits) == 1)  ==>  (orig(minDigits) < orig(maxDigits))
(orig(minDigits) == 1)  ==>  (orig(minDigits) <= size(this.iElementPairs[])-1)
(orig(minDigits) == 1)  ==>  (this.iElementPairs[maxDigits-1] == this.iElementPairs[orig(minDigits)])
(orig(minDigits) == 1)  ==>  (this.iElementPairs[minDigits-1] == this.iElementPairs[orig(minDigits)])
(orig(minDigits) == 1)  ==>  (this.iElementPairs[orig(minDigits)] == return.iElementPairs[maxDigits-1])
(orig(minDigits) == 1)  ==>  (this.iElementPairs[orig(minDigits)] == return.iElementPairs[minDigits-1])
(orig(minDigits) == 1)  ==>  (this.iElementPairs[orig(minDigits)] == return.iElementPairs[orig(maxDigits)-1])
(orig(minDigits) == 1)  ==>  (this.iElementPairs[orig(minDigits)] == return.iElementPairs[orig(minDigits)-1])
(orig(minDigits) == 1)  ==>  (this.iElementPairs[orig(minDigits)] == this.iElementPairs[orig(maxDigits)-1])
(orig(minDigits) == 1)  ==>  (this.iElementPairs[orig(minDigits)] == this.iElementPairs[orig(minDigits)-1])
(orig(minDigits) one of { 2, 4 })  ==>  (orig(maxDigits) one of { 2, 5, 9 })
(orig(minDigits) one of { 2, 4 })  ==>  (orig(minDigits) != size(this.iElementPairs[])-1)
this.iElementPairs[] elements != null
this.iFormatter == null
return != null
orig(maxDigits) != size(this.iElementPairs[])-1
size(this.iElementPairs[]) - orig(size(this.iElementPairs[])) - 2 == 0
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendEraText():::ENTER
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 8
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral]
this.iFormatter == null
size(this.iElementPairs[]) == 8
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendEraText():::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 10
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.TextField, org.joda.time.format.DateTimeFormatterBuilder.TextField]
this.iFormatter == null
return has only one value
size(this.iElementPairs[]) == 10
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendFraction(org.joda.time.DateTimeFieldType, int, int):::ENTER
this.iElementPairs[].getClass().getName() one of { [null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser], [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral] }
this.iFormatter == null
fieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
minDigits == 1
maxDigits == 9
size(this.iElementPairs[]) one of { 2, 4 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendFraction(org.joda.time.DateTimeFieldType, int, int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[orig(minDigits)] == orig(this.iElementPairs[post(minDigits)])
this.iElementPairs[orig(minDigits)] == orig(this.iElementPairs[minDigits])
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[post(minDigits)-1])
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[minDigits-1])
this.iElementPairs[].getClass().getName() one of { [null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser, org.joda.time.format.DateTimeFormatterBuilder.Fraction, org.joda.time.format.DateTimeFormatterBuilder.Fraction], [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.Fraction, org.joda.time.format.DateTimeFormatterBuilder.Fraction] }
this.iFormatter == null
size(this.iElementPairs[]) one of { 4, 6 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfHour(int, int):::ENTER
this.iFormatter == this.iElementPairs[minDigits-1]
minDigits == size(this.iElementPairs[])-1
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] has only one value, of length 2
this.iElementPairs[].getClass().getName() == [null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser]
this.iFormatter == null
maxDigits == 9
size(this.iElementPairs[]) == 2
this.iElementPairs[minDigits] has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfHour(int, int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
this.iFormatter == this.iElementPairs[orig(minDigits)-1]
this.iFormatter == orig(this.iElementPairs[post(minDigits)-1])
this.iFormatter == return.iElementPairs[orig(minDigits)-1]
this.iFormatter == orig(this.iElementPairs[minDigits-1])
return == orig(this)
this.iElementPairs[orig(minDigits)] == orig(this.iElementPairs[post(minDigits)])
this.iElementPairs[orig(minDigits)] == orig(this.iElementPairs[minDigits])
this.iElementPairs has only one value
this.iElementPairs[] has only one value, of length 4
this.iElementPairs[].getClass().getName() == [null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser, org.joda.time.format.DateTimeFormatterBuilder.Fraction, org.joda.time.format.DateTimeFormatterBuilder.Fraction]
this.iFormatter == null
return has only one value
size(this.iElementPairs[]) == 4
this.iElementPairs[orig(minDigits)] has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfMinute(int, int):::ENTER
this.iFormatter == this.iElementPairs[minDigits-1]
minDigits == size(this.iElementPairs[])-1
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] has only one value, of length 2
this.iElementPairs[].getClass().getName() == [null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser]
this.iFormatter == null
maxDigits == 9
size(this.iElementPairs[]) == 2
this.iElementPairs[minDigits] has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfMinute(int, int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
this.iFormatter == this.iElementPairs[orig(minDigits)-1]
this.iFormatter == orig(this.iElementPairs[post(minDigits)-1])
this.iFormatter == return.iElementPairs[orig(minDigits)-1]
this.iFormatter == orig(this.iElementPairs[minDigits-1])
return == orig(this)
this.iElementPairs[orig(minDigits)] == orig(this.iElementPairs[post(minDigits)])
this.iElementPairs[orig(minDigits)] == orig(this.iElementPairs[minDigits])
this.iElementPairs has only one value
this.iElementPairs[] has only one value, of length 4
this.iElementPairs[].getClass().getName() == [null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser, org.joda.time.format.DateTimeFormatterBuilder.Fraction, org.joda.time.format.DateTimeFormatterBuilder.Fraction]
this.iFormatter == null
return has only one value
size(this.iElementPairs[]) == 4
this.iElementPairs[orig(minDigits)] has only one value
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond(int, int):::ENTER
this.iElementPairs[].getClass().getName() one of { [null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser], [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral] }
this.iFormatter == null
minDigits == 1
maxDigits == 9
size(this.iElementPairs[]) one of { 2, 4 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond(int, int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[orig(minDigits)] == orig(this.iElementPairs[post(minDigits)])
this.iElementPairs[orig(minDigits)] == orig(this.iElementPairs[minDigits])
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[post(minDigits)-1])
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[minDigits-1])
this.iElementPairs[].getClass().getName() one of { [null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser, org.joda.time.format.DateTimeFormatterBuilder.Fraction, org.joda.time.format.DateTimeFormatterBuilder.Fraction], [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.Fraction, org.joda.time.format.DateTimeFormatterBuilder.Fraction] }
this.iFormatter == null
size(this.iElementPairs[]) one of { 4, 6 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendHourOfDay(int):::ENTER
this.iElementPairs[].getClass().getName() one of { [], [org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral] }
this.iFormatter == null
minDigits one of { 1, 2 }
size(this.iElementPairs[]) one of { 0, 8 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendHourOfDay(int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber], [org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber] }
this.iFormatter == null
size(this.iElementPairs[]) one of { 2, 10 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral(char):::ENTER
this.iElementPairs[] elements != null
this.iFormatter == null
c > size(this.iElementPairs[])
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral(char):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[] elements != null
this.iFormatter == null
return != null
orig(c) > size(this.iElementPairs[])
size(this.iElementPairs[]) - orig(size(this.iElementPairs[])) - 2 == 0
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendMinuteOfHour(int):::ENTER
this.iElementPairs[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral], [org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral] }
this.iFormatter == null
minDigits one of { 1, 2 }
size(this.iElementPairs[]) one of { 2, 12 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendMinuteOfHour(int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[post(minDigits)-1])
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[minDigits-1])
this.iElementPairs[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber], [org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber] }
this.iFormatter == null
size(this.iElementPairs[]) one of { 4, 14 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYear(int):::ENTER
this.iFormatter == null
minDigits one of { 1, 2 }
size(this.iElementPairs[]) one of { 0, 2, 4 }
size(this.iElementPairs[]) % minDigits == 0
minDigits != size(this.iElementPairs[])-1
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYear(int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iFormatter == null
size(this.iElementPairs[]) one of { 2, 4, 6 }
size(this.iElementPairs[]) % orig(minDigits) == 0
orig(minDigits) <= size(this.iElementPairs[])-1
size(this.iElementPairs[]) % orig(size(this.iElementPairs[]))-1 == 0
size(this.iElementPairs[])-1 > orig(size(this.iElementPairs[]))
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendOptional(org.joda.time.format.DateTimeParser):::ENTER
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 2
this.iElementPairs[] elements has only one value
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.Composite]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.Composite.class
this.iFormatter == null
parser has only one value
parser.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
size(this.iElementPairs[]) == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendOptional(org.joda.time.format.DateTimeParser):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs has only one value
this.iElementPairs[] has only one value, of length 4
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.Composite, null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser]
this.iFormatter == null
return has only one value
size(this.iElementPairs[]) == 4
this.iFormatter in this.iElementPairs[]
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfDay(int):::ENTER
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
minDigits == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfDay(int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
orig(minDigits) == size(this.iElementPairs[])
orig(minDigits) == size(return.iElementPairs[])
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 2
this.iElementPairs[] elements has only one value
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber.class
this.iFormatter == null
return has only one value
this.iElementPairs[] elements == this.iElementPairs[orig(minDigits)-1]
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfMinute(int):::ENTER
minDigits == size(this.iElementPairs[])
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 2
this.iElementPairs[] elements has only one value
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral.class
this.iFormatter == null
size(this.iElementPairs[]) == 2
this.iElementPairs[] elements == this.iElementPairs[minDigits-1]
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfMinute(int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[post(minDigits)-1])
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[minDigits-1])
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 4
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iFormatter == null
return has only one value
orig(minDigits) == 2
size(this.iElementPairs[]) == 4
this.iElementPairs[orig(minDigits)] has only one value
this.iElementPairs[orig(minDigits)-1] has only one value
orig(this.iElementPairs[]) elements == this.iElementPairs[orig(minDigits)-1]
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendShortText(org.joda.time.DateTimeFieldType):::ENTER
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
fieldType has only one value
fieldType != null
fieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendShortText(org.joda.time.DateTimeFieldType):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[] elements != null
this.iElementPairs[] elements are equal
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.TextField, org.joda.time.format.DateTimeFormatterBuilder.TextField]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.TextField.class
this.iFormatter == null
return != null
size(this.iElementPairs[]) == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal(org.joda.time.DateTimeFieldType, int, int):::ENTER
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
fieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
minDigits == 4
maxDigits == 9
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal(org.joda.time.DateTimeFieldType, int, int):::EXIT498
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal(org.joda.time.DateTimeFieldType, int, int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[] elements are equal
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber.class
this.iFormatter == null
size(this.iElementPairs[]) == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendText(org.joda.time.DateTimeFieldType):::ENTER
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 8
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral]
this.iFormatter == null
fieldType has only one value
fieldType.getClass().getName() == org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.class
size(this.iElementPairs[]) == 8
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendText(org.joda.time.DateTimeFieldType):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 10
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.TextField, org.joda.time.format.DateTimeFormatterBuilder.TextField]
this.iFormatter == null
return has only one value
size(this.iElementPairs[]) == 10
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset(java.lang.String, boolean, int, int):::ENTER
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
zeroOffsetText has only one value
zeroOffsetText.toString == "Z"
showSeparators == true
minFields == 2
maxFields == 4
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset(java.lang.String, boolean, int, int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
zeroOffsetText.toString == orig(zeroOffsetText.toString)
return == orig(this)
orig(minFields) == size(this.iElementPairs[])
orig(minFields) == size(return.iElementPairs[])
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 2
this.iElementPairs[] elements has only one value
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset, org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset.class
this.iFormatter == null
zeroOffsetText.toString == "Z"
return has only one value
this.iElementPairs[] elements == this.iElementPairs[orig(minFields)-1]
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitYear(int, boolean):::ENTER
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
pivot == 1972
lenientParse == true
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendTwoDigitYear(int, boolean):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 2
this.iElementPairs[] elements has only one value
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear, org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear.class
this.iFormatter == null
return has only one value
size(this.iElementPairs[]) == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear(int):::ENTER
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral]
this.iFormatter == null
minDigits == 2
size(this.iElementPairs[]) == 8
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear(int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[orig(minDigits)] == orig(this.iElementPairs[post(minDigits)])
this.iElementPairs[orig(minDigits)] == orig(this.iElementPairs[minDigits])
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[post(minDigits)-1])
this.iElementPairs[orig(minDigits)-1] == orig(this.iElementPairs[minDigits-1])
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iFormatter == null
size(this.iElementPairs[]) == 10
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendWeekyear(int, int):::ENTER
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
minDigits == 4
maxDigits == 9
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendWeekyear(int, int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 2
this.iElementPairs[] elements has only one value
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber.class
this.iFormatter == null
return has only one value
size(this.iElementPairs[]) == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendYear(int, int):::ENTER
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
minDigits == 4
maxDigits == 9
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendYear(int, int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs[] elements are equal
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber.class
this.iFormatter == null
size(this.iElementPairs[]) == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendYearOfEra(int, int):::ENTER
this has only one value
this.iElementPairs has only one value
this.iElementPairs[] == []
this.iElementPairs[].getClass().getName() == []
this.iFormatter == null
minDigits == 4
maxDigits == 9
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.appendYearOfEra(int, int):::EXIT
this.iElementPairs == return.iElementPairs
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == return.iElementPairs[]
this.iFormatter == return.iFormatter
this.iFormatter == orig(this.iFormatter)
return == orig(this)
this.iElementPairs has only one value
this.iElementPairs[] contains no nulls and has only one value, of length 2
this.iElementPairs[] elements has only one value
this.iElementPairs[].getClass().getName() == [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber]
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber.class
this.iFormatter == null
return has only one value
size(this.iElementPairs[]) == 2
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.checkParser(org.joda.time.format.DateTimeParser):::ENTER
this.iElementPairs[] elements has only one value
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.Composite.class
this.iElementPairs[].getClass().getName() one of { [], [org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.Composite] }
this.iFormatter == null
size(this.iElementPairs[]) one of { 0, 2 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.checkParser(org.joda.time.format.DateTimeParser):::EXIT
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == orig(this.iElementPairs[])
this.iFormatter == orig(this.iFormatter)
this.iElementPairs[] elements has only one value
this.iElementPairs[].getClass().getName() elements == org.joda.time.format.DateTimeFormatterBuilder.Composite.class
this.iElementPairs[].getClass().getName() one of { [], [org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.Composite] }
this.iFormatter == null
size(this.iElementPairs[]) one of { 0, 2 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.getFormatter():::ENTER
this.iFormatter == null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.getFormatter():::EXIT
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == orig(this.iElementPairs[])
this.iFormatter == return
this.iFormatter.getClass().getName() == return.getClass().getName()
return != null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isParser(java.lang.Object):::ENTER
this.iFormatter == f
this.iFormatter.getClass().getName() == f.getClass().getName()
this.iFormatter != null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isParser(java.lang.Object):::EXIT1177
this.iFormatter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isParser(java.lang.Object):::EXIT1177;condition="return == true"
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isParser(java.lang.Object):::EXIT1179
size(this.iElementPairs[]) == 2
this.iFormatter in this.iElementPairs[]
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isParser(java.lang.Object):::EXIT1179;condition="return == true"
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isParser(java.lang.Object):::EXIT
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == orig(this.iElementPairs[])
this.iFormatter == orig(this.iFormatter)
this.iFormatter == orig(f)
this.iFormatter.getClass().getName() == orig(this.iFormatter.getClass().getName())
this.iFormatter.getClass().getName() == orig(f.getClass().getName())
this.iFormatter != null
return == true
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isParser(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isPrinter(java.lang.Object):::ENTER
this.iFormatter == f
this.iFormatter.getClass().getName() == f.getClass().getName()
this.iFormatter != null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isPrinter(java.lang.Object):::EXIT1167
(return == false)  ==>  (size(this.iElementPairs[]) one of { 4, 6 })
(return == false)  ==>  (this.iElementPairs[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, null, org.joda.time.format.DateTimeFormatterBuilder.Composite], [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser] })
(return == true)  ==>  (this.iElementPairs[] elements != null)
this.iFormatter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isPrinter(java.lang.Object):::EXIT1167;condition="return == true"
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isPrinter(java.lang.Object):::EXIT1167;condition="not(return == true)"
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isPrinter(java.lang.Object):::EXIT1169
this.iElementPairs[] elements are equal
return == true
size(this.iElementPairs[]) == 2
this.iElementPairs[] elements == this.iFormatter
this.iFormatter in this.iElementPairs[]
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isPrinter(java.lang.Object):::EXIT1169;condition="return == true"
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isPrinter(java.lang.Object):::EXIT
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == orig(this.iElementPairs[])
this.iFormatter == orig(this.iFormatter)
this.iFormatter == orig(f)
this.iFormatter.getClass().getName() == orig(this.iFormatter.getClass().getName())
this.iFormatter.getClass().getName() == orig(f.getClass().getName())
(return == false)  ==>  (size(this.iElementPairs[]) one of { 4, 6 })
(return == false)  ==>  (this.iElementPairs[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, null, org.joda.time.format.DateTimeFormatterBuilder.Composite], [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser] })
(return == false)  ==>  (this.iFormatter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class)
(return == true)  ==>  (this.iElementPairs[] elements != null)
this.iFormatter != null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isPrinter(java.lang.Object):::EXIT;condition="return == true"
this.iElementPairs[] elements != null
return == true
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.isPrinter(java.lang.Object):::EXIT;condition="not(return == true)"
this.iElementPairs[].getClass().getName() one of { [org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.Composite, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral, null, org.joda.time.format.DateTimeFormatterBuilder.Composite], [org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber, null, org.joda.time.format.DateTimeFormatterBuilder.MatchingParser] }
this.iFormatter.getClass().getName() == org.joda.time.format.DateTimeFormatterBuilder$Composite.class
return == false
size(this.iElementPairs[]) one of { 4, 6 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.toFormatter():::ENTER
this.iFormatter == null
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.toFormatter():::EXIT
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == orig(this.iElementPairs[])
this.iFormatter == return.iParser
this.iFormatter.getClass().getName() == return.iPrinter.getClass().getName()
this.iFormatter.getClass().getName() == return.iParser.getClass().getName()
return.iLocale == orig(this.iFormatter)
return.iChrono == orig(this.iFormatter)
return.iZone == orig(this.iFormatter)
this.iFormatter != null
return != null
return.iParser != null
return.iLocale == null
return.iOffsetParsed == false
return.iChrono == null
return.iZone == null
return.iPivotYear == null
return.iDefaultYear == 2000
return.iDefaultYear > size(this.iElementPairs[])
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.toParser():::ENTER
this.iFormatter == null
size(this.iElementPairs[]) one of { 2, 4 }
===========================================================================
org.joda.time.format.DateTimeFormatterBuilder.toParser():::EXIT
this.iElementPairs == orig(this.iElementPairs)
this.iElementPairs[] == orig(this.iElementPairs[])
this.iFormatter == return
this.iFormatter.getClass().getName() == return.getClass().getName()
size(this.iElementPairs[]) one of { 2, 4 }
Exiting Daikon.
